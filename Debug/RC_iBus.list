
RC_iBus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08003ac4  08003ac4  00013ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dbc  08003dbc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003dbc  08003dbc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003dbc  08003dbc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08003dbc  08003dbc  00013dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  08003dcc  08003dcc  00013dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  20000070  08003e48  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  08003e48  00020450  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00042dae  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007ac0  00000000  00000000  00062e47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00013639  00000000  00000000  0006a907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001518  00000000  00000000  0007df40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001608  00000000  00000000  0007f458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024b41  00000000  00000000  00080a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000259eb  00000000  00000000  000a55a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a4c7e  00000000  00000000  000caf8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016fc0a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bc8  00000000  00000000  0016fc60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003aac 	.word	0x08003aac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003aac 	.word	0x08003aac

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <_Z41__static_initialization_and_destruction_0ii>:
    /* For test, toggle Green LED */
    DO_Toggle(LED_GREEN);

    /* Send a string on serial port */
    Serial1.print("Hello ");
}
 800015c:	2801      	cmp	r0, #1
 800015e:	d000      	beq.n	8000162 <_Z41__static_initialization_and_destruction_0ii+0x6>
 8000160:	4770      	bx	lr
 8000162:	b508      	push	{r3, lr}
 8000164:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000168:	4299      	cmp	r1, r3
 800016a:	d000      	beq.n	800016e <_Z41__static_initialization_and_destruction_0ii+0x12>
 800016c:	bd08      	pop	{r3, pc}
HardwareSerial Serial1(PA_10, PA_9);
 800016e:	2209      	movs	r2, #9
 8000170:	210a      	movs	r1, #10
 8000172:	4802      	ldr	r0, [pc, #8]	; (800017c <_Z41__static_initialization_and_destruction_0ii+0x20>)
 8000174:	f001 ffba 	bl	80020ec <_ZN14HardwareSerialC1E7PinNameS0_>
}
 8000178:	e7f8      	b.n	800016c <_Z41__static_initialization_and_destruction_0ii+0x10>
 800017a:	bf00      	nop
 800017c:	2000008c 	.word	0x2000008c

08000180 <mainAppl_Init>:
{
 8000180:	b508      	push	{r3, lr}
    mainCnt = 0u;
 8000182:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <mainAppl_Init+0x28>)
 8000184:	2200      	movs	r2, #0
 8000186:	701a      	strb	r2, [r3, #0]
    DO_Init();
 8000188:	f000 f988 	bl	800049c <DO_Init>
    eh_Init();
 800018c:	f000 f970 	bl	8000470 <eh_Init>
    cfgUART_Init();
 8000190:	f000 f9fc 	bl	800058c <cfgUART_Init>
    tslstmr_Init();
 8000194:	f000 f938 	bl	8000408 <tslstmr_Init>
    HardwareSerial(void *peripheral, HalfDuplexMode_t halfDuplex = HALF_DUPLEX_DISABLED);
    HardwareSerial(uint32_t _rxtx);
    HardwareSerial(PinName _rxtx);
    void begin(unsigned long baud)
    {
      begin(baud, SERIAL_8N1);
 8000198:	2206      	movs	r2, #6
 800019a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800019e:	4803      	ldr	r0, [pc, #12]	; (80001ac <mainAppl_Init+0x2c>)
 80001a0:	f002 f852 	bl	8002248 <_ZN14HardwareSerial5beginEmh>
}
 80001a4:	bd08      	pop	{r3, pc}
 80001a6:	bf00      	nop
 80001a8:	20000198 	.word	0x20000198
 80001ac:	2000008c 	.word	0x2000008c

080001b0 <tsl_10ms_time_slot>:
    mainCnt++;
 80001b0:	4a02      	ldr	r2, [pc, #8]	; (80001bc <tsl_10ms_time_slot+0xc>)
 80001b2:	7813      	ldrb	r3, [r2, #0]
 80001b4:	3301      	adds	r3, #1
 80001b6:	7013      	strb	r3, [r2, #0]
}
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	20000198 	.word	0x20000198

080001c0 <tsl_20ms_time_slot>:
}
 80001c0:	4770      	bx	lr

080001c2 <tsl_40ms_time_slot>:
}
 80001c2:	4770      	bx	lr

080001c4 <tsl_80ms_time_slot>:
{
 80001c4:	b508      	push	{r3, lr}
    DO_Toggle(LED_GREEN);
 80001c6:	2000      	movs	r0, #0
 80001c8:	f000 f99c 	bl	8000504 <DO_Toggle>
    Serial1.print("Hello ");
 80001cc:	4902      	ldr	r1, [pc, #8]	; (80001d8 <tsl_80ms_time_slot+0x14>)
 80001ce:	4803      	ldr	r0, [pc, #12]	; (80001dc <tsl_80ms_time_slot+0x18>)
 80001d0:	f002 fbca 	bl	8002968 <_ZN5Print5printEPKc>
}
 80001d4:	bd08      	pop	{r3, pc}
 80001d6:	bf00      	nop
 80001d8:	08003ac4 	.word	0x08003ac4
 80001dc:	2000008c 	.word	0x2000008c

080001e0 <_GLOBAL__sub_I_Serial1>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80001e6:	2001      	movs	r0, #1
 80001e8:	f7ff ffb8 	bl	800015c <_Z41__static_initialization_and_destruction_0ii>
 80001ec:	bd08      	pop	{r3, pc}
	...

080001f0 <ms_disable_irq>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001f0:	b672      	cpsid	i
//******************************************************************************
void ms_disable_irq(void)
{
    __disable_irq();
    /* Increment interrupts disabled counter */
    i_cnt++;
 80001f2:	4a02      	ldr	r2, [pc, #8]	; (80001fc <ms_disable_irq+0xc>)
 80001f4:	6813      	ldr	r3, [r2, #0]
 80001f6:	3301      	adds	r3, #1
 80001f8:	6013      	str	r3, [r2, #0]
}
 80001fa:	4770      	bx	lr
 80001fc:	2000019c 	.word	0x2000019c

08000200 <ms_enable_irq>:
// Enable all interrupts
//******************************************************************************
void ms_enable_irq(void)
{
    /* Decrement interrupts disable counter */
    if (i_cnt)
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <ms_enable_irq+0x18>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	b11b      	cbz	r3, 800020e <ms_enable_irq+0xe>
    {
        i_cnt--;
 8000206:	4a04      	ldr	r2, [pc, #16]	; (8000218 <ms_enable_irq+0x18>)
 8000208:	6813      	ldr	r3, [r2, #0]
 800020a:	3b01      	subs	r3, #1
 800020c:	6013      	str	r3, [r2, #0]
    }

    if (i_cnt == 0)
 800020e:	4b02      	ldr	r3, [pc, #8]	; (8000218 <ms_enable_irq+0x18>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	b903      	cbnz	r3, 8000216 <ms_enable_irq+0x16>
  __ASM volatile ("cpsie i" : : : "memory");
 8000214:	b662      	cpsie	i
    {
        __enable_irq();
    }
}
 8000216:	4770      	bx	lr
 8000218:	2000019c 	.word	0x2000019c

0800021c <tsl_OnTickTimeEvent>:
// Function to be called from Timer ISR
// Just increment the tick counter in this function
//******************************************************************************
void tsl_OnTickTimeEvent(void)
{
	tslTickCnt++;
 800021c:	4a02      	ldr	r2, [pc, #8]	; (8000228 <tsl_OnTickTimeEvent+0xc>)
 800021e:	6813      	ldr	r3, [r2, #0]
 8000220:	3301      	adds	r3, #1
 8000222:	6013      	str	r3, [r2, #0]
}
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	200003bc 	.word	0x200003bc

0800022c <tsl_call_sequence_first>:
// Initial call sequence for time slot functions.
// This sequence is used only for fist calls. After initial sequece is passed,
// normal sequence is used. 
//******************************************************************************
static void tsl_call_sequence_first(uint32_t cnt)
{
 800022c:	b508      	push	{r3, lr}
    switch (cnt)
 800022e:	3802      	subs	r0, #2
 8000230:	2807      	cmp	r0, #7
 8000232:	d807      	bhi.n	8000244 <tsl_call_sequence_first+0x18>
 8000234:	e8df f000 	tbb	[pc, r0]
 8000238:	0d0a0704 	.word	0x0d0a0704
 800023c:	19161310 	.word	0x19161310
        case 1:
            // no call here
        break;

        case 2:
            tsl_10ms_time_slot();
 8000240:	f7ff ffb6 	bl	80001b0 <tsl_10ms_time_slot>

        default:
            //TODO: eh_Err_Set(ERR_TSL_CSF_OUT_OF_RANGE);
        break;
    }
}
 8000244:	bd08      	pop	{r3, pc}
            tsl_20ms_time_slot();
 8000246:	f7ff ffbb 	bl	80001c0 <tsl_20ms_time_slot>
        break;
 800024a:	e7fb      	b.n	8000244 <tsl_call_sequence_first+0x18>
            tsl_10ms_time_slot();
 800024c:	f7ff ffb0 	bl	80001b0 <tsl_10ms_time_slot>
        break;
 8000250:	e7f8      	b.n	8000244 <tsl_call_sequence_first+0x18>
            tsl_40ms_time_slot();
 8000252:	f7ff ffb6 	bl	80001c2 <tsl_40ms_time_slot>
        break;
 8000256:	e7f5      	b.n	8000244 <tsl_call_sequence_first+0x18>
            tsl_10ms_time_slot();
 8000258:	f7ff ffaa 	bl	80001b0 <tsl_10ms_time_slot>
        break;
 800025c:	e7f2      	b.n	8000244 <tsl_call_sequence_first+0x18>
            tsl_20ms_time_slot();
 800025e:	f7ff ffaf 	bl	80001c0 <tsl_20ms_time_slot>
        break;
 8000262:	e7ef      	b.n	8000244 <tsl_call_sequence_first+0x18>
            tsl_10ms_time_slot();
 8000264:	f7ff ffa4 	bl	80001b0 <tsl_10ms_time_slot>
        break;
 8000268:	e7ec      	b.n	8000244 <tsl_call_sequence_first+0x18>
            tsl_80ms_time_slot();
 800026a:	f7ff ffab 	bl	80001c4 <tsl_80ms_time_slot>
}
 800026e:	e7e9      	b.n	8000244 <tsl_call_sequence_first+0x18>

08000270 <tsl_call_sequence_normal>:
//******************************************************************************
// Normal call sequence for time slot functions.
// After initial sequece is passed, normal sequence is used.
//******************************************************************************
static void tsl_call_sequence_normal(uint32_t *cnt)
{
 8000270:	b510      	push	{r4, lr}
 8000272:	4604      	mov	r4, r0
    switch (*cnt)
 8000274:	6803      	ldr	r3, [r0, #0]
 8000276:	3b01      	subs	r3, #1
 8000278:	2b0f      	cmp	r3, #15
 800027a:	d838      	bhi.n	80002ee <tsl_call_sequence_normal+0x7e>
 800027c:	e8df f003 	tbb	[pc, r3]
 8000280:	110e0b08 	.word	0x110e0b08
 8000284:	0a1a1714 	.word	0x0a1a1714
 8000288:	2623201d 	.word	0x2623201d
 800028c:	322f2c29 	.word	0x322f2c29
    {
        case 1:
            tsl_10ms_time_slot();
 8000290:	f7ff ff8e 	bl	80001b0 <tsl_10ms_time_slot>
        default:
            //TODO: eh_Err_Set(ERR_TSL_CSN_OUT_OF_RANGE);
            *cnt = 0;
        break;
    }
}
 8000294:	bd10      	pop	{r4, pc}
            tsl_20ms_time_slot();
 8000296:	f7ff ff93 	bl	80001c0 <tsl_20ms_time_slot>
        break;
 800029a:	e7fb      	b.n	8000294 <tsl_call_sequence_normal+0x24>
            tsl_10ms_time_slot();
 800029c:	f7ff ff88 	bl	80001b0 <tsl_10ms_time_slot>
        break;
 80002a0:	e7f8      	b.n	8000294 <tsl_call_sequence_normal+0x24>
            tsl_40ms_time_slot();
 80002a2:	f7ff ff8e 	bl	80001c2 <tsl_40ms_time_slot>
        break;
 80002a6:	e7f5      	b.n	8000294 <tsl_call_sequence_normal+0x24>
            tsl_10ms_time_slot();
 80002a8:	f7ff ff82 	bl	80001b0 <tsl_10ms_time_slot>
        break;
 80002ac:	e7f2      	b.n	8000294 <tsl_call_sequence_normal+0x24>
            tsl_20ms_time_slot();
 80002ae:	f7ff ff87 	bl	80001c0 <tsl_20ms_time_slot>
        break;
 80002b2:	e7ef      	b.n	8000294 <tsl_call_sequence_normal+0x24>
            tsl_10ms_time_slot();
 80002b4:	f7ff ff7c 	bl	80001b0 <tsl_10ms_time_slot>
        break;
 80002b8:	e7ec      	b.n	8000294 <tsl_call_sequence_normal+0x24>
            tsl_10ms_time_slot();
 80002ba:	f7ff ff79 	bl	80001b0 <tsl_10ms_time_slot>
        break;
 80002be:	e7e9      	b.n	8000294 <tsl_call_sequence_normal+0x24>
            tsl_20ms_time_slot();
 80002c0:	f7ff ff7e 	bl	80001c0 <tsl_20ms_time_slot>
        break;
 80002c4:	e7e6      	b.n	8000294 <tsl_call_sequence_normal+0x24>
            tsl_10ms_time_slot();
 80002c6:	f7ff ff73 	bl	80001b0 <tsl_10ms_time_slot>
        break;
 80002ca:	e7e3      	b.n	8000294 <tsl_call_sequence_normal+0x24>
            tsl_40ms_time_slot();
 80002cc:	f7ff ff79 	bl	80001c2 <tsl_40ms_time_slot>
        break;
 80002d0:	e7e0      	b.n	8000294 <tsl_call_sequence_normal+0x24>
            tsl_10ms_time_slot();
 80002d2:	f7ff ff6d 	bl	80001b0 <tsl_10ms_time_slot>
        break;
 80002d6:	e7dd      	b.n	8000294 <tsl_call_sequence_normal+0x24>
            tsl_20ms_time_slot();
 80002d8:	f7ff ff72 	bl	80001c0 <tsl_20ms_time_slot>
        break;
 80002dc:	e7da      	b.n	8000294 <tsl_call_sequence_normal+0x24>
            tsl_10ms_time_slot();
 80002de:	f7ff ff67 	bl	80001b0 <tsl_10ms_time_slot>
        break;
 80002e2:	e7d7      	b.n	8000294 <tsl_call_sequence_normal+0x24>
            tsl_80ms_time_slot();
 80002e4:	f7ff ff6e 	bl	80001c4 <tsl_80ms_time_slot>
            *cnt = 0;
 80002e8:	2300      	movs	r3, #0
 80002ea:	6023      	str	r3, [r4, #0]
        break;
 80002ec:	e7d2      	b.n	8000294 <tsl_call_sequence_normal+0x24>
            *cnt = 0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	6003      	str	r3, [r0, #0]
}
 80002f2:	e7cf      	b.n	8000294 <tsl_call_sequence_normal+0x24>

080002f4 <tsl_Scheduler>:
{
 80002f4:	b510      	push	{r4, lr}
    if (call_seq == INITIAL_CALL_SEQUENCE) // At the system initialization need to run this call sequence
 80002f6:	4b0d      	ldr	r3, [pc, #52]	; (800032c <tsl_Scheduler+0x38>)
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	b113      	cbz	r3, 8000302 <tsl_Scheduler+0xe>
    else if (call_seq == NORMAL_CALL_SEQUENCE) // Normal call sequence
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d00d      	beq.n	800031c <tsl_Scheduler+0x28>
}
 8000300:	bd10      	pop	{r4, pc}
        call_cnt_seq_1++;
 8000302:	4c0b      	ldr	r4, [pc, #44]	; (8000330 <tsl_Scheduler+0x3c>)
 8000304:	6820      	ldr	r0, [r4, #0]
 8000306:	3001      	adds	r0, #1
 8000308:	6020      	str	r0, [r4, #0]
        tsl_call_sequence_first(call_cnt_seq_1);
 800030a:	f7ff ff8f 	bl	800022c <tsl_call_sequence_first>
        if(call_cnt_seq_1 >= NR_CALLS_INI_SEQ)
 800030e:	6823      	ldr	r3, [r4, #0]
 8000310:	2b08      	cmp	r3, #8
 8000312:	d9f5      	bls.n	8000300 <tsl_Scheduler+0xc>
            call_seq = NORMAL_CALL_SEQUENCE;
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <tsl_Scheduler+0x38>)
 8000316:	2201      	movs	r2, #1
 8000318:	701a      	strb	r2, [r3, #0]
 800031a:	e7f1      	b.n	8000300 <tsl_Scheduler+0xc>
        call_cnt_seq_n++;
 800031c:	4805      	ldr	r0, [pc, #20]	; (8000334 <tsl_Scheduler+0x40>)
 800031e:	6803      	ldr	r3, [r0, #0]
 8000320:	3301      	adds	r3, #1
 8000322:	6003      	str	r3, [r0, #0]
        tsl_call_sequence_normal(&call_cnt_seq_n);
 8000324:	f7ff ffa4 	bl	8000270 <tsl_call_sequence_normal>
}
 8000328:	e7ea      	b.n	8000300 <tsl_Scheduler+0xc>
 800032a:	bf00      	nop
 800032c:	200001a8 	.word	0x200001a8
 8000330:	200001a0 	.word	0x200001a0
 8000334:	200001a4 	.word	0x200001a4

08000338 <tsl_Init>:
{
 8000338:	b508      	push	{r3, lr}
	tslTickCnt = 0u;
 800033a:	4b04      	ldr	r3, [pc, #16]	; (800034c <tsl_Init+0x14>)
 800033c:	2200      	movs	r2, #0
 800033e:	601a      	str	r2, [r3, #0]
	tsl_mainAppl_Init();
 8000340:	f7ff ff1e 	bl	8000180 <mainAppl_Init>
	tslstmr_RegisterTmrExpireCallback(tsl_OnTickTimeEvent);
 8000344:	4802      	ldr	r0, [pc, #8]	; (8000350 <tsl_Init+0x18>)
 8000346:	f000 f84b 	bl	80003e0 <tslstmr_RegisterTmrExpireCallback>
}
 800034a:	bd08      	pop	{r3, pc}
 800034c:	200003bc 	.word	0x200003bc
 8000350:	0800021d 	.word	0x0800021d

08000354 <tsl_SchedulerRun>:
{
 8000354:	b510      	push	{r4, lr}
 8000356:	e001      	b.n	800035c <tsl_SchedulerRun+0x8>
            tsl_Scheduler();
 8000358:	f7ff ffcc 	bl	80002f4 <tsl_Scheduler>
        TSL_GLOBAL_DISABLE_ISR();
 800035c:	f7ff ff48 	bl	80001f0 <ms_disable_irq>
        l_tickCnt = tslTickCnt;
 8000360:	4b04      	ldr	r3, [pc, #16]	; (8000374 <tsl_SchedulerRun+0x20>)
 8000362:	681c      	ldr	r4, [r3, #0]
        tslTickCnt = 0u;
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
        TSL_GLOBAL_ENABLE_ISR();
 8000368:	f7ff ff4a 	bl	8000200 <ms_enable_irq>
        if (l_tickCnt)
 800036c:	2c00      	cmp	r4, #0
 800036e:	d0f5      	beq.n	800035c <tsl_SchedulerRun+0x8>
 8000370:	e7f2      	b.n	8000358 <tsl_SchedulerRun+0x4>
 8000372:	bf00      	nop
 8000374:	200003bc 	.word	0x200003bc

08000378 <_ZL16OnTickTmrExpiredv>:
  * @brief  TickTimer interrupt callback - this function is called by Hardware Timer module
  * @param  None
  * @retval None
  */
static void OnTickTmrExpired()
{
 8000378:	b508      	push	{r3, lr}
    /* Call user function */
    if (pFncTmrExp != NULL)
 800037a:	4b02      	ldr	r3, [pc, #8]	; (8000384 <_ZL16OnTickTmrExpiredv+0xc>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	b103      	cbz	r3, 8000382 <_ZL16OnTickTmrExpiredv+0xa>
    {
        pFncTmrExp();
 8000380:	4798      	blx	r3
    }
}
 8000382:	bd08      	pop	{r3, pc}
 8000384:	2000025c 	.word	0x2000025c

08000388 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8000388:	b508      	push	{r3, lr}
      {
	(*_Base::_M_get_pointer(__functor))(
 800038a:	6803      	ldr	r3, [r0, #0]
 800038c:	4798      	blx	r3
	    std::forward<_ArgTypes>(__args)...);
      }
 800038e:	bd08      	pop	{r3, pc}

08000390 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
 8000390:	2a01      	cmp	r2, #1
 8000392:	d003      	beq.n	800039c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
 8000394:	2a02      	cmp	r2, #2
 8000396:	d003      	beq.n	80003a0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
 8000398:	2000      	movs	r0, #0
 800039a:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800039c:	6001      	str	r1, [r0, #0]
	      break;
 800039e:	e7fb      	b.n	8000398 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80003a0:	680b      	ldr	r3, [r1, #0]
 80003a2:	6003      	str	r3, [r0, #0]
	      break;
 80003a4:	e7f8      	b.n	8000398 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	...

080003a8 <_Z41__static_initialization_and_destruction_0ii>:
 80003a8:	b538      	push	{r3, r4, r5, lr}
 80003aa:	4604      	mov	r4, r0
 80003ac:	460d      	mov	r5, r1
 80003ae:	2801      	cmp	r0, #1
 80003b0:	d005      	beq.n	80003be <_Z41__static_initialization_and_destruction_0ii+0x16>
static HardwareTimer TickTmr(TIM4);
 80003b2:	b91c      	cbnz	r4, 80003bc <_Z41__static_initialization_and_destruction_0ii+0x14>
 80003b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003b8:	429d      	cmp	r5, r3
 80003ba:	d009      	beq.n	80003d0 <_Z41__static_initialization_and_destruction_0ii+0x28>
}
 80003bc:	bd38      	pop	{r3, r4, r5, pc}
 80003be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003c2:	4299      	cmp	r1, r3
 80003c4:	d1f5      	bne.n	80003b2 <_Z41__static_initialization_and_destruction_0ii+0xa>
static HardwareTimer TickTmr(TIM4);
 80003c6:	4904      	ldr	r1, [pc, #16]	; (80003d8 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80003c8:	4804      	ldr	r0, [pc, #16]	; (80003dc <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80003ca:	f002 f971 	bl	80026b0 <_ZN13HardwareTimerC1EP11TIM_TypeDef>
 80003ce:	e7f0      	b.n	80003b2 <_Z41__static_initialization_and_destruction_0ii+0xa>
 80003d0:	4802      	ldr	r0, [pc, #8]	; (80003dc <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80003d2:	f002 f8e5 	bl	80025a0 <_ZN13HardwareTimerD1Ev>
}
 80003d6:	e7f1      	b.n	80003bc <_Z41__static_initialization_and_destruction_0ii+0x14>
 80003d8:	40000800 	.word	0x40000800
 80003dc:	200001ac 	.word	0x200001ac

080003e0 <tslstmr_RegisterTmrExpireCallback>:
    pFncTmrExp = pTmrExpiredCallback;
 80003e0:	4b01      	ldr	r3, [pc, #4]	; (80003e8 <tslstmr_RegisterTmrExpireCallback+0x8>)
 80003e2:	6018      	str	r0, [r3, #0]
}
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	2000025c 	.word	0x2000025c

080003ec <_ZNSt8functionIFvvEEC1IPS0_vvEET_>:
    _Function_base() : _M_manager(nullptr) { }
 80003ec:	2300      	movs	r3, #0
 80003ee:	6083      	str	r3, [r0, #8]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 80003f0:	b121      	cbz	r1, 80003fc <_ZNSt8functionIFvvEEC1IPS0_vvEET_+0x10>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80003f2:	6001      	str	r1, [r0, #0]
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80003f4:	4b02      	ldr	r3, [pc, #8]	; (8000400 <_ZNSt8functionIFvvEEC1IPS0_vvEET_+0x14>)
 80003f6:	60c3      	str	r3, [r0, #12]
	    _M_manager = &_My_handler::_M_manager;
 80003f8:	4b02      	ldr	r3, [pc, #8]	; (8000404 <_ZNSt8functionIFvvEEC1IPS0_vvEET_+0x18>)
 80003fa:	6083      	str	r3, [r0, #8]
	  }
      }
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	08000389 	.word	0x08000389
 8000404:	08000391 	.word	0x08000391

08000408 <tslstmr_Init>:
{
 8000408:	b510      	push	{r4, lr}
 800040a:	b084      	sub	sp, #16
    pFncTmrExp = NULL;
 800040c:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <tslstmr_Init+0x40>)
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
    TickTmr.setOverflow(TSL_SCHEDULER_TIME_TICK, MICROSEC_FORMAT);
 8000412:	4c0e      	ldr	r4, [pc, #56]	; (800044c <tslstmr_Init+0x44>)
 8000414:	2201      	movs	r2, #1
 8000416:	f241 3188 	movw	r1, #5000	; 0x1388
 800041a:	4620      	mov	r0, r4
 800041c:	f002 f992 	bl	8002744 <_ZN13HardwareTimer11setOverflowEm13TimerFormat_t>
    TickTmr.attachInterrupt(OnTickTmrExpired);
 8000420:	490b      	ldr	r1, [pc, #44]	; (8000450 <tslstmr_Init+0x48>)
 8000422:	4668      	mov	r0, sp
 8000424:	f7ff ffe2 	bl	80003ec <_ZNSt8functionIFvvEEC1IPS0_vvEET_>
 8000428:	4669      	mov	r1, sp
 800042a:	4620      	mov	r0, r4
 800042c:	f002 f9f5 	bl	800281a <_ZN13HardwareTimer15attachInterruptESt8functionIFvvEE>
      if (_M_manager)
 8000430:	9b02      	ldr	r3, [sp, #8]
 8000432:	b11b      	cbz	r3, 800043c <tslstmr_Init+0x34>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000434:	2203      	movs	r2, #3
 8000436:	4669      	mov	r1, sp
 8000438:	4668      	mov	r0, sp
 800043a:	4798      	blx	r3
    TickTmr.resume();
 800043c:	4803      	ldr	r0, [pc, #12]	; (800044c <tslstmr_Init+0x44>)
 800043e:	f002 f86f 	bl	8002520 <_ZN13HardwareTimer6resumeEv>
}
 8000442:	b004      	add	sp, #16
 8000444:	bd10      	pop	{r4, pc}
 8000446:	bf00      	nop
 8000448:	2000025c 	.word	0x2000025c
 800044c:	200001ac 	.word	0x200001ac
 8000450:	08000379 	.word	0x08000379

08000454 <_GLOBAL__sub_I_pFncTmrExp>:
}
 8000454:	b508      	push	{r3, lr}
 8000456:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800045a:	2001      	movs	r0, #1
 800045c:	f7ff ffa4 	bl	80003a8 <_Z41__static_initialization_and_destruction_0ii>
 8000460:	bd08      	pop	{r3, pc}

08000462 <_GLOBAL__sub_D_pFncTmrExp>:
 8000462:	b508      	push	{r3, lr}
 8000464:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000468:	2000      	movs	r0, #0
 800046a:	f7ff ff9d 	bl	80003a8 <_Z41__static_initialization_and_destruction_0ii>
 800046e:	bd08      	pop	{r3, pc}

08000470 <eh_Init>:
  * @retval None
  */
void eh_Init(void)
{
    ehMcuErrorCode = MCU_NO_ERROR;
}
 8000470:	4770      	bx	lr

08000472 <eh_SetMcuError>:
  __ASM volatile ("cpsid i" : : : "memory");
 8000472:	b672      	cpsid	i

    /* Stop interrupts */
    __disable_irq();

    /* Stop code execution */
    while (1)
 8000474:	e7fe      	b.n	8000474 <eh_SetMcuError+0x2>

08000476 <DO_Clear>:
  * @retval none.
  */
void DO_Clear(E_DO_PIN_LIST digitalOutput)
{
    /* Select digital output to be controlled */
    switch (digitalOutput)
 8000476:	b100      	cbz	r0, 800047a <DO_Clear+0x4>
 8000478:	4770      	bx	lr
{
 800047a:	b508      	push	{r3, lr}
    {
        /* Green LED */
        case LED_GREEN:
            HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000482:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000486:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 800048a:	f000 fb35 	bl	8000af8 <HAL_GPIO_WritePin>

        default:
            /* TODO: Set an error */
            break;
    }
}
 800048e:	bd08      	pop	{r3, pc}

08000490 <_ZL30do_DigitalOutputs_DefaultStatev>:
/**
  * @brief PRIVATE FUNCTION: Set default state for digital outputs
  * @retval none.
  */
static void do_DigitalOutputs_DefaultState(void)
{
 8000490:	b508      	push	{r3, lr}
    /* Green LED output */
    DO_Clear(LED_GREEN);
 8000492:	2000      	movs	r0, #0
 8000494:	f7ff ffef 	bl	8000476 <DO_Clear>
}
 8000498:	bd08      	pop	{r3, pc}
	...

0800049c <DO_Init>:
{
 800049c:	b500      	push	{lr}
 800049e:	b089      	sub	sp, #36	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a0:	4b16      	ldr	r3, [pc, #88]	; (80004fc <DO_Init+0x60>)
 80004a2:	699a      	ldr	r2, [r3, #24]
 80004a4:	f042 0210 	orr.w	r2, r2, #16
 80004a8:	619a      	str	r2, [r3, #24]
 80004aa:	699a      	ldr	r2, [r3, #24]
 80004ac:	f002 0210 	and.w	r2, r2, #16
 80004b0:	9201      	str	r2, [sp, #4]
 80004b2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80004b4:	699a      	ldr	r2, [r3, #24]
 80004b6:	f042 0220 	orr.w	r2, r2, #32
 80004ba:	619a      	str	r2, [r3, #24]
 80004bc:	699a      	ldr	r2, [r3, #24]
 80004be:	f002 0220 	and.w	r2, r2, #32
 80004c2:	9202      	str	r2, [sp, #8]
 80004c4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c6:	699a      	ldr	r2, [r3, #24]
 80004c8:	f042 0204 	orr.w	r2, r2, #4
 80004cc:	619a      	str	r2, [r3, #24]
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0304 	and.w	r3, r3, #4
 80004d4:	9303      	str	r3, [sp, #12]
 80004d6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = LED_GREEN_PIN;
 80004d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004dc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004de:	2301      	movs	r3, #1
 80004e0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e2:	2300      	movs	r3, #0
 80004e4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e6:	2302      	movs	r3, #2
 80004e8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(LED_GREEN_PORT, &GPIO_InitStruct);
 80004ea:	a904      	add	r1, sp, #16
 80004ec:	4804      	ldr	r0, [pc, #16]	; (8000500 <DO_Init+0x64>)
 80004ee:	f000 f9f3 	bl	80008d8 <HAL_GPIO_Init>
    do_DigitalOutputs_DefaultState();
 80004f2:	f7ff ffcd 	bl	8000490 <_ZL30do_DigitalOutputs_DefaultStatev>
}
 80004f6:	b009      	add	sp, #36	; 0x24
 80004f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80004fc:	40021000 	.word	0x40021000
 8000500:	40011000 	.word	0x40011000

08000504 <DO_Toggle>:
    switch (digitalOutput)
 8000504:	b100      	cbz	r0, 8000508 <DO_Toggle+0x4>
 8000506:	4770      	bx	lr
{
 8000508:	b508      	push	{r3, lr}
            HAL_GPIO_TogglePin(LED_GREEN_PORT, LED_GREEN_PIN);
 800050a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800050e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000512:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 8000516:	f000 faf5 	bl	8000b04 <HAL_GPIO_TogglePin>
}
 800051a:	bd08      	pop	{r3, pc}

0800051c <cfgUART1_Init>:
  * @brief UART1 Initialization Function
  * @param None
  * @retval None
  */
static void cfgUART1_Init(void)
{
 800051c:	b508      	push	{r3, lr}
    huart1.Instance = USART1;
 800051e:	480b      	ldr	r0, [pc, #44]	; (800054c <cfgUART1_Init+0x30>)
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <cfgUART1_Init+0x34>)
 8000522:	6003      	str	r3, [r0, #0]
    huart1.Init.BaudRate = 115200;
 8000524:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000528:	6043      	str	r3, [r0, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800052a:	2300      	movs	r3, #0
 800052c:	6083      	str	r3, [r0, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 800052e:	60c3      	str	r3, [r0, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000530:	6103      	str	r3, [r0, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000532:	220c      	movs	r2, #12
 8000534:	6142      	str	r2, [r0, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000536:	6183      	str	r3, [r0, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000538:	61c3      	str	r3, [r0, #28]

    if (HAL_UART_Init(&huart1) != HAL_OK)
 800053a:	f001 faa6 	bl	8001a8a <HAL_UART_Init>
 800053e:	b900      	cbnz	r0, 8000542 <cfgUART1_Init+0x26>
    {
        eh_SetMcuError(MCU_ERR_CODE_100);
    }
}
 8000540:	bd08      	pop	{r3, pc}
        eh_SetMcuError(MCU_ERR_CODE_100);
 8000542:	2064      	movs	r0, #100	; 0x64
 8000544:	f7ff ff95 	bl	8000472 <eh_SetMcuError>
}
 8000548:	e7fa      	b.n	8000540 <cfgUART1_Init+0x24>
 800054a:	bf00      	nop
 800054c:	200003c0 	.word	0x200003c0
 8000550:	40013800 	.word	0x40013800

08000554 <cfgUART2_Init>:
  * @brief UART2 Initialization Function
  * @param None
  * @retval None
  */
static void cfgUART2_Init(void)
{
 8000554:	b508      	push	{r3, lr}
    huart2.Instance = USART2;
 8000556:	480b      	ldr	r0, [pc, #44]	; (8000584 <cfgUART2_Init+0x30>)
 8000558:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <cfgUART2_Init+0x34>)
 800055a:	6003      	str	r3, [r0, #0]
    huart2.Init.BaudRate = 115200;
 800055c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000560:	6043      	str	r3, [r0, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000562:	2300      	movs	r3, #0
 8000564:	6083      	str	r3, [r0, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000566:	60c3      	str	r3, [r0, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000568:	6103      	str	r3, [r0, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 800056a:	220c      	movs	r2, #12
 800056c:	6142      	str	r2, [r0, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800056e:	6183      	str	r3, [r0, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000570:	61c3      	str	r3, [r0, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8000572:	f001 fa8a 	bl	8001a8a <HAL_UART_Init>
 8000576:	b900      	cbnz	r0, 800057a <cfgUART2_Init+0x26>
    {
        eh_SetMcuError(MCU_ERR_CODE_101);
    }
}
 8000578:	bd08      	pop	{r3, pc}
        eh_SetMcuError(MCU_ERR_CODE_101);
 800057a:	2065      	movs	r0, #101	; 0x65
 800057c:	f7ff ff79 	bl	8000472 <eh_SetMcuError>
}
 8000580:	e7fa      	b.n	8000578 <cfgUART2_Init+0x24>
 8000582:	bf00      	nop
 8000584:	20000404 	.word	0x20000404
 8000588:	40004400 	.word	0x40004400

0800058c <cfgUART_Init>:
{
 800058c:	b508      	push	{r3, lr}
    cfgUART1_Init();
 800058e:	f7ff ffc5 	bl	800051c <cfgUART1_Init>
    cfgUART2_Init();
 8000592:	f7ff ffdf 	bl	8000554 <cfgUART2_Init>
}
 8000596:	bd08      	pop	{r3, pc}

08000598 <Error_Handler>:
 8000598:	b672      	cpsid	i
  */
void Error_Handler(void)
{
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800059a:	e7fe      	b.n	800059a <Error_Handler+0x2>

0800059c <_ZL18SystemClock_Configv>:
{
 800059c:	b500      	push	{lr}
 800059e:	b091      	sub	sp, #68	; 0x44
    RCC_OscInitTypeDef RCC_OscInitStruct = {0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u};
 80005a0:	2300      	movs	r3, #0
 80005a2:	9309      	str	r3, [sp, #36]	; 0x24
 80005a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80005a6:	930c      	str	r3, [sp, #48]	; 0x30
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0u, 0u, 0u, 0u, 0u};
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	9302      	str	r3, [sp, #8]
 80005ac:	9303      	str	r3, [sp, #12]
 80005ae:	9304      	str	r3, [sp, #16]
 80005b0:	9305      	str	r3, [sp, #20]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b2:	2101      	movs	r1, #1
 80005b4:	9106      	str	r1, [sp, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005ba:	9207      	str	r2, [sp, #28]
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005bc:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005be:	910a      	str	r1, [sp, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c0:	2302      	movs	r3, #2
 80005c2:	930d      	str	r3, [sp, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c4:	920e      	str	r2, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80005c6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80005ca:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005cc:	a806      	add	r0, sp, #24
 80005ce:	f000 fac7 	bl	8000b60 <HAL_RCC_OscConfig>
 80005d2:	b988      	cbnz	r0, 80005f8 <_ZL18SystemClock_Configv+0x5c>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	9301      	str	r3, [sp, #4]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d8:	2302      	movs	r3, #2
 80005da:	9302      	str	r3, [sp, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	9303      	str	r3, [sp, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e0:	9304      	str	r3, [sp, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e2:	9305      	str	r3, [sp, #20]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005e4:	2101      	movs	r1, #1
 80005e6:	a801      	add	r0, sp, #4
 80005e8:	f000 fcfe 	bl	8000fe8 <HAL_RCC_ClockConfig>
 80005ec:	b930      	cbnz	r0, 80005fc <_ZL18SystemClock_Configv+0x60>
    HAL_RCC_EnableCSS();
 80005ee:	f000 fcbf 	bl	8000f70 <HAL_RCC_EnableCSS>
}
 80005f2:	b011      	add	sp, #68	; 0x44
 80005f4:	f85d fb04 	ldr.w	pc, [sp], #4
      Error_Handler();
 80005f8:	f7ff ffce 	bl	8000598 <Error_Handler>
      Error_Handler();
 80005fc:	f7ff ffcc 	bl	8000598 <Error_Handler>

08000600 <main>:
{
 8000600:	b508      	push	{r3, lr}
  SystemClock_Config();
 8000602:	f7ff ffcb 	bl	800059c <_ZL18SystemClock_Configv>
  tsl_Init();
 8000606:	f7ff fe97 	bl	8000338 <tsl_Init>
    tsl_SchedulerRun();
 800060a:	f7ff fea3 	bl	8000354 <tsl_SchedulerRun>
  while (1)
 800060e:	e7fc      	b.n	800060a <main+0xa>

08000610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000610:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000612:	f000 fde5 	bl	80011e0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000616:	e7fe      	b.n	8000616 <NMI_Handler+0x6>

08000618 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000618:	e7fe      	b.n	8000618 <HardFault_Handler>

0800061a <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800061a:	e7fe      	b.n	800061a <MemManage_Handler>

0800061c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800061c:	e7fe      	b.n	800061c <BusFault_Handler>

0800061e <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800061e:	e7fe      	b.n	800061e <UsageFault_Handler>

08000620 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000620:	4770      	bx	lr

08000622 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000622:	4770      	bx	lr

08000624 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000624:	4770      	bx	lr

08000626 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000626:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000628:	f000 f85e 	bl	80006e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800062c:	bd08      	pop	{r3, pc}

0800062e <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800062e:	2001      	movs	r0, #1
 8000630:	4770      	bx	lr

08000632 <_kill>:

int _kill(int pid, int sig)
{
 8000632:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000634:	f003 f9be 	bl	80039b4 <__errno>
 8000638:	2316      	movs	r3, #22
 800063a:	6003      	str	r3, [r0, #0]
	return -1;
}
 800063c:	f04f 30ff 	mov.w	r0, #4294967295
 8000640:	bd08      	pop	{r3, pc}

08000642 <_exit>:

void _exit (int status)
{
 8000642:	b508      	push	{r3, lr}
	_kill(status, -1);
 8000644:	f04f 31ff 	mov.w	r1, #4294967295
 8000648:	f7ff fff3 	bl	8000632 <_kill>
	while (1) {}		/* Make sure we hang here */
 800064c:	e7fe      	b.n	800064c <_exit+0xa>

0800064e <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800064e:	4770      	bx	lr

08000650 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000650:	480c      	ldr	r0, [pc, #48]	; (8000684 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000652:	490d      	ldr	r1, [pc, #52]	; (8000688 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000654:	4a0d      	ldr	r2, [pc, #52]	; (800068c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000658:	e002      	b.n	8000660 <LoopCopyDataInit>

0800065a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800065c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800065e:	3304      	adds	r3, #4

08000660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000664:	d3f9      	bcc.n	800065a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000666:	4a0a      	ldr	r2, [pc, #40]	; (8000690 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000668:	4c0a      	ldr	r4, [pc, #40]	; (8000694 <LoopFillZerobss+0x22>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800066c:	e001      	b.n	8000672 <LoopFillZerobss>

0800066e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800066e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000670:	3204      	adds	r2, #4

08000672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000674:	d3fb      	bcc.n	800066e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000676:	f7ff ffea 	bl	800064e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800067a:	f003 f9a1 	bl	80039c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800067e:	f7ff ffbf 	bl	8000600 <main>
  bx lr
 8000682:	4770      	bx	lr
  ldr r0, =_sdata
 8000684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000688:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800068c:	08003dd8 	.word	0x08003dd8
  ldr r2, =_sbss
 8000690:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000694:	20000450 	.word	0x20000450

08000698 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000698:	e7fe      	b.n	8000698 <ADC1_2_IRQHandler>
	...

0800069c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800069c:	b510      	push	{r4, lr}
 800069e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006a0:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <HAL_InitTick+0x40>)
 80006a2:	7818      	ldrb	r0, [r3, #0]
 80006a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a8:	fbb3 f3f0 	udiv	r3, r3, r0
 80006ac:	4a0c      	ldr	r2, [pc, #48]	; (80006e0 <HAL_InitTick+0x44>)
 80006ae:	6810      	ldr	r0, [r2, #0]
 80006b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80006b4:	f000 f87e 	bl	80007b4 <HAL_SYSTICK_Config>
 80006b8:	b968      	cbnz	r0, 80006d6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ba:	2c0f      	cmp	r4, #15
 80006bc:	d901      	bls.n	80006c2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80006be:	2001      	movs	r0, #1
 80006c0:	e00a      	b.n	80006d8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c2:	2200      	movs	r2, #0
 80006c4:	4621      	mov	r1, r4
 80006c6:	f04f 30ff 	mov.w	r0, #4294967295
 80006ca:	f000 f81f 	bl	800070c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006ce:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <HAL_InitTick+0x48>)
 80006d0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80006d2:	2000      	movs	r0, #0
 80006d4:	e000      	b.n	80006d8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80006d6:	2001      	movs	r0, #1
}
 80006d8:	bd10      	pop	{r4, pc}
 80006da:	bf00      	nop
 80006dc:	20000004 	.word	0x20000004
 80006e0:	20000000 	.word	0x20000000
 80006e4:	20000008 	.word	0x20000008

080006e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006e8:	4a03      	ldr	r2, [pc, #12]	; (80006f8 <HAL_IncTick+0x10>)
 80006ea:	6811      	ldr	r1, [r2, #0]
 80006ec:	4b03      	ldr	r3, [pc, #12]	; (80006fc <HAL_IncTick+0x14>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	440b      	add	r3, r1
 80006f2:	6013      	str	r3, [r2, #0]
}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	20000448 	.word	0x20000448
 80006fc:	20000004 	.word	0x20000004

08000700 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000700:	4b01      	ldr	r3, [pc, #4]	; (8000708 <HAL_GetTick+0x8>)
 8000702:	6818      	ldr	r0, [r3, #0]
}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	20000448 	.word	0x20000448

0800070c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800070c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800070e:	4b17      	ldr	r3, [pc, #92]	; (800076c <HAL_NVIC_SetPriority+0x60>)
 8000710:	68db      	ldr	r3, [r3, #12]
 8000712:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000716:	f1c3 0407 	rsb	r4, r3, #7
 800071a:	2c04      	cmp	r4, #4
 800071c:	bf28      	it	cs
 800071e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000720:	1d1d      	adds	r5, r3, #4
 8000722:	2d06      	cmp	r5, #6
 8000724:	d918      	bls.n	8000758 <HAL_NVIC_SetPriority+0x4c>
 8000726:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	f04f 35ff 	mov.w	r5, #4294967295
 800072c:	fa05 f404 	lsl.w	r4, r5, r4
 8000730:	ea21 0104 	bic.w	r1, r1, r4
 8000734:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000736:	fa05 f303 	lsl.w	r3, r5, r3
 800073a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000740:	2800      	cmp	r0, #0
 8000742:	db0b      	blt.n	800075c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000744:	0109      	lsls	r1, r1, #4
 8000746:	b2c9      	uxtb	r1, r1
 8000748:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800074c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000750:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000754:	bc30      	pop	{r4, r5}
 8000756:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000758:	2300      	movs	r3, #0
 800075a:	e7e5      	b.n	8000728 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075c:	f000 000f 	and.w	r0, r0, #15
 8000760:	0109      	lsls	r1, r1, #4
 8000762:	b2c9      	uxtb	r1, r1
 8000764:	4b02      	ldr	r3, [pc, #8]	; (8000770 <HAL_NVIC_SetPriority+0x64>)
 8000766:	5419      	strb	r1, [r3, r0]
 8000768:	e7f4      	b.n	8000754 <HAL_NVIC_SetPriority+0x48>
 800076a:	bf00      	nop
 800076c:	e000ed00 	.word	0xe000ed00
 8000770:	e000ed14 	.word	0xe000ed14

08000774 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000774:	2800      	cmp	r0, #0
 8000776:	db07      	blt.n	8000788 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000778:	f000 021f 	and.w	r2, r0, #31
 800077c:	0940      	lsrs	r0, r0, #5
 800077e:	2301      	movs	r3, #1
 8000780:	4093      	lsls	r3, r2
 8000782:	4a02      	ldr	r2, [pc, #8]	; (800078c <HAL_NVIC_EnableIRQ+0x18>)
 8000784:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	e000e100 	.word	0xe000e100

08000790 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000790:	2800      	cmp	r0, #0
 8000792:	db0c      	blt.n	80007ae <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000794:	f000 021f 	and.w	r2, r0, #31
 8000798:	0940      	lsrs	r0, r0, #5
 800079a:	2301      	movs	r3, #1
 800079c:	4093      	lsls	r3, r2
 800079e:	3020      	adds	r0, #32
 80007a0:	4a03      	ldr	r2, [pc, #12]	; (80007b0 <HAL_NVIC_DisableIRQ+0x20>)
 80007a2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007aa:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80007ae:	4770      	bx	lr
 80007b0:	e000e100 	.word	0xe000e100

080007b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007b4:	3801      	subs	r0, #1
 80007b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80007ba:	d20a      	bcs.n	80007d2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_SYSTICK_Config+0x24>)
 80007be:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c0:	4a06      	ldr	r2, [pc, #24]	; (80007dc <HAL_SYSTICK_Config+0x28>)
 80007c2:	21f0      	movs	r1, #240	; 0xf0
 80007c4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c8:	2000      	movs	r0, #0
 80007ca:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007cc:	2207      	movs	r2, #7
 80007ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007d0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80007d2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000e010 	.word	0xe000e010
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80007e0:	2800      	cmp	r0, #0
 80007e2:	db08      	blt.n	80007f6 <HAL_NVIC_ClearPendingIRQ+0x16>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007e4:	f000 021f 	and.w	r2, r0, #31
 80007e8:	0940      	lsrs	r0, r0, #5
 80007ea:	2301      	movs	r3, #1
 80007ec:	4093      	lsls	r3, r2
 80007ee:	3060      	adds	r0, #96	; 0x60
 80007f0:	4a01      	ldr	r2, [pc, #4]	; (80007f8 <HAL_NVIC_ClearPendingIRQ+0x18>)
 80007f2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 80007f6:	4770      	bx	lr
 80007f8:	e000e100 	.word	0xe000e100

080007fc <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80007fc:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000800:	2b02      	cmp	r3, #2
 8000802:	d006      	beq.n	8000812 <HAL_DMA_Abort+0x16>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000804:	2304      	movs	r3, #4
 8000806:	6383      	str	r3, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000808:	2300      	movs	r3, #0
 800080a:	f880 3020 	strb.w	r3, [r0, #32]
    
    return HAL_ERROR;
 800080e:	2001      	movs	r0, #1
 8000810:	4770      	bx	lr
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000812:	6802      	ldr	r2, [r0, #0]
 8000814:	6813      	ldr	r3, [r2, #0]
 8000816:	f023 030e 	bic.w	r3, r3, #14
 800081a:	6013      	str	r3, [r2, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800081c:	6802      	ldr	r2, [r0, #0]
 800081e:	6813      	ldr	r3, [r2, #0]
 8000820:	f023 0301 	bic.w	r3, r3, #1
 8000824:	6013      	str	r3, [r2, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000826:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000828:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800082a:	2201      	movs	r2, #1
 800082c:	fa02 f303 	lsl.w	r3, r2, r3
 8000830:	604b      	str	r3, [r1, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000832:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000836:	2300      	movs	r3, #0
 8000838:	f880 3020 	strb.w	r3, [r0, #32]
  
  return status; 
 800083c:	4618      	mov	r0, r3
}
 800083e:	4770      	bx	lr

08000840 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000840:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000842:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000846:	2b02      	cmp	r3, #2
 8000848:	d003      	beq.n	8000852 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800084a:	2304      	movs	r3, #4
 800084c:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800084e:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8000850:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000852:	6802      	ldr	r2, [r0, #0]
 8000854:	6813      	ldr	r3, [r2, #0]
 8000856:	f023 030e 	bic.w	r3, r3, #14
 800085a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800085c:	6802      	ldr	r2, [r0, #0]
 800085e:	6813      	ldr	r3, [r2, #0]
 8000860:	f023 0301 	bic.w	r3, r3, #1
 8000864:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000866:	6803      	ldr	r3, [r0, #0]
 8000868:	4a19      	ldr	r2, [pc, #100]	; (80008d0 <HAL_DMA_Abort_IT+0x90>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d014      	beq.n	8000898 <HAL_DMA_Abort_IT+0x58>
 800086e:	3214      	adds	r2, #20
 8000870:	4293      	cmp	r3, r2
 8000872:	d01f      	beq.n	80008b4 <HAL_DMA_Abort_IT+0x74>
 8000874:	3214      	adds	r2, #20
 8000876:	4293      	cmp	r3, r2
 8000878:	d01e      	beq.n	80008b8 <HAL_DMA_Abort_IT+0x78>
 800087a:	3214      	adds	r2, #20
 800087c:	4293      	cmp	r3, r2
 800087e:	d01e      	beq.n	80008be <HAL_DMA_Abort_IT+0x7e>
 8000880:	3214      	adds	r2, #20
 8000882:	4293      	cmp	r3, r2
 8000884:	d01e      	beq.n	80008c4 <HAL_DMA_Abort_IT+0x84>
 8000886:	3214      	adds	r2, #20
 8000888:	4293      	cmp	r3, r2
 800088a:	d002      	beq.n	8000892 <HAL_DMA_Abort_IT+0x52>
 800088c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000890:	e003      	b.n	800089a <HAL_DMA_Abort_IT+0x5a>
 8000892:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000896:	e000      	b.n	800089a <HAL_DMA_Abort_IT+0x5a>
 8000898:	2201      	movs	r2, #1
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <HAL_DMA_Abort_IT+0x94>)
 800089c:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800089e:	2301      	movs	r3, #1
 80008a0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80008a4:	2300      	movs	r3, #0
 80008a6:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80008aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80008ac:	b16b      	cbz	r3, 80008ca <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 80008ae:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80008b0:	2000      	movs	r0, #0
 80008b2:	e7cd      	b.n	8000850 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80008b4:	2210      	movs	r2, #16
 80008b6:	e7f0      	b.n	800089a <HAL_DMA_Abort_IT+0x5a>
 80008b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008bc:	e7ed      	b.n	800089a <HAL_DMA_Abort_IT+0x5a>
 80008be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008c2:	e7ea      	b.n	800089a <HAL_DMA_Abort_IT+0x5a>
 80008c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008c8:	e7e7      	b.n	800089a <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 80008ca:	2000      	movs	r0, #0
 80008cc:	e7c0      	b.n	8000850 <HAL_DMA_Abort_IT+0x10>
 80008ce:	bf00      	nop
 80008d0:	40020008 	.word	0x40020008
 80008d4:	40020000 	.word	0x40020000

080008d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008d8:	b4f0      	push	{r4, r5, r6, r7}
 80008da:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008dc:	2500      	movs	r5, #0
  uint32_t position = 0x00u;
 80008de:	462c      	mov	r4, r5
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008e0:	e0a3      	b.n	8000a2a <HAL_GPIO_Init+0x152>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008e2:	4f7f      	ldr	r7, [pc, #508]	; (8000ae0 <HAL_GPIO_Init+0x208>)
 80008e4:	42bb      	cmp	r3, r7
 80008e6:	d010      	beq.n	800090a <HAL_GPIO_Init+0x32>
 80008e8:	d907      	bls.n	80008fa <HAL_GPIO_Init+0x22>
 80008ea:	4f7e      	ldr	r7, [pc, #504]	; (8000ae4 <HAL_GPIO_Init+0x20c>)
 80008ec:	42bb      	cmp	r3, r7
 80008ee:	d00c      	beq.n	800090a <HAL_GPIO_Init+0x32>
 80008f0:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80008f4:	42bb      	cmp	r3, r7
 80008f6:	d008      	beq.n	800090a <HAL_GPIO_Init+0x32>
 80008f8:	e013      	b.n	8000922 <HAL_GPIO_Init+0x4a>
 80008fa:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80008fe:	42bb      	cmp	r3, r7
 8000900:	d003      	beq.n	800090a <HAL_GPIO_Init+0x32>
 8000902:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 8000906:	42bb      	cmp	r3, r7
 8000908:	d107      	bne.n	800091a <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800090a:	688b      	ldr	r3, [r1, #8]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d058      	beq.n	80009c2 <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000910:	2b01      	cmp	r3, #1
 8000912:	d051      	beq.n	80009b8 <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8000914:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000916:	2508      	movs	r5, #8
 8000918:	e003      	b.n	8000922 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 800091a:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 800091e:	42bb      	cmp	r3, r7
 8000920:	d0f3      	beq.n	800090a <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000922:	2eff      	cmp	r6, #255	; 0xff
 8000924:	d84f      	bhi.n	80009c6 <HAL_GPIO_Init+0xee>
 8000926:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000928:	2eff      	cmp	r6, #255	; 0xff
 800092a:	d84f      	bhi.n	80009cc <HAL_GPIO_Init+0xf4>
 800092c:	00a2      	lsls	r2, r4, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800092e:	f8dc 3000 	ldr.w	r3, [ip]
 8000932:	270f      	movs	r7, #15
 8000934:	4097      	lsls	r7, r2
 8000936:	ea23 0307 	bic.w	r3, r3, r7
 800093a:	fa05 f202 	lsl.w	r2, r5, r2
 800093e:	4313      	orrs	r3, r2
 8000940:	f8cc 3000 	str.w	r3, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000944:	684b      	ldr	r3, [r1, #4]
 8000946:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800094a:	d06d      	beq.n	8000a28 <HAL_GPIO_Init+0x150>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800094c:	4b66      	ldr	r3, [pc, #408]	; (8000ae8 <HAL_GPIO_Init+0x210>)
 800094e:	699a      	ldr	r2, [r3, #24]
 8000950:	f042 0201 	orr.w	r2, r2, #1
 8000954:	619a      	str	r2, [r3, #24]
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	9301      	str	r3, [sp, #4]
 800095e:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000960:	08a2      	lsrs	r2, r4, #2
 8000962:	1c97      	adds	r7, r2, #2
 8000964:	4b61      	ldr	r3, [pc, #388]	; (8000aec <HAL_GPIO_Init+0x214>)
 8000966:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800096a:	f004 0703 	and.w	r7, r4, #3
 800096e:	00bf      	lsls	r7, r7, #2
 8000970:	f04f 0c0f 	mov.w	ip, #15
 8000974:	fa0c fc07 	lsl.w	ip, ip, r7
 8000978:	ea23 0c0c 	bic.w	ip, r3, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800097c:	4b5c      	ldr	r3, [pc, #368]	; (8000af0 <HAL_GPIO_Init+0x218>)
 800097e:	4298      	cmp	r0, r3
 8000980:	d02a      	beq.n	80009d8 <HAL_GPIO_Init+0x100>
 8000982:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000986:	4298      	cmp	r0, r3
 8000988:	f000 808a 	beq.w	8000aa0 <HAL_GPIO_Init+0x1c8>
 800098c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000990:	4298      	cmp	r0, r3
 8000992:	f000 8087 	beq.w	8000aa4 <HAL_GPIO_Init+0x1cc>
 8000996:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800099a:	4298      	cmp	r0, r3
 800099c:	d01a      	beq.n	80009d4 <HAL_GPIO_Init+0xfc>
 800099e:	2304      	movs	r3, #4
 80009a0:	e01b      	b.n	80009da <HAL_GPIO_Init+0x102>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009a2:	68cd      	ldr	r5, [r1, #12]
          break;
 80009a4:	e7bd      	b.n	8000922 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009a6:	68cd      	ldr	r5, [r1, #12]
 80009a8:	3504      	adds	r5, #4
          break;
 80009aa:	e7ba      	b.n	8000922 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009ac:	68cd      	ldr	r5, [r1, #12]
 80009ae:	3508      	adds	r5, #8
          break;
 80009b0:	e7b7      	b.n	8000922 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009b2:	68cd      	ldr	r5, [r1, #12]
 80009b4:	350c      	adds	r5, #12
          break;
 80009b6:	e7b4      	b.n	8000922 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 80009b8:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009ba:	2508      	movs	r5, #8
 80009bc:	e7b1      	b.n	8000922 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009be:	2500      	movs	r5, #0
 80009c0:	e7af      	b.n	8000922 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009c2:	2504      	movs	r5, #4
 80009c4:	e7ad      	b.n	8000922 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009c6:	f100 0c04 	add.w	ip, r0, #4
 80009ca:	e7ad      	b.n	8000928 <HAL_GPIO_Init+0x50>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009cc:	f1a4 0208 	sub.w	r2, r4, #8
 80009d0:	0092      	lsls	r2, r2, #2
 80009d2:	e7ac      	b.n	800092e <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009d4:	2303      	movs	r3, #3
 80009d6:	e000      	b.n	80009da <HAL_GPIO_Init+0x102>
 80009d8:	2300      	movs	r3, #0
 80009da:	40bb      	lsls	r3, r7
 80009dc:	ea43 030c 	orr.w	r3, r3, ip
        AFIO->EXTICR[position >> 2u] = temp;
 80009e0:	3202      	adds	r2, #2
 80009e2:	4f42      	ldr	r7, [pc, #264]	; (8000aec <HAL_GPIO_Init+0x214>)
 80009e4:	f847 3022 	str.w	r3, [r7, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009e8:	684b      	ldr	r3, [r1, #4]
 80009ea:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80009ee:	d05b      	beq.n	8000aa8 <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80009f0:	4a40      	ldr	r2, [pc, #256]	; (8000af4 <HAL_GPIO_Init+0x21c>)
 80009f2:	6813      	ldr	r3, [r2, #0]
 80009f4:	4333      	orrs	r3, r6
 80009f6:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009f8:	684b      	ldr	r3, [r1, #4]
 80009fa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80009fe:	d059      	beq.n	8000ab4 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a00:	4a3c      	ldr	r2, [pc, #240]	; (8000af4 <HAL_GPIO_Init+0x21c>)
 8000a02:	6853      	ldr	r3, [r2, #4]
 8000a04:	4333      	orrs	r3, r6
 8000a06:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a08:	684b      	ldr	r3, [r1, #4]
 8000a0a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000a0e:	d057      	beq.n	8000ac0 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a10:	4a38      	ldr	r2, [pc, #224]	; (8000af4 <HAL_GPIO_Init+0x21c>)
 8000a12:	6893      	ldr	r3, [r2, #8]
 8000a14:	4333      	orrs	r3, r6
 8000a16:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a18:	684b      	ldr	r3, [r1, #4]
 8000a1a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8000a1e:	d055      	beq.n	8000acc <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a20:	4a34      	ldr	r2, [pc, #208]	; (8000af4 <HAL_GPIO_Init+0x21c>)
 8000a22:	68d3      	ldr	r3, [r2, #12]
 8000a24:	431e      	orrs	r6, r3
 8000a26:	60d6      	str	r6, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8000a28:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a2a:	680b      	ldr	r3, [r1, #0]
 8000a2c:	fa33 f204 	lsrs.w	r2, r3, r4
 8000a30:	d052      	beq.n	8000ad8 <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 8000a32:	2201      	movs	r2, #1
 8000a34:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a36:	ea03 0602 	and.w	r6, r3, r2
    if (iocurrent == ioposition)
 8000a3a:	ea32 0303 	bics.w	r3, r2, r3
 8000a3e:	d1f3      	bne.n	8000a28 <HAL_GPIO_Init+0x150>
      switch (GPIO_Init->Mode)
 8000a40:	684b      	ldr	r3, [r1, #4]
 8000a42:	2b12      	cmp	r3, #18
 8000a44:	f63f af4d 	bhi.w	80008e2 <HAL_GPIO_Init+0xa>
 8000a48:	2b12      	cmp	r3, #18
 8000a4a:	f63f af6a 	bhi.w	8000922 <HAL_GPIO_Init+0x4a>
 8000a4e:	a701      	add	r7, pc, #4	; (adr r7, 8000a54 <HAL_GPIO_Init+0x17c>)
 8000a50:	f857 f023 	ldr.w	pc, [r7, r3, lsl #2]
 8000a54:	0800090b 	.word	0x0800090b
 8000a58:	080009a3 	.word	0x080009a3
 8000a5c:	080009ad 	.word	0x080009ad
 8000a60:	080009bf 	.word	0x080009bf
 8000a64:	08000923 	.word	0x08000923
 8000a68:	08000923 	.word	0x08000923
 8000a6c:	08000923 	.word	0x08000923
 8000a70:	08000923 	.word	0x08000923
 8000a74:	08000923 	.word	0x08000923
 8000a78:	08000923 	.word	0x08000923
 8000a7c:	08000923 	.word	0x08000923
 8000a80:	08000923 	.word	0x08000923
 8000a84:	08000923 	.word	0x08000923
 8000a88:	08000923 	.word	0x08000923
 8000a8c:	08000923 	.word	0x08000923
 8000a90:	08000923 	.word	0x08000923
 8000a94:	08000923 	.word	0x08000923
 8000a98:	080009a7 	.word	0x080009a7
 8000a9c:	080009b3 	.word	0x080009b3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	e79a      	b.n	80009da <HAL_GPIO_Init+0x102>
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	e798      	b.n	80009da <HAL_GPIO_Init+0x102>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000aa8:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <HAL_GPIO_Init+0x21c>)
 8000aaa:	6813      	ldr	r3, [r2, #0]
 8000aac:	ea23 0306 	bic.w	r3, r3, r6
 8000ab0:	6013      	str	r3, [r2, #0]
 8000ab2:	e7a1      	b.n	80009f8 <HAL_GPIO_Init+0x120>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ab4:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <HAL_GPIO_Init+0x21c>)
 8000ab6:	6853      	ldr	r3, [r2, #4]
 8000ab8:	ea23 0306 	bic.w	r3, r3, r6
 8000abc:	6053      	str	r3, [r2, #4]
 8000abe:	e7a3      	b.n	8000a08 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ac0:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <HAL_GPIO_Init+0x21c>)
 8000ac2:	6893      	ldr	r3, [r2, #8]
 8000ac4:	ea23 0306 	bic.w	r3, r3, r6
 8000ac8:	6093      	str	r3, [r2, #8]
 8000aca:	e7a5      	b.n	8000a18 <HAL_GPIO_Init+0x140>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000acc:	4a09      	ldr	r2, [pc, #36]	; (8000af4 <HAL_GPIO_Init+0x21c>)
 8000ace:	68d3      	ldr	r3, [r2, #12]
 8000ad0:	ea23 0606 	bic.w	r6, r3, r6
 8000ad4:	60d6      	str	r6, [r2, #12]
 8000ad6:	e7a7      	b.n	8000a28 <HAL_GPIO_Init+0x150>
  }
}
 8000ad8:	b002      	add	sp, #8
 8000ada:	bcf0      	pop	{r4, r5, r6, r7}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	10220000 	.word	0x10220000
 8000ae4:	10310000 	.word	0x10310000
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40010000 	.word	0x40010000
 8000af0:	40010800 	.word	0x40010800
 8000af4:	40010400 	.word	0x40010400

08000af8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000af8:	b10a      	cbz	r2, 8000afe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000afa:	6101      	str	r1, [r0, #16]
 8000afc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000afe:	0409      	lsls	r1, r1, #16
 8000b00:	6101      	str	r1, [r0, #16]
  }
}
 8000b02:	4770      	bx	lr

08000b04 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000b04:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b06:	ea01 0203 	and.w	r2, r1, r3
 8000b0a:	ea21 0103 	bic.w	r1, r1, r3
 8000b0e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000b12:	6101      	str	r1, [r0, #16]
}
 8000b14:	4770      	bx	lr
	...

08000b18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b18:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000b1a:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000b1c:	695b      	ldr	r3, [r3, #20]
 8000b1e:	4203      	tst	r3, r0
 8000b20:	d100      	bne.n	8000b24 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8000b22:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b24:	4b02      	ldr	r3, [pc, #8]	; (8000b30 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000b26:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b28:	f002 f810 	bl	8002b4c <HAL_GPIO_EXTI_Callback>
}
 8000b2c:	e7f9      	b.n	8000b22 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000b2e:	bf00      	nop
 8000b30:	40010400 	.word	0x40010400

08000b34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000b34:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <RCC_Delay+0x24>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a08      	ldr	r2, [pc, #32]	; (8000b5c <RCC_Delay+0x28>)
 8000b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b40:	0a5b      	lsrs	r3, r3, #9
 8000b42:	fb00 f303 	mul.w	r3, r0, r3
 8000b46:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000b48:	bf00      	nop
  }
  while (Delay --);
 8000b4a:	9b01      	ldr	r3, [sp, #4]
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	9201      	str	r2, [sp, #4]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d1f9      	bne.n	8000b48 <RCC_Delay+0x14>
}
 8000b54:	b002      	add	sp, #8
 8000b56:	4770      	bx	lr
 8000b58:	20000000 	.word	0x20000000
 8000b5c:	10624dd3 	.word	0x10624dd3

08000b60 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8000b60:	2800      	cmp	r0, #0
 8000b62:	f000 81f1 	beq.w	8000f48 <HAL_RCC_OscConfig+0x3e8>
{
 8000b66:	b570      	push	{r4, r5, r6, lr}
 8000b68:	b082      	sub	sp, #8
 8000b6a:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b6c:	6803      	ldr	r3, [r0, #0]
 8000b6e:	f013 0f01 	tst.w	r3, #1
 8000b72:	d02c      	beq.n	8000bce <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b74:	4baa      	ldr	r3, [pc, #680]	; (8000e20 <HAL_RCC_OscConfig+0x2c0>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f003 030c 	and.w	r3, r3, #12
 8000b7c:	2b04      	cmp	r3, #4
 8000b7e:	d01d      	beq.n	8000bbc <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b80:	4ba7      	ldr	r3, [pc, #668]	; (8000e20 <HAL_RCC_OscConfig+0x2c0>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f003 030c 	and.w	r3, r3, #12
 8000b88:	2b08      	cmp	r3, #8
 8000b8a:	d012      	beq.n	8000bb2 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b8c:	6863      	ldr	r3, [r4, #4]
 8000b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b92:	d041      	beq.n	8000c18 <HAL_RCC_OscConfig+0xb8>
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d155      	bne.n	8000c44 <HAL_RCC_OscConfig+0xe4>
 8000b98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b9c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	e037      	b.n	8000c22 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bb2:	4b9b      	ldr	r3, [pc, #620]	; (8000e20 <HAL_RCC_OscConfig+0x2c0>)
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000bba:	d0e7      	beq.n	8000b8c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bbc:	4b98      	ldr	r3, [pc, #608]	; (8000e20 <HAL_RCC_OscConfig+0x2c0>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000bc4:	d003      	beq.n	8000bce <HAL_RCC_OscConfig+0x6e>
 8000bc6:	6863      	ldr	r3, [r4, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	f000 81bf 	beq.w	8000f4c <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bce:	6823      	ldr	r3, [r4, #0]
 8000bd0:	f013 0f02 	tst.w	r3, #2
 8000bd4:	d075      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000bd6:	4b92      	ldr	r3, [pc, #584]	; (8000e20 <HAL_RCC_OscConfig+0x2c0>)
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f013 0f0c 	tst.w	r3, #12
 8000bde:	d05f      	beq.n	8000ca0 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000be0:	4b8f      	ldr	r3, [pc, #572]	; (8000e20 <HAL_RCC_OscConfig+0x2c0>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f003 030c 	and.w	r3, r3, #12
 8000be8:	2b08      	cmp	r3, #8
 8000bea:	d054      	beq.n	8000c96 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bec:	6923      	ldr	r3, [r4, #16]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f000 8089 	beq.w	8000d06 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_ENABLE();
 8000bf4:	4b8b      	ldr	r3, [pc, #556]	; (8000e24 <HAL_RCC_OscConfig+0x2c4>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000bfa:	f7ff fd81 	bl	8000700 <HAL_GetTick>
 8000bfe:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c00:	4b87      	ldr	r3, [pc, #540]	; (8000e20 <HAL_RCC_OscConfig+0x2c0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f013 0f02 	tst.w	r3, #2
 8000c08:	d174      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c0a:	f7ff fd79 	bl	8000700 <HAL_GetTick>
 8000c0e:	1b40      	subs	r0, r0, r5
 8000c10:	2802      	cmp	r0, #2
 8000c12:	d9f5      	bls.n	8000c00 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8000c14:	2003      	movs	r0, #3
 8000c16:	e19e      	b.n	8000f56 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c18:	4a81      	ldr	r2, [pc, #516]	; (8000e20 <HAL_RCC_OscConfig+0x2c0>)
 8000c1a:	6813      	ldr	r3, [r2, #0]
 8000c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c20:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c22:	6863      	ldr	r3, [r4, #4]
 8000c24:	b343      	cbz	r3, 8000c78 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8000c26:	f7ff fd6b 	bl	8000700 <HAL_GetTick>
 8000c2a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c2c:	4b7c      	ldr	r3, [pc, #496]	; (8000e20 <HAL_RCC_OscConfig+0x2c0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000c34:	d1cb      	bne.n	8000bce <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c36:	f7ff fd63 	bl	8000700 <HAL_GetTick>
 8000c3a:	1b40      	subs	r0, r0, r5
 8000c3c:	2864      	cmp	r0, #100	; 0x64
 8000c3e:	d9f5      	bls.n	8000c2c <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8000c40:	2003      	movs	r0, #3
 8000c42:	e188      	b.n	8000f56 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c48:	d009      	beq.n	8000c5e <HAL_RCC_OscConfig+0xfe>
 8000c4a:	4b75      	ldr	r3, [pc, #468]	; (8000e20 <HAL_RCC_OscConfig+0x2c0>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	e7e1      	b.n	8000c22 <HAL_RCC_OscConfig+0xc2>
 8000c5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c62:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	e7d4      	b.n	8000c22 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000c78:	f7ff fd42 	bl	8000700 <HAL_GetTick>
 8000c7c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c7e:	4b68      	ldr	r3, [pc, #416]	; (8000e20 <HAL_RCC_OscConfig+0x2c0>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000c86:	d0a2      	beq.n	8000bce <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c88:	f7ff fd3a 	bl	8000700 <HAL_GetTick>
 8000c8c:	1b40      	subs	r0, r0, r5
 8000c8e:	2864      	cmp	r0, #100	; 0x64
 8000c90:	d9f5      	bls.n	8000c7e <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8000c92:	2003      	movs	r0, #3
 8000c94:	e15f      	b.n	8000f56 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c96:	4b62      	ldr	r3, [pc, #392]	; (8000e20 <HAL_RCC_OscConfig+0x2c0>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000c9e:	d1a5      	bne.n	8000bec <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ca0:	4b5f      	ldr	r3, [pc, #380]	; (8000e20 <HAL_RCC_OscConfig+0x2c0>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f013 0f02 	tst.w	r3, #2
 8000ca8:	d003      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x152>
 8000caa:	6923      	ldr	r3, [r4, #16]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	f040 814f 	bne.w	8000f50 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cb2:	4a5b      	ldr	r2, [pc, #364]	; (8000e20 <HAL_RCC_OscConfig+0x2c0>)
 8000cb4:	6813      	ldr	r3, [r2, #0]
 8000cb6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000cba:	6961      	ldr	r1, [r4, #20]
 8000cbc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000cc0:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cc2:	6823      	ldr	r3, [r4, #0]
 8000cc4:	f013 0f08 	tst.w	r3, #8
 8000cc8:	d032      	beq.n	8000d30 <HAL_RCC_OscConfig+0x1d0>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cca:	69a3      	ldr	r3, [r4, #24]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d045      	beq.n	8000d5c <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8000cd0:	4b55      	ldr	r3, [pc, #340]	; (8000e28 <HAL_RCC_OscConfig+0x2c8>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000cd6:	f7ff fd13 	bl	8000700 <HAL_GetTick>
 8000cda:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cdc:	4b50      	ldr	r3, [pc, #320]	; (8000e20 <HAL_RCC_OscConfig+0x2c0>)
 8000cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce0:	f013 0f02 	tst.w	r3, #2
 8000ce4:	d121      	bne.n	8000d2a <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ce6:	f7ff fd0b 	bl	8000700 <HAL_GetTick>
 8000cea:	1b40      	subs	r0, r0, r5
 8000cec:	2802      	cmp	r0, #2
 8000cee:	d9f5      	bls.n	8000cdc <HAL_RCC_OscConfig+0x17c>
          return HAL_TIMEOUT;
 8000cf0:	2003      	movs	r0, #3
 8000cf2:	e130      	b.n	8000f56 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cf4:	4a4a      	ldr	r2, [pc, #296]	; (8000e20 <HAL_RCC_OscConfig+0x2c0>)
 8000cf6:	6813      	ldr	r3, [r2, #0]
 8000cf8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000cfc:	6961      	ldr	r1, [r4, #20]
 8000cfe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d02:	6013      	str	r3, [r2, #0]
 8000d04:	e7dd      	b.n	8000cc2 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8000d06:	4b47      	ldr	r3, [pc, #284]	; (8000e24 <HAL_RCC_OscConfig+0x2c4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d0c:	f7ff fcf8 	bl	8000700 <HAL_GetTick>
 8000d10:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d12:	4b43      	ldr	r3, [pc, #268]	; (8000e20 <HAL_RCC_OscConfig+0x2c0>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f013 0f02 	tst.w	r3, #2
 8000d1a:	d0d2      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d1c:	f7ff fcf0 	bl	8000700 <HAL_GetTick>
 8000d20:	1b40      	subs	r0, r0, r5
 8000d22:	2802      	cmp	r0, #2
 8000d24:	d9f5      	bls.n	8000d12 <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8000d26:	2003      	movs	r0, #3
 8000d28:	e115      	b.n	8000f56 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f7ff ff02 	bl	8000b34 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d30:	6823      	ldr	r3, [r4, #0]
 8000d32:	f013 0f04 	tst.w	r3, #4
 8000d36:	f000 8097 	beq.w	8000e68 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d3a:	4b39      	ldr	r3, [pc, #228]	; (8000e20 <HAL_RCC_OscConfig+0x2c0>)
 8000d3c:	69db      	ldr	r3, [r3, #28]
 8000d3e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000d42:	d11d      	bne.n	8000d80 <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d44:	4b36      	ldr	r3, [pc, #216]	; (8000e20 <HAL_RCC_OscConfig+0x2c0>)
 8000d46:	69da      	ldr	r2, [r3, #28]
 8000d48:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d4c:	61da      	str	r2, [r3, #28]
 8000d4e:	69db      	ldr	r3, [r3, #28]
 8000d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d54:	9301      	str	r3, [sp, #4]
 8000d56:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000d58:	2501      	movs	r5, #1
 8000d5a:	e012      	b.n	8000d82 <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_LSI_DISABLE();
 8000d5c:	4b32      	ldr	r3, [pc, #200]	; (8000e28 <HAL_RCC_OscConfig+0x2c8>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d62:	f7ff fccd 	bl	8000700 <HAL_GetTick>
 8000d66:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d68:	4b2d      	ldr	r3, [pc, #180]	; (8000e20 <HAL_RCC_OscConfig+0x2c0>)
 8000d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6c:	f013 0f02 	tst.w	r3, #2
 8000d70:	d0de      	beq.n	8000d30 <HAL_RCC_OscConfig+0x1d0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d72:	f7ff fcc5 	bl	8000700 <HAL_GetTick>
 8000d76:	1b40      	subs	r0, r0, r5
 8000d78:	2802      	cmp	r0, #2
 8000d7a:	d9f5      	bls.n	8000d68 <HAL_RCC_OscConfig+0x208>
          return HAL_TIMEOUT;
 8000d7c:	2003      	movs	r0, #3
 8000d7e:	e0ea      	b.n	8000f56 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8000d80:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d82:	4b2a      	ldr	r3, [pc, #168]	; (8000e2c <HAL_RCC_OscConfig+0x2cc>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000d8a:	d011      	beq.n	8000db0 <HAL_RCC_OscConfig+0x250>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d8c:	68e3      	ldr	r3, [r4, #12]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d022      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x278>
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d138      	bne.n	8000e08 <HAL_RCC_OscConfig+0x2a8>
 8000d96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d9a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000d9e:	6a1a      	ldr	r2, [r3, #32]
 8000da0:	f022 0201 	bic.w	r2, r2, #1
 8000da4:	621a      	str	r2, [r3, #32]
 8000da6:	6a1a      	ldr	r2, [r3, #32]
 8000da8:	f022 0204 	bic.w	r2, r2, #4
 8000dac:	621a      	str	r2, [r3, #32]
 8000dae:	e018      	b.n	8000de2 <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000db0:	4a1e      	ldr	r2, [pc, #120]	; (8000e2c <HAL_RCC_OscConfig+0x2cc>)
 8000db2:	6813      	ldr	r3, [r2, #0]
 8000db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000dba:	f7ff fca1 	bl	8000700 <HAL_GetTick>
 8000dbe:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dc0:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <HAL_RCC_OscConfig+0x2cc>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000dc8:	d1e0      	bne.n	8000d8c <HAL_RCC_OscConfig+0x22c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dca:	f7ff fc99 	bl	8000700 <HAL_GetTick>
 8000dce:	1b80      	subs	r0, r0, r6
 8000dd0:	2864      	cmp	r0, #100	; 0x64
 8000dd2:	d9f5      	bls.n	8000dc0 <HAL_RCC_OscConfig+0x260>
          return HAL_TIMEOUT;
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	e0be      	b.n	8000f56 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dd8:	4a11      	ldr	r2, [pc, #68]	; (8000e20 <HAL_RCC_OscConfig+0x2c0>)
 8000dda:	6a13      	ldr	r3, [r2, #32]
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000de2:	68e3      	ldr	r3, [r4, #12]
 8000de4:	b373      	cbz	r3, 8000e44 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8000de6:	f7ff fc8b 	bl	8000700 <HAL_GetTick>
 8000dea:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <HAL_RCC_OscConfig+0x2c0>)
 8000dee:	6a1b      	ldr	r3, [r3, #32]
 8000df0:	f013 0f02 	tst.w	r3, #2
 8000df4:	d137      	bne.n	8000e66 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000df6:	f7ff fc83 	bl	8000700 <HAL_GetTick>
 8000dfa:	1b80      	subs	r0, r0, r6
 8000dfc:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e00:	4298      	cmp	r0, r3
 8000e02:	d9f3      	bls.n	8000dec <HAL_RCC_OscConfig+0x28c>
          return HAL_TIMEOUT;
 8000e04:	2003      	movs	r0, #3
 8000e06:	e0a6      	b.n	8000f56 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e08:	2b05      	cmp	r3, #5
 8000e0a:	d011      	beq.n	8000e30 <HAL_RCC_OscConfig+0x2d0>
 8000e0c:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <HAL_RCC_OscConfig+0x2c0>)
 8000e0e:	6a1a      	ldr	r2, [r3, #32]
 8000e10:	f022 0201 	bic.w	r2, r2, #1
 8000e14:	621a      	str	r2, [r3, #32]
 8000e16:	6a1a      	ldr	r2, [r3, #32]
 8000e18:	f022 0204 	bic.w	r2, r2, #4
 8000e1c:	621a      	str	r2, [r3, #32]
 8000e1e:	e7e0      	b.n	8000de2 <HAL_RCC_OscConfig+0x282>
 8000e20:	40021000 	.word	0x40021000
 8000e24:	42420000 	.word	0x42420000
 8000e28:	42420480 	.word	0x42420480
 8000e2c:	40007000 	.word	0x40007000
 8000e30:	4b4d      	ldr	r3, [pc, #308]	; (8000f68 <HAL_RCC_OscConfig+0x408>)
 8000e32:	6a1a      	ldr	r2, [r3, #32]
 8000e34:	f042 0204 	orr.w	r2, r2, #4
 8000e38:	621a      	str	r2, [r3, #32]
 8000e3a:	6a1a      	ldr	r2, [r3, #32]
 8000e3c:	f042 0201 	orr.w	r2, r2, #1
 8000e40:	621a      	str	r2, [r3, #32]
 8000e42:	e7ce      	b.n	8000de2 <HAL_RCC_OscConfig+0x282>
      tickstart = HAL_GetTick();
 8000e44:	f7ff fc5c 	bl	8000700 <HAL_GetTick>
 8000e48:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e4a:	4b47      	ldr	r3, [pc, #284]	; (8000f68 <HAL_RCC_OscConfig+0x408>)
 8000e4c:	6a1b      	ldr	r3, [r3, #32]
 8000e4e:	f013 0f02 	tst.w	r3, #2
 8000e52:	d008      	beq.n	8000e66 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e54:	f7ff fc54 	bl	8000700 <HAL_GetTick>
 8000e58:	1b80      	subs	r0, r0, r6
 8000e5a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e5e:	4298      	cmp	r0, r3
 8000e60:	d9f3      	bls.n	8000e4a <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8000e62:	2003      	movs	r0, #3
 8000e64:	e077      	b.n	8000f56 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8000e66:	b9e5      	cbnz	r5, 8000ea2 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e68:	69e3      	ldr	r3, [r4, #28]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d072      	beq.n	8000f54 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e6e:	4a3e      	ldr	r2, [pc, #248]	; (8000f68 <HAL_RCC_OscConfig+0x408>)
 8000e70:	6852      	ldr	r2, [r2, #4]
 8000e72:	f002 020c 	and.w	r2, r2, #12
 8000e76:	2a08      	cmp	r2, #8
 8000e78:	d056      	beq.n	8000f28 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d017      	beq.n	8000eae <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8000e7e:	4b3b      	ldr	r3, [pc, #236]	; (8000f6c <HAL_RCC_OscConfig+0x40c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e84:	f7ff fc3c 	bl	8000700 <HAL_GetTick>
 8000e88:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e8a:	4b37      	ldr	r3, [pc, #220]	; (8000f68 <HAL_RCC_OscConfig+0x408>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000e92:	d047      	beq.n	8000f24 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e94:	f7ff fc34 	bl	8000700 <HAL_GetTick>
 8000e98:	1b00      	subs	r0, r0, r4
 8000e9a:	2802      	cmp	r0, #2
 8000e9c:	d9f5      	bls.n	8000e8a <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8000e9e:	2003      	movs	r0, #3
 8000ea0:	e059      	b.n	8000f56 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ea2:	4a31      	ldr	r2, [pc, #196]	; (8000f68 <HAL_RCC_OscConfig+0x408>)
 8000ea4:	69d3      	ldr	r3, [r2, #28]
 8000ea6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	61d3      	str	r3, [r2, #28]
 8000eac:	e7dc      	b.n	8000e68 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8000eae:	4b2f      	ldr	r3, [pc, #188]	; (8000f6c <HAL_RCC_OscConfig+0x40c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000eb4:	f7ff fc24 	bl	8000700 <HAL_GetTick>
 8000eb8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eba:	4b2b      	ldr	r3, [pc, #172]	; (8000f68 <HAL_RCC_OscConfig+0x408>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000ec2:	d006      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ec4:	f7ff fc1c 	bl	8000700 <HAL_GetTick>
 8000ec8:	1b40      	subs	r0, r0, r5
 8000eca:	2802      	cmp	r0, #2
 8000ecc:	d9f5      	bls.n	8000eba <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8000ece:	2003      	movs	r0, #3
 8000ed0:	e041      	b.n	8000f56 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ed2:	6a23      	ldr	r3, [r4, #32]
 8000ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed8:	d01a      	beq.n	8000f10 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000eda:	4923      	ldr	r1, [pc, #140]	; (8000f68 <HAL_RCC_OscConfig+0x408>)
 8000edc:	684b      	ldr	r3, [r1, #4]
 8000ede:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000ee2:	6a22      	ldr	r2, [r4, #32]
 8000ee4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000ee6:	4302      	orrs	r2, r0
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8000eec:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <HAL_RCC_OscConfig+0x40c>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ef2:	f7ff fc05 	bl	8000700 <HAL_GetTick>
 8000ef6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ef8:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <HAL_RCC_OscConfig+0x408>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000f00:	d10e      	bne.n	8000f20 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f02:	f7ff fbfd 	bl	8000700 <HAL_GetTick>
 8000f06:	1b00      	subs	r0, r0, r4
 8000f08:	2802      	cmp	r0, #2
 8000f0a:	d9f5      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	e022      	b.n	8000f56 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f10:	4a15      	ldr	r2, [pc, #84]	; (8000f68 <HAL_RCC_OscConfig+0x408>)
 8000f12:	6853      	ldr	r3, [r2, #4]
 8000f14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f18:	68a1      	ldr	r1, [r4, #8]
 8000f1a:	430b      	orrs	r3, r1
 8000f1c:	6053      	str	r3, [r2, #4]
 8000f1e:	e7dc      	b.n	8000eda <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8000f20:	2000      	movs	r0, #0
 8000f22:	e018      	b.n	8000f56 <HAL_RCC_OscConfig+0x3f6>
 8000f24:	2000      	movs	r0, #0
 8000f26:	e016      	b.n	8000f56 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d016      	beq.n	8000f5a <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_RCC_OscConfig+0x408>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f30:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000f34:	6a22      	ldr	r2, [r4, #32]
 8000f36:	4291      	cmp	r1, r2
 8000f38:	d111      	bne.n	8000f5e <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000f3a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000f3e:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d10e      	bne.n	8000f62 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8000f44:	2000      	movs	r0, #0
 8000f46:	e006      	b.n	8000f56 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8000f48:	2001      	movs	r0, #1
}
 8000f4a:	4770      	bx	lr
        return HAL_ERROR;
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	e002      	b.n	8000f56 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8000f50:	2001      	movs	r0, #1
 8000f52:	e000      	b.n	8000f56 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8000f54:	2000      	movs	r0, #0
}
 8000f56:	b002      	add	sp, #8
 8000f58:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	e7fb      	b.n	8000f56 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8000f5e:	2001      	movs	r0, #1
 8000f60:	e7f9      	b.n	8000f56 <HAL_RCC_OscConfig+0x3f6>
 8000f62:	2001      	movs	r0, #1
 8000f64:	e7f7      	b.n	8000f56 <HAL_RCC_OscConfig+0x3f6>
 8000f66:	bf00      	nop
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	42420060 	.word	0x42420060

08000f70 <HAL_RCC_EnableCSS>:
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8000f70:	4b01      	ldr	r3, [pc, #4]	; (8000f78 <HAL_RCC_EnableCSS+0x8>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	601a      	str	r2, [r3, #0]
}
 8000f76:	4770      	bx	lr
 8000f78:	4242004c 	.word	0x4242004c

08000f7c <HAL_RCC_GetSysClockFreq>:
{
 8000f7c:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000f80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f82:	f10d 0c18 	add.w	ip, sp, #24
 8000f86:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000f8a:	f240 2301 	movw	r3, #513	; 0x201
 8000f8e:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8000f92:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_RCC_GetSysClockFreq+0x60>)
 8000f94:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000f96:	f003 020c 	and.w	r2, r3, #12
 8000f9a:	2a08      	cmp	r2, #8
 8000f9c:	d002      	beq.n	8000fa4 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8000f9e:	4810      	ldr	r0, [pc, #64]	; (8000fe0 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8000fa0:	b006      	add	sp, #24
 8000fa2:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000fa4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000fa8:	4462      	add	r2, ip
 8000faa:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000fae:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000fb2:	d00c      	beq.n	8000fce <HAL_RCC_GetSysClockFreq+0x52>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <HAL_RCC_GetSysClockFreq+0x60>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8000fbc:	4463      	add	r3, ip
 8000fbe:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000fc2:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <HAL_RCC_GetSysClockFreq+0x64>)
 8000fc4:	fb00 f002 	mul.w	r0, r0, r2
 8000fc8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fcc:	e7e8      	b.n	8000fa0 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <HAL_RCC_GetSysClockFreq+0x68>)
 8000fd0:	fb00 f002 	mul.w	r0, r0, r2
 8000fd4:	e7e4      	b.n	8000fa0 <HAL_RCC_GetSysClockFreq+0x24>
 8000fd6:	bf00      	nop
 8000fd8:	08003ae4 	.word	0x08003ae4
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	007a1200 	.word	0x007a1200
 8000fe4:	003d0900 	.word	0x003d0900

08000fe8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8000fe8:	2800      	cmp	r0, #0
 8000fea:	f000 80a0 	beq.w	800112e <HAL_RCC_ClockConfig+0x146>
{
 8000fee:	b570      	push	{r4, r5, r6, lr}
 8000ff0:	460d      	mov	r5, r1
 8000ff2:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000ff4:	4b52      	ldr	r3, [pc, #328]	; (8001140 <HAL_RCC_ClockConfig+0x158>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0307 	and.w	r3, r3, #7
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	d20b      	bcs.n	8001018 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001000:	4a4f      	ldr	r2, [pc, #316]	; (8001140 <HAL_RCC_ClockConfig+0x158>)
 8001002:	6813      	ldr	r3, [r2, #0]
 8001004:	f023 0307 	bic.w	r3, r3, #7
 8001008:	430b      	orrs	r3, r1
 800100a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800100c:	6813      	ldr	r3, [r2, #0]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	428b      	cmp	r3, r1
 8001014:	f040 808d 	bne.w	8001132 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001018:	6823      	ldr	r3, [r4, #0]
 800101a:	f013 0f02 	tst.w	r3, #2
 800101e:	d017      	beq.n	8001050 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001020:	f013 0f04 	tst.w	r3, #4
 8001024:	d004      	beq.n	8001030 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001026:	4a47      	ldr	r2, [pc, #284]	; (8001144 <HAL_RCC_ClockConfig+0x15c>)
 8001028:	6853      	ldr	r3, [r2, #4]
 800102a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800102e:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001030:	6823      	ldr	r3, [r4, #0]
 8001032:	f013 0f08 	tst.w	r3, #8
 8001036:	d004      	beq.n	8001042 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001038:	4a42      	ldr	r2, [pc, #264]	; (8001144 <HAL_RCC_ClockConfig+0x15c>)
 800103a:	6853      	ldr	r3, [r2, #4]
 800103c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001040:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001042:	4a40      	ldr	r2, [pc, #256]	; (8001144 <HAL_RCC_ClockConfig+0x15c>)
 8001044:	6853      	ldr	r3, [r2, #4]
 8001046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800104a:	68a1      	ldr	r1, [r4, #8]
 800104c:	430b      	orrs	r3, r1
 800104e:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001050:	6823      	ldr	r3, [r4, #0]
 8001052:	f013 0f01 	tst.w	r3, #1
 8001056:	d031      	beq.n	80010bc <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001058:	6863      	ldr	r3, [r4, #4]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d020      	beq.n	80010a0 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800105e:	2b02      	cmp	r3, #2
 8001060:	d025      	beq.n	80010ae <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001062:	4a38      	ldr	r2, [pc, #224]	; (8001144 <HAL_RCC_ClockConfig+0x15c>)
 8001064:	6812      	ldr	r2, [r2, #0]
 8001066:	f012 0f02 	tst.w	r2, #2
 800106a:	d064      	beq.n	8001136 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800106c:	4935      	ldr	r1, [pc, #212]	; (8001144 <HAL_RCC_ClockConfig+0x15c>)
 800106e:	684a      	ldr	r2, [r1, #4]
 8001070:	f022 0203 	bic.w	r2, r2, #3
 8001074:	4313      	orrs	r3, r2
 8001076:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001078:	f7ff fb42 	bl	8000700 <HAL_GetTick>
 800107c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800107e:	4b31      	ldr	r3, [pc, #196]	; (8001144 <HAL_RCC_ClockConfig+0x15c>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 030c 	and.w	r3, r3, #12
 8001086:	6862      	ldr	r2, [r4, #4]
 8001088:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800108c:	d016      	beq.n	80010bc <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800108e:	f7ff fb37 	bl	8000700 <HAL_GetTick>
 8001092:	1b80      	subs	r0, r0, r6
 8001094:	f241 3388 	movw	r3, #5000	; 0x1388
 8001098:	4298      	cmp	r0, r3
 800109a:	d9f0      	bls.n	800107e <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 800109c:	2003      	movs	r0, #3
 800109e:	e045      	b.n	800112c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a0:	4a28      	ldr	r2, [pc, #160]	; (8001144 <HAL_RCC_ClockConfig+0x15c>)
 80010a2:	6812      	ldr	r2, [r2, #0]
 80010a4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80010a8:	d1e0      	bne.n	800106c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80010aa:	2001      	movs	r0, #1
 80010ac:	e03e      	b.n	800112c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ae:	4a25      	ldr	r2, [pc, #148]	; (8001144 <HAL_RCC_ClockConfig+0x15c>)
 80010b0:	6812      	ldr	r2, [r2, #0]
 80010b2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80010b6:	d1d9      	bne.n	800106c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80010b8:	2001      	movs	r0, #1
 80010ba:	e037      	b.n	800112c <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80010bc:	4b20      	ldr	r3, [pc, #128]	; (8001140 <HAL_RCC_ClockConfig+0x158>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	42ab      	cmp	r3, r5
 80010c6:	d90a      	bls.n	80010de <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010c8:	4a1d      	ldr	r2, [pc, #116]	; (8001140 <HAL_RCC_ClockConfig+0x158>)
 80010ca:	6813      	ldr	r3, [r2, #0]
 80010cc:	f023 0307 	bic.w	r3, r3, #7
 80010d0:	432b      	orrs	r3, r5
 80010d2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010d4:	6813      	ldr	r3, [r2, #0]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	42ab      	cmp	r3, r5
 80010dc:	d12d      	bne.n	800113a <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010de:	6823      	ldr	r3, [r4, #0]
 80010e0:	f013 0f04 	tst.w	r3, #4
 80010e4:	d006      	beq.n	80010f4 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010e6:	4a17      	ldr	r2, [pc, #92]	; (8001144 <HAL_RCC_ClockConfig+0x15c>)
 80010e8:	6853      	ldr	r3, [r2, #4]
 80010ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010ee:	68e1      	ldr	r1, [r4, #12]
 80010f0:	430b      	orrs	r3, r1
 80010f2:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010f4:	6823      	ldr	r3, [r4, #0]
 80010f6:	f013 0f08 	tst.w	r3, #8
 80010fa:	d007      	beq.n	800110c <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010fc:	4a11      	ldr	r2, [pc, #68]	; (8001144 <HAL_RCC_ClockConfig+0x15c>)
 80010fe:	6853      	ldr	r3, [r2, #4]
 8001100:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001104:	6921      	ldr	r1, [r4, #16]
 8001106:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800110a:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800110c:	f7ff ff36 	bl	8000f7c <HAL_RCC_GetSysClockFreq>
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <HAL_RCC_ClockConfig+0x15c>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001118:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <HAL_RCC_ClockConfig+0x160>)
 800111a:	5cd3      	ldrb	r3, [r2, r3]
 800111c:	40d8      	lsrs	r0, r3
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <HAL_RCC_ClockConfig+0x164>)
 8001120:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <HAL_RCC_ClockConfig+0x168>)
 8001124:	6818      	ldr	r0, [r3, #0]
 8001126:	f7ff fab9 	bl	800069c <HAL_InitTick>
  return HAL_OK;
 800112a:	2000      	movs	r0, #0
}
 800112c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800112e:	2001      	movs	r0, #1
}
 8001130:	4770      	bx	lr
    return HAL_ERROR;
 8001132:	2001      	movs	r0, #1
 8001134:	e7fa      	b.n	800112c <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8001136:	2001      	movs	r0, #1
 8001138:	e7f8      	b.n	800112c <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 800113a:	2001      	movs	r0, #1
 800113c:	e7f6      	b.n	800112c <HAL_RCC_ClockConfig+0x144>
 800113e:	bf00      	nop
 8001140:	40022000 	.word	0x40022000
 8001144:	40021000 	.word	0x40021000
 8001148:	08003acc 	.word	0x08003acc
 800114c:	20000000 	.word	0x20000000
 8001150:	20000008 	.word	0x20000008

08001154 <HAL_RCC_GetHCLKFreq>:
}
 8001154:	4b01      	ldr	r3, [pc, #4]	; (800115c <HAL_RCC_GetHCLKFreq+0x8>)
 8001156:	6818      	ldr	r0, [r3, #0]
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	20000000 	.word	0x20000000

08001160 <HAL_RCC_GetPCLK1Freq>:
{
 8001160:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001162:	f7ff fff7 	bl	8001154 <HAL_RCC_GetHCLKFreq>
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800116e:	4a03      	ldr	r2, [pc, #12]	; (800117c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001170:	5cd3      	ldrb	r3, [r2, r3]
}
 8001172:	40d8      	lsrs	r0, r3
 8001174:	bd08      	pop	{r3, pc}
 8001176:	bf00      	nop
 8001178:	40021000 	.word	0x40021000
 800117c:	08003adc 	.word	0x08003adc

08001180 <HAL_RCC_GetPCLK2Freq>:
{
 8001180:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001182:	f7ff ffe7 	bl	8001154 <HAL_RCC_GetHCLKFreq>
 8001186:	4b04      	ldr	r3, [pc, #16]	; (8001198 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800118e:	4a03      	ldr	r2, [pc, #12]	; (800119c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001190:	5cd3      	ldrb	r3, [r2, r3]
}
 8001192:	40d8      	lsrs	r0, r3
 8001194:	bd08      	pop	{r3, pc}
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000
 800119c:	08003adc 	.word	0x08003adc

080011a0 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80011a0:	230f      	movs	r3, #15
 80011a2:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <HAL_RCC_GetClockConfig+0x34>)
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	f002 0203 	and.w	r2, r2, #3
 80011ac:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80011ae:	685a      	ldr	r2, [r3, #4]
 80011b0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80011b4:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80011bc:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	08db      	lsrs	r3, r3, #3
 80011c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80011c6:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <HAL_RCC_GetClockConfig+0x38>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0307 	and.w	r3, r3, #7
 80011d0:	600b      	str	r3, [r1, #0]
}
 80011d2:	4770      	bx	lr
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40022000 	.word	0x40022000

080011dc <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 80011dc:	4770      	bx	lr
	...

080011e0 <HAL_RCC_NMI_IRQHandler>:
{
 80011e0:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_RCC_NMI_IRQHandler+0x1c>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80011ea:	d100      	bne.n	80011ee <HAL_RCC_NMI_IRQHandler+0xe>
}
 80011ec:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 80011ee:	f7ff fff5 	bl	80011dc <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80011f2:	4b03      	ldr	r3, [pc, #12]	; (8001200 <HAL_RCC_NMI_IRQHandler+0x20>)
 80011f4:	2280      	movs	r2, #128	; 0x80
 80011f6:	701a      	strb	r2, [r3, #0]
}
 80011f8:	e7f8      	b.n	80011ec <HAL_RCC_NMI_IRQHandler+0xc>
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000
 8001200:	4002100a 	.word	0x4002100a

08001204 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001204:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b01      	cmp	r3, #1
 800120c:	d122      	bne.n	8001254 <HAL_TIM_Base_Start+0x50>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800120e:	2302      	movs	r3, #2
 8001210:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001214:	6803      	ldr	r3, [r0, #0]
 8001216:	4a11      	ldr	r2, [pc, #68]	; (800125c <HAL_TIM_Base_Start+0x58>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d010      	beq.n	800123e <HAL_TIM_Base_Start+0x3a>
 800121c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001220:	d00d      	beq.n	800123e <HAL_TIM_Base_Start+0x3a>
 8001222:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001226:	4293      	cmp	r3, r2
 8001228:	d009      	beq.n	800123e <HAL_TIM_Base_Start+0x3a>
 800122a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800122e:	4293      	cmp	r3, r2
 8001230:	d005      	beq.n	800123e <HAL_TIM_Base_Start+0x3a>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	f042 0201 	orr.w	r2, r2, #1
 8001238:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800123a:	2000      	movs	r0, #0
 800123c:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001244:	2a06      	cmp	r2, #6
 8001246:	d007      	beq.n	8001258 <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	f042 0201 	orr.w	r2, r2, #1
 800124e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001250:	2000      	movs	r0, #0
 8001252:	4770      	bx	lr
    return HAL_ERROR;
 8001254:	2001      	movs	r0, #1
 8001256:	4770      	bx	lr
  return HAL_OK;
 8001258:	2000      	movs	r0, #0
}
 800125a:	4770      	bx	lr
 800125c:	40012c00 	.word	0x40012c00

08001260 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001260:	4770      	bx	lr

08001262 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001262:	4770      	bx	lr

08001264 <HAL_TIM_IRQHandler>:
{
 8001264:	b510      	push	{r4, lr}
 8001266:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001268:	6803      	ldr	r3, [r0, #0]
 800126a:	691a      	ldr	r2, [r3, #16]
 800126c:	f012 0f02 	tst.w	r2, #2
 8001270:	d011      	beq.n	8001296 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001272:	68da      	ldr	r2, [r3, #12]
 8001274:	f012 0f02 	tst.w	r2, #2
 8001278:	d00d      	beq.n	8001296 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800127a:	f06f 0202 	mvn.w	r2, #2
 800127e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001280:	2301      	movs	r3, #1
 8001282:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001284:	6803      	ldr	r3, [r0, #0]
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f013 0f03 	tst.w	r3, #3
 800128c:	d070      	beq.n	8001370 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800128e:	f001 fb63 	bl	8002958 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001292:	2300      	movs	r3, #0
 8001294:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001296:	6823      	ldr	r3, [r4, #0]
 8001298:	691a      	ldr	r2, [r3, #16]
 800129a:	f012 0f04 	tst.w	r2, #4
 800129e:	d012      	beq.n	80012c6 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80012a0:	68da      	ldr	r2, [r3, #12]
 80012a2:	f012 0f04 	tst.w	r2, #4
 80012a6:	d00e      	beq.n	80012c6 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80012a8:	f06f 0204 	mvn.w	r2, #4
 80012ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80012ae:	2302      	movs	r3, #2
 80012b0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80012b2:	6823      	ldr	r3, [r4, #0]
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80012ba:	d05f      	beq.n	800137c <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80012bc:	4620      	mov	r0, r4
 80012be:	f001 fb4b 	bl	8002958 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012c2:	2300      	movs	r3, #0
 80012c4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80012c6:	6823      	ldr	r3, [r4, #0]
 80012c8:	691a      	ldr	r2, [r3, #16]
 80012ca:	f012 0f08 	tst.w	r2, #8
 80012ce:	d012      	beq.n	80012f6 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80012d0:	68da      	ldr	r2, [r3, #12]
 80012d2:	f012 0f08 	tst.w	r2, #8
 80012d6:	d00e      	beq.n	80012f6 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80012d8:	f06f 0208 	mvn.w	r2, #8
 80012dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80012de:	2304      	movs	r3, #4
 80012e0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80012e2:	6823      	ldr	r3, [r4, #0]
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	f013 0f03 	tst.w	r3, #3
 80012ea:	d04e      	beq.n	800138a <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80012ec:	4620      	mov	r0, r4
 80012ee:	f001 fb33 	bl	8002958 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012f2:	2300      	movs	r3, #0
 80012f4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80012f6:	6823      	ldr	r3, [r4, #0]
 80012f8:	691a      	ldr	r2, [r3, #16]
 80012fa:	f012 0f10 	tst.w	r2, #16
 80012fe:	d012      	beq.n	8001326 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001300:	68da      	ldr	r2, [r3, #12]
 8001302:	f012 0f10 	tst.w	r2, #16
 8001306:	d00e      	beq.n	8001326 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001308:	f06f 0210 	mvn.w	r2, #16
 800130c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800130e:	2308      	movs	r3, #8
 8001310:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001312:	6823      	ldr	r3, [r4, #0]
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	f413 7f40 	tst.w	r3, #768	; 0x300
 800131a:	d03d      	beq.n	8001398 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 800131c:	4620      	mov	r0, r4
 800131e:	f001 fb1b 	bl	8002958 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001322:	2300      	movs	r3, #0
 8001324:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001326:	6823      	ldr	r3, [r4, #0]
 8001328:	691a      	ldr	r2, [r3, #16]
 800132a:	f012 0f01 	tst.w	r2, #1
 800132e:	d003      	beq.n	8001338 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	f012 0f01 	tst.w	r2, #1
 8001336:	d136      	bne.n	80013a6 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001338:	6823      	ldr	r3, [r4, #0]
 800133a:	691a      	ldr	r2, [r3, #16]
 800133c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001340:	d003      	beq.n	800134a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001348:	d134      	bne.n	80013b4 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800134a:	6823      	ldr	r3, [r4, #0]
 800134c:	691a      	ldr	r2, [r3, #16]
 800134e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001352:	d003      	beq.n	800135c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	f012 0f40 	tst.w	r2, #64	; 0x40
 800135a:	d132      	bne.n	80013c2 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800135c:	6823      	ldr	r3, [r4, #0]
 800135e:	691a      	ldr	r2, [r3, #16]
 8001360:	f012 0f20 	tst.w	r2, #32
 8001364:	d003      	beq.n	800136e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	f012 0f20 	tst.w	r2, #32
 800136c:	d130      	bne.n	80013d0 <HAL_TIM_IRQHandler+0x16c>
}
 800136e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001370:	f001 faf6 	bl	8002960 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001374:	4620      	mov	r0, r4
 8001376:	f7ff ff73 	bl	8001260 <HAL_TIM_PWM_PulseFinishedCallback>
 800137a:	e78a      	b.n	8001292 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800137c:	4620      	mov	r0, r4
 800137e:	f001 faef 	bl	8002960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001382:	4620      	mov	r0, r4
 8001384:	f7ff ff6c 	bl	8001260 <HAL_TIM_PWM_PulseFinishedCallback>
 8001388:	e79b      	b.n	80012c2 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800138a:	4620      	mov	r0, r4
 800138c:	f001 fae8 	bl	8002960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001390:	4620      	mov	r0, r4
 8001392:	f7ff ff65 	bl	8001260 <HAL_TIM_PWM_PulseFinishedCallback>
 8001396:	e7ac      	b.n	80012f2 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001398:	4620      	mov	r0, r4
 800139a:	f001 fae1 	bl	8002960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800139e:	4620      	mov	r0, r4
 80013a0:	f7ff ff5e 	bl	8001260 <HAL_TIM_PWM_PulseFinishedCallback>
 80013a4:	e7bd      	b.n	8001322 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80013a6:	f06f 0201 	mvn.w	r2, #1
 80013aa:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80013ac:	4620      	mov	r0, r4
 80013ae:	f001 faa7 	bl	8002900 <HAL_TIM_PeriodElapsedCallback>
 80013b2:	e7c1      	b.n	8001338 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80013b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80013b8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80013ba:	4620      	mov	r0, r4
 80013bc:	f000 fad1 	bl	8001962 <HAL_TIMEx_BreakCallback>
 80013c0:	e7c3      	b.n	800134a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80013c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80013c6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80013c8:	4620      	mov	r0, r4
 80013ca:	f7ff ff4a 	bl	8001262 <HAL_TIM_TriggerCallback>
 80013ce:	e7c5      	b.n	800135c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80013d0:	f06f 0220 	mvn.w	r2, #32
 80013d4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80013d6:	4620      	mov	r0, r4
 80013d8:	f000 fac2 	bl	8001960 <HAL_TIMEx_CommutCallback>
}
 80013dc:	e7c7      	b.n	800136e <HAL_TIM_IRQHandler+0x10a>
	...

080013e0 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80013e0:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013e2:	4a1b      	ldr	r2, [pc, #108]	; (8001450 <TIM_Base_SetConfig+0x70>)
 80013e4:	4290      	cmp	r0, r2
 80013e6:	d00a      	beq.n	80013fe <TIM_Base_SetConfig+0x1e>
 80013e8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80013ec:	d007      	beq.n	80013fe <TIM_Base_SetConfig+0x1e>
 80013ee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80013f2:	4290      	cmp	r0, r2
 80013f4:	d003      	beq.n	80013fe <TIM_Base_SetConfig+0x1e>
 80013f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013fa:	4290      	cmp	r0, r2
 80013fc:	d103      	bne.n	8001406 <TIM_Base_SetConfig+0x26>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80013fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001402:	684a      	ldr	r2, [r1, #4]
 8001404:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001406:	4a12      	ldr	r2, [pc, #72]	; (8001450 <TIM_Base_SetConfig+0x70>)
 8001408:	4290      	cmp	r0, r2
 800140a:	d00a      	beq.n	8001422 <TIM_Base_SetConfig+0x42>
 800140c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001410:	d007      	beq.n	8001422 <TIM_Base_SetConfig+0x42>
 8001412:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001416:	4290      	cmp	r0, r2
 8001418:	d003      	beq.n	8001422 <TIM_Base_SetConfig+0x42>
 800141a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800141e:	4290      	cmp	r0, r2
 8001420:	d103      	bne.n	800142a <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001426:	68ca      	ldr	r2, [r1, #12]
 8001428:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800142a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800142e:	694a      	ldr	r2, [r1, #20]
 8001430:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001432:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001434:	688b      	ldr	r3, [r1, #8]
 8001436:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001438:	680b      	ldr	r3, [r1, #0]
 800143a:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800143c:	4b04      	ldr	r3, [pc, #16]	; (8001450 <TIM_Base_SetConfig+0x70>)
 800143e:	4298      	cmp	r0, r3
 8001440:	d002      	beq.n	8001448 <TIM_Base_SetConfig+0x68>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001442:	2301      	movs	r3, #1
 8001444:	6143      	str	r3, [r0, #20]
}
 8001446:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001448:	690b      	ldr	r3, [r1, #16]
 800144a:	6303      	str	r3, [r0, #48]	; 0x30
 800144c:	e7f9      	b.n	8001442 <TIM_Base_SetConfig+0x62>
 800144e:	bf00      	nop
 8001450:	40012c00 	.word	0x40012c00

08001454 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001454:	b340      	cbz	r0, 80014a8 <HAL_TIM_Base_Init+0x54>
{
 8001456:	b510      	push	{r4, lr}
 8001458:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800145a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800145e:	b1f3      	cbz	r3, 800149e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001460:	2302      	movs	r3, #2
 8001462:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001466:	4621      	mov	r1, r4
 8001468:	f851 0b04 	ldr.w	r0, [r1], #4
 800146c:	f7ff ffb8 	bl	80013e0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001470:	2301      	movs	r3, #1
 8001472:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001476:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800147a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800147e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001482:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001486:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800148a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800148e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001492:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001496:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800149a:	2000      	movs	r0, #0
}
 800149c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800149e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80014a2:	f002 f857 	bl	8003554 <HAL_TIM_Base_MspInit>
 80014a6:	e7db      	b.n	8001460 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80014a8:	2001      	movs	r0, #1
}
 80014aa:	4770      	bx	lr

080014ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80014ac:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80014ae:	f001 011f 	and.w	r1, r1, #31
 80014b2:	2301      	movs	r3, #1
 80014b4:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80014b8:	6a03      	ldr	r3, [r0, #32]
 80014ba:	ea23 0304 	bic.w	r3, r3, r4
 80014be:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80014c0:	6a03      	ldr	r3, [r0, #32]
 80014c2:	fa02 f101 	lsl.w	r1, r2, r1
 80014c6:	430b      	orrs	r3, r1
 80014c8:	6203      	str	r3, [r0, #32]
}
 80014ca:	bc10      	pop	{r4}
 80014cc:	4770      	bx	lr
	...

080014d0 <HAL_TIM_OC_Start>:
{
 80014d0:	b510      	push	{r4, lr}
 80014d2:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80014d4:	4608      	mov	r0, r1
 80014d6:	bb51      	cbnz	r1, 800152e <HAL_TIM_OC_Start+0x5e>
 80014d8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	3b01      	subs	r3, #1
 80014e0:	bf18      	it	ne
 80014e2:	2301      	movne	r3, #1
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d15b      	bne.n	80015a0 <HAL_TIM_OC_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80014e8:	2800      	cmp	r0, #0
 80014ea:	d139      	bne.n	8001560 <HAL_TIM_OC_Start+0x90>
 80014ec:	2302      	movs	r3, #2
 80014ee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80014f2:	2201      	movs	r2, #1
 80014f4:	4601      	mov	r1, r0
 80014f6:	6820      	ldr	r0, [r4, #0]
 80014f8:	f7ff ffd8 	bl	80014ac <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80014fc:	6823      	ldr	r3, [r4, #0]
 80014fe:	4a2a      	ldr	r2, [pc, #168]	; (80015a8 <HAL_TIM_OC_Start+0xd8>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d03d      	beq.n	8001580 <HAL_TIM_OC_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001504:	6823      	ldr	r3, [r4, #0]
 8001506:	4a28      	ldr	r2, [pc, #160]	; (80015a8 <HAL_TIM_OC_Start+0xd8>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d03e      	beq.n	800158a <HAL_TIM_OC_Start+0xba>
 800150c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001510:	d03b      	beq.n	800158a <HAL_TIM_OC_Start+0xba>
 8001512:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001516:	4293      	cmp	r3, r2
 8001518:	d037      	beq.n	800158a <HAL_TIM_OC_Start+0xba>
 800151a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800151e:	4293      	cmp	r3, r2
 8001520:	d033      	beq.n	800158a <HAL_TIM_OC_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	f042 0201 	orr.w	r2, r2, #1
 8001528:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800152a:	2000      	movs	r0, #0
 800152c:	e039      	b.n	80015a2 <HAL_TIM_OC_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800152e:	2904      	cmp	r1, #4
 8001530:	d008      	beq.n	8001544 <HAL_TIM_OC_Start+0x74>
 8001532:	2908      	cmp	r1, #8
 8001534:	d00d      	beq.n	8001552 <HAL_TIM_OC_Start+0x82>
 8001536:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800153a:	b2db      	uxtb	r3, r3
 800153c:	3b01      	subs	r3, #1
 800153e:	bf18      	it	ne
 8001540:	2301      	movne	r3, #1
 8001542:	e7cf      	b.n	80014e4 <HAL_TIM_OC_Start+0x14>
 8001544:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8001548:	b2db      	uxtb	r3, r3
 800154a:	3b01      	subs	r3, #1
 800154c:	bf18      	it	ne
 800154e:	2301      	movne	r3, #1
 8001550:	e7c8      	b.n	80014e4 <HAL_TIM_OC_Start+0x14>
 8001552:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8001556:	b2db      	uxtb	r3, r3
 8001558:	3b01      	subs	r3, #1
 800155a:	bf18      	it	ne
 800155c:	2301      	movne	r3, #1
 800155e:	e7c1      	b.n	80014e4 <HAL_TIM_OC_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001560:	2804      	cmp	r0, #4
 8001562:	d005      	beq.n	8001570 <HAL_TIM_OC_Start+0xa0>
 8001564:	2808      	cmp	r0, #8
 8001566:	d007      	beq.n	8001578 <HAL_TIM_OC_Start+0xa8>
 8001568:	2302      	movs	r3, #2
 800156a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800156e:	e7c0      	b.n	80014f2 <HAL_TIM_OC_Start+0x22>
 8001570:	2302      	movs	r3, #2
 8001572:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001576:	e7bc      	b.n	80014f2 <HAL_TIM_OC_Start+0x22>
 8001578:	2302      	movs	r3, #2
 800157a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800157e:	e7b8      	b.n	80014f2 <HAL_TIM_OC_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 8001580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001582:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001586:	645a      	str	r2, [r3, #68]	; 0x44
 8001588:	e7bc      	b.n	8001504 <HAL_TIM_OC_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001590:	2a06      	cmp	r2, #6
 8001592:	d007      	beq.n	80015a4 <HAL_TIM_OC_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	f042 0201 	orr.w	r2, r2, #1
 800159a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800159c:	2000      	movs	r0, #0
 800159e:	e000      	b.n	80015a2 <HAL_TIM_OC_Start+0xd2>
    return HAL_ERROR;
 80015a0:	2001      	movs	r0, #1
}
 80015a2:	bd10      	pop	{r4, pc}
  return HAL_OK;
 80015a4:	2000      	movs	r0, #0
 80015a6:	e7fc      	b.n	80015a2 <HAL_TIM_OC_Start+0xd2>
 80015a8:	40012c00 	.word	0x40012c00

080015ac <HAL_TIM_PWM_Start>:
{
 80015ac:	b510      	push	{r4, lr}
 80015ae:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80015b0:	4608      	mov	r0, r1
 80015b2:	bb51      	cbnz	r1, 800160a <HAL_TIM_PWM_Start+0x5e>
 80015b4:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	3b01      	subs	r3, #1
 80015bc:	bf18      	it	ne
 80015be:	2301      	movne	r3, #1
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d15b      	bne.n	800167c <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80015c4:	2800      	cmp	r0, #0
 80015c6:	d139      	bne.n	800163c <HAL_TIM_PWM_Start+0x90>
 80015c8:	2302      	movs	r3, #2
 80015ca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80015ce:	2201      	movs	r2, #1
 80015d0:	4601      	mov	r1, r0
 80015d2:	6820      	ldr	r0, [r4, #0]
 80015d4:	f7ff ff6a 	bl	80014ac <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80015d8:	6823      	ldr	r3, [r4, #0]
 80015da:	4a2a      	ldr	r2, [pc, #168]	; (8001684 <HAL_TIM_PWM_Start+0xd8>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d03d      	beq.n	800165c <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015e0:	6823      	ldr	r3, [r4, #0]
 80015e2:	4a28      	ldr	r2, [pc, #160]	; (8001684 <HAL_TIM_PWM_Start+0xd8>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d03e      	beq.n	8001666 <HAL_TIM_PWM_Start+0xba>
 80015e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015ec:	d03b      	beq.n	8001666 <HAL_TIM_PWM_Start+0xba>
 80015ee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d037      	beq.n	8001666 <HAL_TIM_PWM_Start+0xba>
 80015f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d033      	beq.n	8001666 <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	f042 0201 	orr.w	r2, r2, #1
 8001604:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001606:	2000      	movs	r0, #0
 8001608:	e039      	b.n	800167e <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800160a:	2904      	cmp	r1, #4
 800160c:	d008      	beq.n	8001620 <HAL_TIM_PWM_Start+0x74>
 800160e:	2908      	cmp	r1, #8
 8001610:	d00d      	beq.n	800162e <HAL_TIM_PWM_Start+0x82>
 8001612:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001616:	b2db      	uxtb	r3, r3
 8001618:	3b01      	subs	r3, #1
 800161a:	bf18      	it	ne
 800161c:	2301      	movne	r3, #1
 800161e:	e7cf      	b.n	80015c0 <HAL_TIM_PWM_Start+0x14>
 8001620:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8001624:	b2db      	uxtb	r3, r3
 8001626:	3b01      	subs	r3, #1
 8001628:	bf18      	it	ne
 800162a:	2301      	movne	r3, #1
 800162c:	e7c8      	b.n	80015c0 <HAL_TIM_PWM_Start+0x14>
 800162e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8001632:	b2db      	uxtb	r3, r3
 8001634:	3b01      	subs	r3, #1
 8001636:	bf18      	it	ne
 8001638:	2301      	movne	r3, #1
 800163a:	e7c1      	b.n	80015c0 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800163c:	2804      	cmp	r0, #4
 800163e:	d005      	beq.n	800164c <HAL_TIM_PWM_Start+0xa0>
 8001640:	2808      	cmp	r0, #8
 8001642:	d007      	beq.n	8001654 <HAL_TIM_PWM_Start+0xa8>
 8001644:	2302      	movs	r3, #2
 8001646:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800164a:	e7c0      	b.n	80015ce <HAL_TIM_PWM_Start+0x22>
 800164c:	2302      	movs	r3, #2
 800164e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001652:	e7bc      	b.n	80015ce <HAL_TIM_PWM_Start+0x22>
 8001654:	2302      	movs	r3, #2
 8001656:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800165a:	e7b8      	b.n	80015ce <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 800165c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800165e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001662:	645a      	str	r2, [r3, #68]	; 0x44
 8001664:	e7bc      	b.n	80015e0 <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800166c:	2a06      	cmp	r2, #6
 800166e:	d007      	beq.n	8001680 <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	f042 0201 	orr.w	r2, r2, #1
 8001676:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001678:	2000      	movs	r0, #0
 800167a:	e000      	b.n	800167e <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 800167c:	2001      	movs	r0, #1
}
 800167e:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8001680:	2000      	movs	r0, #0
 8001682:	e7fc      	b.n	800167e <HAL_TIM_PWM_Start+0xd2>
 8001684:	40012c00 	.word	0x40012c00

08001688 <HAL_TIM_IC_Start>:
{
 8001688:	b510      	push	{r4, lr}
 800168a:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800168c:	460b      	mov	r3, r1
 800168e:	bb79      	cbnz	r1, 80016f0 <HAL_TIM_IC_Start+0x68>
 8001690:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8001694:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001696:	2b00      	cmp	r3, #0
 8001698:	d13a      	bne.n	8001710 <HAL_TIM_IC_Start+0x88>
 800169a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800169e:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80016a0:	2801      	cmp	r0, #1
 80016a2:	d170      	bne.n	8001786 <HAL_TIM_IC_Start+0xfe>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80016a4:	2a01      	cmp	r2, #1
 80016a6:	d16f      	bne.n	8001788 <HAL_TIM_IC_Start+0x100>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d141      	bne.n	8001730 <HAL_TIM_IC_Start+0xa8>
 80016ac:	2202      	movs	r2, #2
 80016ae:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d14c      	bne.n	8001750 <HAL_TIM_IC_Start+0xc8>
 80016b6:	2202      	movs	r2, #2
 80016b8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80016bc:	2201      	movs	r2, #1
 80016be:	4619      	mov	r1, r3
 80016c0:	6820      	ldr	r0, [r4, #0]
 80016c2:	f7ff fef3 	bl	80014ac <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016c6:	6823      	ldr	r3, [r4, #0]
 80016c8:	4a31      	ldr	r2, [pc, #196]	; (8001790 <HAL_TIM_IC_Start+0x108>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d050      	beq.n	8001770 <HAL_TIM_IC_Start+0xe8>
 80016ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016d2:	d04d      	beq.n	8001770 <HAL_TIM_IC_Start+0xe8>
 80016d4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80016d8:	4293      	cmp	r3, r2
 80016da:	d049      	beq.n	8001770 <HAL_TIM_IC_Start+0xe8>
 80016dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d045      	beq.n	8001770 <HAL_TIM_IC_Start+0xe8>
    __HAL_TIM_ENABLE(htim);
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	f042 0201 	orr.w	r2, r2, #1
 80016ea:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80016ec:	2000      	movs	r0, #0
 80016ee:	e04b      	b.n	8001788 <HAL_TIM_IC_Start+0x100>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80016f0:	2904      	cmp	r1, #4
 80016f2:	d005      	beq.n	8001700 <HAL_TIM_IC_Start+0x78>
 80016f4:	2908      	cmp	r1, #8
 80016f6:	d007      	beq.n	8001708 <HAL_TIM_IC_Start+0x80>
 80016f8:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 80016fc:	b2c0      	uxtb	r0, r0
 80016fe:	e7ca      	b.n	8001696 <HAL_TIM_IC_Start+0xe>
 8001700:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8001704:	b2c0      	uxtb	r0, r0
 8001706:	e7c6      	b.n	8001696 <HAL_TIM_IC_Start+0xe>
 8001708:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800170c:	b2c0      	uxtb	r0, r0
 800170e:	e7c2      	b.n	8001696 <HAL_TIM_IC_Start+0xe>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001710:	2b04      	cmp	r3, #4
 8001712:	d005      	beq.n	8001720 <HAL_TIM_IC_Start+0x98>
 8001714:	2b08      	cmp	r3, #8
 8001716:	d007      	beq.n	8001728 <HAL_TIM_IC_Start+0xa0>
 8001718:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	e7bf      	b.n	80016a0 <HAL_TIM_IC_Start+0x18>
 8001720:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	e7bb      	b.n	80016a0 <HAL_TIM_IC_Start+0x18>
 8001728:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	e7b7      	b.n	80016a0 <HAL_TIM_IC_Start+0x18>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001730:	2b04      	cmp	r3, #4
 8001732:	d005      	beq.n	8001740 <HAL_TIM_IC_Start+0xb8>
 8001734:	2b08      	cmp	r3, #8
 8001736:	d007      	beq.n	8001748 <HAL_TIM_IC_Start+0xc0>
 8001738:	2202      	movs	r2, #2
 800173a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
 800173e:	e7b8      	b.n	80016b2 <HAL_TIM_IC_Start+0x2a>
 8001740:	2202      	movs	r2, #2
 8001742:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
 8001746:	e7b4      	b.n	80016b2 <HAL_TIM_IC_Start+0x2a>
 8001748:	2202      	movs	r2, #2
 800174a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 800174e:	e7b0      	b.n	80016b2 <HAL_TIM_IC_Start+0x2a>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001750:	2b04      	cmp	r3, #4
 8001752:	d005      	beq.n	8001760 <HAL_TIM_IC_Start+0xd8>
 8001754:	2b08      	cmp	r3, #8
 8001756:	d007      	beq.n	8001768 <HAL_TIM_IC_Start+0xe0>
 8001758:	2202      	movs	r2, #2
 800175a:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800175e:	e7ad      	b.n	80016bc <HAL_TIM_IC_Start+0x34>
 8001760:	2202      	movs	r2, #2
 8001762:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001766:	e7a9      	b.n	80016bc <HAL_TIM_IC_Start+0x34>
 8001768:	2202      	movs	r2, #2
 800176a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 800176e:	e7a5      	b.n	80016bc <HAL_TIM_IC_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001776:	2a06      	cmp	r2, #6
 8001778:	d007      	beq.n	800178a <HAL_TIM_IC_Start+0x102>
      __HAL_TIM_ENABLE(htim);
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	f042 0201 	orr.w	r2, r2, #1
 8001780:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001782:	2000      	movs	r0, #0
 8001784:	e000      	b.n	8001788 <HAL_TIM_IC_Start+0x100>
    return HAL_ERROR;
 8001786:	2001      	movs	r0, #1
}
 8001788:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800178a:	2000      	movs	r0, #0
 800178c:	e7fc      	b.n	8001788 <HAL_TIM_IC_Start+0x100>
 800178e:	bf00      	nop
 8001790:	40012c00 	.word	0x40012c00

08001794 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8001794:	b410      	push	{r4}
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001796:	f001 011f 	and.w	r1, r1, #31
 800179a:	2304      	movs	r3, #4
 800179c:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80017a0:	6a03      	ldr	r3, [r0, #32]
 80017a2:	ea23 0304 	bic.w	r3, r3, r4
 80017a6:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80017a8:	6a03      	ldr	r3, [r0, #32]
 80017aa:	fa02 f101 	lsl.w	r1, r2, r1
 80017ae:	430b      	orrs	r3, r1
 80017b0:	6203      	str	r3, [r0, #32]
}
 80017b2:	bc10      	pop	{r4}
 80017b4:	4770      	bx	lr
	...

080017b8 <HAL_TIMEx_OCN_Start>:
{
 80017b8:	b510      	push	{r4, lr}
 80017ba:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80017bc:	4608      	mov	r0, r1
 80017be:	bb59      	cbnz	r1, 8001818 <HAL_TIMEx_OCN_Start+0x60>
 80017c0:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	3b01      	subs	r3, #1
 80017c8:	bf18      	it	ne
 80017ca:	2301      	movne	r3, #1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d157      	bne.n	8001880 <HAL_TIMEx_OCN_Start+0xc8>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80017d0:	2800      	cmp	r0, #0
 80017d2:	d13a      	bne.n	800184a <HAL_TIMEx_OCN_Start+0x92>
 80017d4:	2302      	movs	r3, #2
 80017d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80017da:	2204      	movs	r2, #4
 80017dc:	4601      	mov	r1, r0
 80017de:	6820      	ldr	r0, [r4, #0]
 80017e0:	f7ff ffd8 	bl	8001794 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 80017e4:	6822      	ldr	r2, [r4, #0]
 80017e6:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80017e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ec:	6453      	str	r3, [r2, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017ee:	6823      	ldr	r3, [r4, #0]
 80017f0:	4a25      	ldr	r2, [pc, #148]	; (8001888 <HAL_TIMEx_OCN_Start+0xd0>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d039      	beq.n	800186a <HAL_TIMEx_OCN_Start+0xb2>
 80017f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017fa:	d036      	beq.n	800186a <HAL_TIMEx_OCN_Start+0xb2>
 80017fc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001800:	4293      	cmp	r3, r2
 8001802:	d032      	beq.n	800186a <HAL_TIMEx_OCN_Start+0xb2>
 8001804:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001808:	4293      	cmp	r3, r2
 800180a:	d02e      	beq.n	800186a <HAL_TIMEx_OCN_Start+0xb2>
    __HAL_TIM_ENABLE(htim);
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	f042 0201 	orr.w	r2, r2, #1
 8001812:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001814:	2000      	movs	r0, #0
 8001816:	e034      	b.n	8001882 <HAL_TIMEx_OCN_Start+0xca>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001818:	2904      	cmp	r1, #4
 800181a:	d008      	beq.n	800182e <HAL_TIMEx_OCN_Start+0x76>
 800181c:	2908      	cmp	r1, #8
 800181e:	d00d      	beq.n	800183c <HAL_TIMEx_OCN_Start+0x84>
 8001820:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001824:	b2db      	uxtb	r3, r3
 8001826:	3b01      	subs	r3, #1
 8001828:	bf18      	it	ne
 800182a:	2301      	movne	r3, #1
 800182c:	e7ce      	b.n	80017cc <HAL_TIMEx_OCN_Start+0x14>
 800182e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001832:	b2db      	uxtb	r3, r3
 8001834:	3b01      	subs	r3, #1
 8001836:	bf18      	it	ne
 8001838:	2301      	movne	r3, #1
 800183a:	e7c7      	b.n	80017cc <HAL_TIMEx_OCN_Start+0x14>
 800183c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001840:	b2db      	uxtb	r3, r3
 8001842:	3b01      	subs	r3, #1
 8001844:	bf18      	it	ne
 8001846:	2301      	movne	r3, #1
 8001848:	e7c0      	b.n	80017cc <HAL_TIMEx_OCN_Start+0x14>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800184a:	2804      	cmp	r0, #4
 800184c:	d005      	beq.n	800185a <HAL_TIMEx_OCN_Start+0xa2>
 800184e:	2808      	cmp	r0, #8
 8001850:	d007      	beq.n	8001862 <HAL_TIMEx_OCN_Start+0xaa>
 8001852:	2302      	movs	r3, #2
 8001854:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001858:	e7bf      	b.n	80017da <HAL_TIMEx_OCN_Start+0x22>
 800185a:	2302      	movs	r3, #2
 800185c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001860:	e7bb      	b.n	80017da <HAL_TIMEx_OCN_Start+0x22>
 8001862:	2302      	movs	r3, #2
 8001864:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001868:	e7b7      	b.n	80017da <HAL_TIMEx_OCN_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001870:	2a06      	cmp	r2, #6
 8001872:	d007      	beq.n	8001884 <HAL_TIMEx_OCN_Start+0xcc>
      __HAL_TIM_ENABLE(htim);
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	f042 0201 	orr.w	r2, r2, #1
 800187a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800187c:	2000      	movs	r0, #0
 800187e:	e000      	b.n	8001882 <HAL_TIMEx_OCN_Start+0xca>
    return HAL_ERROR;
 8001880:	2001      	movs	r0, #1
}
 8001882:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8001884:	2000      	movs	r0, #0
 8001886:	e7fc      	b.n	8001882 <HAL_TIMEx_OCN_Start+0xca>
 8001888:	40012c00 	.word	0x40012c00

0800188c <HAL_TIMEx_PWMN_Start>:
{
 800188c:	b510      	push	{r4, lr}
 800188e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001890:	4608      	mov	r0, r1
 8001892:	bb59      	cbnz	r1, 80018ec <HAL_TIMEx_PWMN_Start+0x60>
 8001894:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8001898:	b2db      	uxtb	r3, r3
 800189a:	3b01      	subs	r3, #1
 800189c:	bf18      	it	ne
 800189e:	2301      	movne	r3, #1
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d157      	bne.n	8001954 <HAL_TIMEx_PWMN_Start+0xc8>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80018a4:	2800      	cmp	r0, #0
 80018a6:	d13a      	bne.n	800191e <HAL_TIMEx_PWMN_Start+0x92>
 80018a8:	2302      	movs	r3, #2
 80018aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80018ae:	2204      	movs	r2, #4
 80018b0:	4601      	mov	r1, r0
 80018b2:	6820      	ldr	r0, [r4, #0]
 80018b4:	f7ff ff6e 	bl	8001794 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 80018b8:	6822      	ldr	r2, [r4, #0]
 80018ba:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80018bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018c0:	6453      	str	r3, [r2, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018c2:	6823      	ldr	r3, [r4, #0]
 80018c4:	4a25      	ldr	r2, [pc, #148]	; (800195c <HAL_TIMEx_PWMN_Start+0xd0>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d039      	beq.n	800193e <HAL_TIMEx_PWMN_Start+0xb2>
 80018ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ce:	d036      	beq.n	800193e <HAL_TIMEx_PWMN_Start+0xb2>
 80018d0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d032      	beq.n	800193e <HAL_TIMEx_PWMN_Start+0xb2>
 80018d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018dc:	4293      	cmp	r3, r2
 80018de:	d02e      	beq.n	800193e <HAL_TIMEx_PWMN_Start+0xb2>
    __HAL_TIM_ENABLE(htim);
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	f042 0201 	orr.w	r2, r2, #1
 80018e6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80018e8:	2000      	movs	r0, #0
 80018ea:	e034      	b.n	8001956 <HAL_TIMEx_PWMN_Start+0xca>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80018ec:	2904      	cmp	r1, #4
 80018ee:	d008      	beq.n	8001902 <HAL_TIMEx_PWMN_Start+0x76>
 80018f0:	2908      	cmp	r1, #8
 80018f2:	d00d      	beq.n	8001910 <HAL_TIMEx_PWMN_Start+0x84>
 80018f4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	3b01      	subs	r3, #1
 80018fc:	bf18      	it	ne
 80018fe:	2301      	movne	r3, #1
 8001900:	e7ce      	b.n	80018a0 <HAL_TIMEx_PWMN_Start+0x14>
 8001902:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001906:	b2db      	uxtb	r3, r3
 8001908:	3b01      	subs	r3, #1
 800190a:	bf18      	it	ne
 800190c:	2301      	movne	r3, #1
 800190e:	e7c7      	b.n	80018a0 <HAL_TIMEx_PWMN_Start+0x14>
 8001910:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001914:	b2db      	uxtb	r3, r3
 8001916:	3b01      	subs	r3, #1
 8001918:	bf18      	it	ne
 800191a:	2301      	movne	r3, #1
 800191c:	e7c0      	b.n	80018a0 <HAL_TIMEx_PWMN_Start+0x14>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800191e:	2804      	cmp	r0, #4
 8001920:	d005      	beq.n	800192e <HAL_TIMEx_PWMN_Start+0xa2>
 8001922:	2808      	cmp	r0, #8
 8001924:	d007      	beq.n	8001936 <HAL_TIMEx_PWMN_Start+0xaa>
 8001926:	2302      	movs	r3, #2
 8001928:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800192c:	e7bf      	b.n	80018ae <HAL_TIMEx_PWMN_Start+0x22>
 800192e:	2302      	movs	r3, #2
 8001930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001934:	e7bb      	b.n	80018ae <HAL_TIMEx_PWMN_Start+0x22>
 8001936:	2302      	movs	r3, #2
 8001938:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800193c:	e7b7      	b.n	80018ae <HAL_TIMEx_PWMN_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001944:	2a06      	cmp	r2, #6
 8001946:	d007      	beq.n	8001958 <HAL_TIMEx_PWMN_Start+0xcc>
      __HAL_TIM_ENABLE(htim);
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	f042 0201 	orr.w	r2, r2, #1
 800194e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001950:	2000      	movs	r0, #0
 8001952:	e000      	b.n	8001956 <HAL_TIMEx_PWMN_Start+0xca>
    return HAL_ERROR;
 8001954:	2001      	movs	r0, #1
}
 8001956:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8001958:	2000      	movs	r0, #0
 800195a:	e7fc      	b.n	8001956 <HAL_TIMEx_PWMN_Start+0xca>
 800195c:	40012c00 	.word	0x40012c00

08001960 <HAL_TIMEx_CommutCallback>:
}
 8001960:	4770      	bx	lr

08001962 <HAL_TIMEx_BreakCallback>:
}
 8001962:	4770      	bx	lr

08001964 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001964:	6802      	ldr	r2, [r0, #0]
 8001966:	68d3      	ldr	r3, [r2, #12]
 8001968:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800196c:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800196e:	6802      	ldr	r2, [r0, #0]
 8001970:	6953      	ldr	r3, [r2, #20]
 8001972:	f023 0301 	bic.w	r3, r3, #1
 8001976:	6153      	str	r3, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001978:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800197a:	2b01      	cmp	r3, #1
 800197c:	d005      	beq.n	800198a <UART_EndRxTransfer+0x26>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800197e:	2320      	movs	r3, #32
 8001980:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001984:	2300      	movs	r3, #0
 8001986:	6303      	str	r3, [r0, #48]	; 0x30
}
 8001988:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800198a:	6802      	ldr	r2, [r0, #0]
 800198c:	68d3      	ldr	r3, [r2, #12]
 800198e:	f023 0310 	bic.w	r3, r3, #16
 8001992:	60d3      	str	r3, [r2, #12]
 8001994:	e7f3      	b.n	800197e <UART_EndRxTransfer+0x1a>

08001996 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001996:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b21      	cmp	r3, #33	; 0x21
 800199e:	d001      	beq.n	80019a4 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80019a0:	2002      	movs	r0, #2
  }
}
 80019a2:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019a4:	6883      	ldr	r3, [r0, #8]
 80019a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019aa:	d017      	beq.n	80019dc <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80019ac:	6a03      	ldr	r3, [r0, #32]
 80019ae:	1c5a      	adds	r2, r3, #1
 80019b0:	6202      	str	r2, [r0, #32]
 80019b2:	781a      	ldrb	r2, [r3, #0]
 80019b4:	6803      	ldr	r3, [r0, #0]
 80019b6:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 80019b8:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	3b01      	subs	r3, #1
 80019be:	b29b      	uxth	r3, r3
 80019c0:	84c3      	strh	r3, [r0, #38]	; 0x26
 80019c2:	b94b      	cbnz	r3, 80019d8 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80019c4:	6802      	ldr	r2, [r0, #0]
 80019c6:	68d3      	ldr	r3, [r2, #12]
 80019c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019cc:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80019ce:	6802      	ldr	r2, [r0, #0]
 80019d0:	68d3      	ldr	r3, [r2, #12]
 80019d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019d6:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 80019d8:	2000      	movs	r0, #0
 80019da:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019dc:	6903      	ldr	r3, [r0, #16]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1e4      	bne.n	80019ac <UART_Transmit_IT+0x16>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80019e2:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	6802      	ldr	r2, [r0, #0]
 80019e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ec:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 80019ee:	6a03      	ldr	r3, [r0, #32]
 80019f0:	3302      	adds	r3, #2
 80019f2:	6203      	str	r3, [r0, #32]
 80019f4:	e7e0      	b.n	80019b8 <UART_Transmit_IT+0x22>
	...

080019f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019f8:	b510      	push	{r4, lr}
 80019fa:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019fc:	6802      	ldr	r2, [r0, #0]
 80019fe:	6913      	ldr	r3, [r2, #16]
 8001a00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a04:	68c1      	ldr	r1, [r0, #12]
 8001a06:	430b      	orrs	r3, r1
 8001a08:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001a0a:	6883      	ldr	r3, [r0, #8]
 8001a0c:	6902      	ldr	r2, [r0, #16]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	6942      	ldr	r2, [r0, #20]
 8001a12:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001a14:	6801      	ldr	r1, [r0, #0]
 8001a16:	68cb      	ldr	r3, [r1, #12]
 8001a18:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001a1c:	f023 030c 	bic.w	r3, r3, #12
 8001a20:	4313      	orrs	r3, r2
 8001a22:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a24:	6802      	ldr	r2, [r0, #0]
 8001a26:	6953      	ldr	r3, [r2, #20]
 8001a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a2c:	6981      	ldr	r1, [r0, #24]
 8001a2e:	430b      	orrs	r3, r1
 8001a30:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8001a32:	6802      	ldr	r2, [r0, #0]
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <UART_SetConfig+0x88>)
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d01f      	beq.n	8001a7a <UART_SetConfig+0x82>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001a3a:	f7ff fb91 	bl	8001160 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001a3e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8001a42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a46:	6862      	ldr	r2, [r4, #4]
 8001a48:	0092      	lsls	r2, r2, #2
 8001a4a:	fbb3 f2f2 	udiv	r2, r3, r2
 8001a4e:	480d      	ldr	r0, [pc, #52]	; (8001a84 <UART_SetConfig+0x8c>)
 8001a50:	fba0 3102 	umull	r3, r1, r0, r2
 8001a54:	0949      	lsrs	r1, r1, #5
 8001a56:	2364      	movs	r3, #100	; 0x64
 8001a58:	fb03 2311 	mls	r3, r3, r1, r2
 8001a5c:	011b      	lsls	r3, r3, #4
 8001a5e:	3332      	adds	r3, #50	; 0x32
 8001a60:	fba0 2303 	umull	r2, r3, r0, r3
 8001a64:	095b      	lsrs	r3, r3, #5
 8001a66:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a6a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	6821      	ldr	r1, [r4, #0]
 8001a74:	4413      	add	r3, r2
 8001a76:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8001a78:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8001a7a:	f7ff fb81 	bl	8001180 <HAL_RCC_GetPCLK2Freq>
 8001a7e:	e7de      	b.n	8001a3e <UART_SetConfig+0x46>
 8001a80:	40013800 	.word	0x40013800
 8001a84:	51eb851f 	.word	0x51eb851f

08001a88 <HAL_UART_MspInit>:
}
 8001a88:	4770      	bx	lr

08001a8a <HAL_UART_Init>:
  if (huart == NULL)
 8001a8a:	b358      	cbz	r0, 8001ae4 <HAL_UART_Init+0x5a>
{
 8001a8c:	b510      	push	{r4, lr}
 8001a8e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001a90:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001a94:	b30b      	cbz	r3, 8001ada <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001a96:	2324      	movs	r3, #36	; 0x24
 8001a98:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8001a9c:	6822      	ldr	r2, [r4, #0]
 8001a9e:	68d3      	ldr	r3, [r2, #12]
 8001aa0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001aa4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	f7ff ffa6 	bl	80019f8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aac:	6822      	ldr	r2, [r4, #0]
 8001aae:	6913      	ldr	r3, [r2, #16]
 8001ab0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001ab4:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ab6:	6822      	ldr	r2, [r4, #0]
 8001ab8:	6953      	ldr	r3, [r2, #20]
 8001aba:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001abe:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001ac0:	6822      	ldr	r2, [r4, #0]
 8001ac2:	68d3      	ldr	r3, [r2, #12]
 8001ac4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ac8:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aca:	2000      	movs	r0, #0
 8001acc:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ace:	2320      	movs	r3, #32
 8001ad0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ad4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8001ad8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001ada:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8001ade:	f7ff ffd3 	bl	8001a88 <HAL_UART_MspInit>
 8001ae2:	e7d8      	b.n	8001a96 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001ae4:	2001      	movs	r0, #1
}
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_HalfDuplex_Init>:
  if (huart == NULL)
 8001ae8:	2800      	cmp	r0, #0
 8001aea:	d030      	beq.n	8001b4e <HAL_HalfDuplex_Init+0x66>
{
 8001aec:	b510      	push	{r4, lr}
 8001aee:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001af0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001af4:	b333      	cbz	r3, 8001b44 <HAL_HalfDuplex_Init+0x5c>
  huart->gState = HAL_UART_STATE_BUSY;
 8001af6:	2324      	movs	r3, #36	; 0x24
 8001af8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8001afc:	6822      	ldr	r2, [r4, #0]
 8001afe:	68d3      	ldr	r3, [r2, #12]
 8001b00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b04:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001b06:	4620      	mov	r0, r4
 8001b08:	f7ff ff76 	bl	80019f8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b0c:	6822      	ldr	r2, [r4, #0]
 8001b0e:	6913      	ldr	r3, [r2, #16]
 8001b10:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001b14:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8001b16:	6822      	ldr	r2, [r4, #0]
 8001b18:	6953      	ldr	r3, [r2, #20]
 8001b1a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001b1e:	6153      	str	r3, [r2, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001b20:	6822      	ldr	r2, [r4, #0]
 8001b22:	6953      	ldr	r3, [r2, #20]
 8001b24:	f043 0308 	orr.w	r3, r3, #8
 8001b28:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001b2a:	6822      	ldr	r2, [r4, #0]
 8001b2c:	68d3      	ldr	r3, [r2, #12]
 8001b2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b32:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b34:	2000      	movs	r0, #0
 8001b36:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001b38:	2320      	movs	r3, #32
 8001b3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b3e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8001b42:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001b44:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8001b48:	f7ff ff9e 	bl	8001a88 <HAL_UART_MspInit>
 8001b4c:	e7d3      	b.n	8001af6 <HAL_HalfDuplex_Init+0xe>
    return HAL_ERROR;
 8001b4e:	2001      	movs	r0, #1
}
 8001b50:	4770      	bx	lr

08001b52 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8001b52:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b20      	cmp	r3, #32
 8001b5a:	d116      	bne.n	8001b8a <HAL_UART_Transmit_IT+0x38>
    if ((pData == NULL) || (Size == 0U))
 8001b5c:	b1b9      	cbz	r1, 8001b8e <HAL_UART_Transmit_IT+0x3c>
 8001b5e:	b1c2      	cbz	r2, 8001b92 <HAL_UART_Transmit_IT+0x40>
    __HAL_LOCK(huart);
 8001b60:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d016      	beq.n	8001b96 <HAL_UART_Transmit_IT+0x44>
    huart->pTxBuffPtr = pData;
 8001b68:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8001b6a:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b6c:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b72:	2221      	movs	r2, #33	; 0x21
 8001b74:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    __HAL_UNLOCK(huart);
 8001b78:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001b7c:	6801      	ldr	r1, [r0, #0]
 8001b7e:	68ca      	ldr	r2, [r1, #12]
 8001b80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b84:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8001b86:	4618      	mov	r0, r3
 8001b88:	4770      	bx	lr
    return HAL_BUSY;
 8001b8a:	2002      	movs	r0, #2
 8001b8c:	4770      	bx	lr
      return HAL_ERROR;
 8001b8e:	2001      	movs	r0, #1
 8001b90:	4770      	bx	lr
 8001b92:	2001      	movs	r0, #1
 8001b94:	4770      	bx	lr
    __HAL_LOCK(huart);
 8001b96:	2002      	movs	r0, #2
}
 8001b98:	4770      	bx	lr

08001b9a <UART_EndTransmit_IT>:
{
 8001b9a:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001b9c:	6801      	ldr	r1, [r0, #0]
 8001b9e:	68ca      	ldr	r2, [r1, #12]
 8001ba0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ba4:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8001bac:	f001 fe89 	bl	80038c2 <HAL_UART_TxCpltCallback>
}
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	bd08      	pop	{r3, pc}

08001bb4 <UART_DMAAbortOnError>:
{
 8001bb4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001bb6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001bbc:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001bbe:	f001 fe87 	bl	80038d0 <HAL_UART_ErrorCallback>
}
 8001bc2:	bd08      	pop	{r3, pc}

08001bc4 <HAL_UARTEx_RxEventCallback>:
}
 8001bc4:	4770      	bx	lr

08001bc6 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001bc6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b22      	cmp	r3, #34	; 0x22
 8001bce:	d160      	bne.n	8001c92 <UART_Receive_IT+0xcc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bd0:	6883      	ldr	r3, [r0, #8]
 8001bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bd6:	d046      	beq.n	8001c66 <UART_Receive_IT+0xa0>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001bd8:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bde:	d004      	beq.n	8001bea <UART_Receive_IT+0x24>
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d14d      	bne.n	8001c80 <UART_Receive_IT+0xba>
 8001be4:	6903      	ldr	r3, [r0, #16]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d14a      	bne.n	8001c80 <UART_Receive_IT+0xba>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001bea:	6803      	ldr	r3, [r0, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8001bf0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001bf6:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d148      	bne.n	8001c96 <UART_Receive_IT+0xd0>
{
 8001c04:	b500      	push	{lr}
 8001c06:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001c08:	6802      	ldr	r2, [r0, #0]
 8001c0a:	68d3      	ldr	r3, [r2, #12]
 8001c0c:	f023 0320 	bic.w	r3, r3, #32
 8001c10:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001c12:	6802      	ldr	r2, [r0, #0]
 8001c14:	68d3      	ldr	r3, [r2, #12]
 8001c16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c1a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001c1c:	6802      	ldr	r2, [r0, #0]
 8001c1e:	6953      	ldr	r3, [r2, #20]
 8001c20:	f023 0301 	bic.w	r3, r3, #1
 8001c24:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001c26:	2320      	movs	r3, #32
 8001c28:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c2c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d12c      	bne.n	8001c8c <UART_Receive_IT+0xc6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c32:	2300      	movs	r3, #0
 8001c34:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c36:	6802      	ldr	r2, [r0, #0]
 8001c38:	68d3      	ldr	r3, [r2, #12]
 8001c3a:	f023 0310 	bic.w	r3, r3, #16
 8001c3e:	60d3      	str	r3, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001c40:	6803      	ldr	r3, [r0, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	f012 0f10 	tst.w	r2, #16
 8001c48:	d006      	beq.n	8001c58 <UART_Receive_IT+0x92>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	9201      	str	r2, [sp, #4]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	9201      	str	r2, [sp, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	9301      	str	r3, [sp, #4]
 8001c56:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001c58:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8001c5a:	f7ff ffb3 	bl	8001bc4 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8001c5e:	2000      	movs	r0, #0
}
 8001c60:	b003      	add	sp, #12
 8001c62:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c66:	6902      	ldr	r2, [r0, #16]
 8001c68:	2a00      	cmp	r2, #0
 8001c6a:	d1b5      	bne.n	8001bd8 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001c6c:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001c6e:	6803      	ldr	r3, [r0, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c76:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8001c78:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	6283      	str	r3, [r0, #40]	; 0x28
 8001c7e:	e7ba      	b.n	8001bf6 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001c80:	6803      	ldr	r3, [r0, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c88:	7013      	strb	r3, [r2, #0]
 8001c8a:	e7b1      	b.n	8001bf0 <UART_Receive_IT+0x2a>
       HAL_UART_RxCpltCallback(huart);
 8001c8c:	f001 fe12 	bl	80038b4 <HAL_UART_RxCpltCallback>
 8001c90:	e7e5      	b.n	8001c5e <UART_Receive_IT+0x98>
    return HAL_BUSY;
 8001c92:	2002      	movs	r0, #2
 8001c94:	4770      	bx	lr
    return HAL_OK;
 8001c96:	2000      	movs	r0, #0
}
 8001c98:	4770      	bx	lr
	...

08001c9c <HAL_UART_IRQHandler>:
{
 8001c9c:	b530      	push	{r4, r5, lr}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ca2:	6802      	ldr	r2, [r0, #0]
 8001ca4:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ca6:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ca8:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8001caa:	f013 050f 	ands.w	r5, r3, #15
 8001cae:	d105      	bne.n	8001cbc <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cb0:	f013 0f20 	tst.w	r3, #32
 8001cb4:	d002      	beq.n	8001cbc <HAL_UART_IRQHandler+0x20>
 8001cb6:	f010 0f20 	tst.w	r0, #32
 8001cba:	d119      	bne.n	8001cf0 <HAL_UART_IRQHandler+0x54>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001cbc:	b12d      	cbz	r5, 8001cca <HAL_UART_IRQHandler+0x2e>
 8001cbe:	f011 0101 	ands.w	r1, r1, #1
 8001cc2:	d119      	bne.n	8001cf8 <HAL_UART_IRQHandler+0x5c>
 8001cc4:	f410 7f90 	tst.w	r0, #288	; 0x120
 8001cc8:	d116      	bne.n	8001cf8 <HAL_UART_IRQHandler+0x5c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001cca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001ccc:	2901      	cmp	r1, #1
 8001cce:	d075      	beq.n	8001dbc <HAL_UART_IRQHandler+0x120>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001cd0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001cd4:	d003      	beq.n	8001cde <HAL_UART_IRQHandler+0x42>
 8001cd6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001cda:	f040 80d7 	bne.w	8001e8c <HAL_UART_IRQHandler+0x1f0>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001cde:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001ce2:	d003      	beq.n	8001cec <HAL_UART_IRQHandler+0x50>
 8001ce4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001ce8:	f040 80d4 	bne.w	8001e94 <HAL_UART_IRQHandler+0x1f8>
}
 8001cec:	b003      	add	sp, #12
 8001cee:	bd30      	pop	{r4, r5, pc}
      UART_Receive_IT(huart);
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	f7ff ff68 	bl	8001bc6 <UART_Receive_IT>
      return;
 8001cf6:	e7f9      	b.n	8001cec <HAL_UART_IRQHandler+0x50>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001cf8:	f013 0f01 	tst.w	r3, #1
 8001cfc:	d006      	beq.n	8001d0c <HAL_UART_IRQHandler+0x70>
 8001cfe:	f410 7f80 	tst.w	r0, #256	; 0x100
 8001d02:	d003      	beq.n	8001d0c <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d04:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d0c:	f013 0f04 	tst.w	r3, #4
 8001d10:	d004      	beq.n	8001d1c <HAL_UART_IRQHandler+0x80>
 8001d12:	b119      	cbz	r1, 8001d1c <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d14:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001d16:	f042 0202 	orr.w	r2, r2, #2
 8001d1a:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d1c:	f013 0f02 	tst.w	r3, #2
 8001d20:	d004      	beq.n	8001d2c <HAL_UART_IRQHandler+0x90>
 8001d22:	b119      	cbz	r1, 8001d2c <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d24:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001d26:	f042 0204 	orr.w	r2, r2, #4
 8001d2a:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001d2c:	f013 0f08 	tst.w	r3, #8
 8001d30:	d007      	beq.n	8001d42 <HAL_UART_IRQHandler+0xa6>
 8001d32:	f010 0f20 	tst.w	r0, #32
 8001d36:	d100      	bne.n	8001d3a <HAL_UART_IRQHandler+0x9e>
 8001d38:	b119      	cbz	r1, 8001d42 <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d3a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001d3c:	f042 0208 	orr.w	r2, r2, #8
 8001d40:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d42:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001d44:	2a00      	cmp	r2, #0
 8001d46:	d0d1      	beq.n	8001cec <HAL_UART_IRQHandler+0x50>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d48:	f013 0f20 	tst.w	r3, #32
 8001d4c:	d002      	beq.n	8001d54 <HAL_UART_IRQHandler+0xb8>
 8001d4e:	f010 0f20 	tst.w	r0, #32
 8001d52:	d121      	bne.n	8001d98 <HAL_UART_IRQHandler+0xfc>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d54:	6823      	ldr	r3, [r4, #0]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d5c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001d5e:	f012 0f08 	tst.w	r2, #8
 8001d62:	d100      	bne.n	8001d66 <HAL_UART_IRQHandler+0xca>
 8001d64:	b323      	cbz	r3, 8001db0 <HAL_UART_IRQHandler+0x114>
        UART_EndRxTransfer(huart);
 8001d66:	4620      	mov	r0, r4
 8001d68:	f7ff fdfc 	bl	8001964 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d6c:	6823      	ldr	r3, [r4, #0]
 8001d6e:	695a      	ldr	r2, [r3, #20]
 8001d70:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001d74:	d018      	beq.n	8001da8 <HAL_UART_IRQHandler+0x10c>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d76:	695a      	ldr	r2, [r3, #20]
 8001d78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d7c:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001d7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d80:	b173      	cbz	r3, 8001da0 <HAL_UART_IRQHandler+0x104>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d82:	4a46      	ldr	r2, [pc, #280]	; (8001e9c <HAL_UART_IRQHandler+0x200>)
 8001d84:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d86:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001d88:	f7fe fd5a 	bl	8000840 <HAL_DMA_Abort_IT>
 8001d8c:	2800      	cmp	r0, #0
 8001d8e:	d0ad      	beq.n	8001cec <HAL_UART_IRQHandler+0x50>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d90:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001d92:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001d94:	4798      	blx	r3
 8001d96:	e7a9      	b.n	8001cec <HAL_UART_IRQHandler+0x50>
        UART_Receive_IT(huart);
 8001d98:	4620      	mov	r0, r4
 8001d9a:	f7ff ff14 	bl	8001bc6 <UART_Receive_IT>
 8001d9e:	e7d9      	b.n	8001d54 <HAL_UART_IRQHandler+0xb8>
            HAL_UART_ErrorCallback(huart);
 8001da0:	4620      	mov	r0, r4
 8001da2:	f001 fd95 	bl	80038d0 <HAL_UART_ErrorCallback>
 8001da6:	e7a1      	b.n	8001cec <HAL_UART_IRQHandler+0x50>
          HAL_UART_ErrorCallback(huart);
 8001da8:	4620      	mov	r0, r4
 8001daa:	f001 fd91 	bl	80038d0 <HAL_UART_ErrorCallback>
 8001dae:	e79d      	b.n	8001cec <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 8001db0:	4620      	mov	r0, r4
 8001db2:	f001 fd8d 	bl	80038d0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001db6:	2300      	movs	r3, #0
 8001db8:	6423      	str	r3, [r4, #64]	; 0x40
    return;
 8001dba:	e797      	b.n	8001cec <HAL_UART_IRQHandler+0x50>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001dbc:	f013 0f10 	tst.w	r3, #16
 8001dc0:	d086      	beq.n	8001cd0 <HAL_UART_IRQHandler+0x34>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001dc2:	f010 0f10 	tst.w	r0, #16
 8001dc6:	d083      	beq.n	8001cd0 <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001dc8:	2300      	movs	r3, #0
 8001dca:	9301      	str	r3, [sp, #4]
 8001dcc:	6813      	ldr	r3, [r2, #0]
 8001dce:	9301      	str	r3, [sp, #4]
 8001dd0:	6853      	ldr	r3, [r2, #4]
 8001dd2:	9301      	str	r3, [sp, #4]
 8001dd4:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dd6:	6953      	ldr	r3, [r2, #20]
 8001dd8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001ddc:	d032      	beq.n	8001e44 <HAL_UART_IRQHandler+0x1a8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001dde:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001de0:	680b      	ldr	r3, [r1, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d080      	beq.n	8001cec <HAL_UART_IRQHandler+0x50>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001dea:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8001dec:	4298      	cmp	r0, r3
 8001dee:	f67f af7d 	bls.w	8001cec <HAL_UART_IRQHandler+0x50>
        huart->RxXferCount = nb_remaining_rx_data;
 8001df2:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001df4:	698b      	ldr	r3, [r1, #24]
 8001df6:	2b20      	cmp	r3, #32
 8001df8:	d108      	bne.n	8001e0c <HAL_UART_IRQHandler+0x170>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001dfa:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8001dfc:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	1ac9      	subs	r1, r1, r3
 8001e02:	b289      	uxth	r1, r1
 8001e04:	4620      	mov	r0, r4
 8001e06:	f7ff fedd 	bl	8001bc4 <HAL_UARTEx_RxEventCallback>
      return;
 8001e0a:	e76f      	b.n	8001cec <HAL_UART_IRQHandler+0x50>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e0c:	68d3      	ldr	r3, [r2, #12]
 8001e0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e12:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e14:	6822      	ldr	r2, [r4, #0]
 8001e16:	6953      	ldr	r3, [r2, #20]
 8001e18:	f023 0301 	bic.w	r3, r3, #1
 8001e1c:	6153      	str	r3, [r2, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e1e:	6822      	ldr	r2, [r4, #0]
 8001e20:	6953      	ldr	r3, [r2, #20]
 8001e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e26:	6153      	str	r3, [r2, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8001e28:	2320      	movs	r3, #32
 8001e2a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	6323      	str	r3, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e32:	6822      	ldr	r2, [r4, #0]
 8001e34:	68d3      	ldr	r3, [r2, #12]
 8001e36:	f023 0310 	bic.w	r3, r3, #16
 8001e3a:	60d3      	str	r3, [r2, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001e3c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001e3e:	f7fe fcdd 	bl	80007fc <HAL_DMA_Abort>
 8001e42:	e7da      	b.n	8001dfa <HAL_UART_IRQHandler+0x15e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001e44:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8001e46:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	1ac9      	subs	r1, r1, r3
 8001e4c:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 8001e4e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f43f af4a 	beq.w	8001cec <HAL_UART_IRQHandler+0x50>
          &&(nb_rx_data > 0U) )
 8001e58:	2900      	cmp	r1, #0
 8001e5a:	f43f af47 	beq.w	8001cec <HAL_UART_IRQHandler+0x50>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e5e:	68d3      	ldr	r3, [r2, #12]
 8001e60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001e64:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e66:	6822      	ldr	r2, [r4, #0]
 8001e68:	6953      	ldr	r3, [r2, #20]
 8001e6a:	f023 0301 	bic.w	r3, r3, #1
 8001e6e:	6153      	str	r3, [r2, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8001e70:	2320      	movs	r3, #32
 8001e72:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e76:	2300      	movs	r3, #0
 8001e78:	6323      	str	r3, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e7a:	6822      	ldr	r2, [r4, #0]
 8001e7c:	68d3      	ldr	r3, [r2, #12]
 8001e7e:	f023 0310 	bic.w	r3, r3, #16
 8001e82:	60d3      	str	r3, [r2, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001e84:	4620      	mov	r0, r4
 8001e86:	f7ff fe9d 	bl	8001bc4 <HAL_UARTEx_RxEventCallback>
      return;
 8001e8a:	e72f      	b.n	8001cec <HAL_UART_IRQHandler+0x50>
    UART_Transmit_IT(huart);
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	f7ff fd82 	bl	8001996 <UART_Transmit_IT>
    return;
 8001e92:	e72b      	b.n	8001cec <HAL_UART_IRQHandler+0x50>
    UART_EndTransmit_IT(huart);
 8001e94:	4620      	mov	r0, r4
 8001e96:	f7ff fe80 	bl	8001b9a <UART_EndTransmit_IT>
    return;
 8001e9a:	e727      	b.n	8001cec <HAL_UART_IRQHandler+0x50>
 8001e9c:	08001bb5 	.word	0x08001bb5

08001ea0 <HAL_HalfDuplex_EnableTransmitter>:
  __HAL_LOCK(huart);
 8001ea0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d014      	beq.n	8001ed2 <HAL_HalfDuplex_EnableTransmitter+0x32>
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_BUSY;
 8001eae:	2324      	movs	r3, #36	; 0x24
 8001eb0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpreg = huart->Instance->CR1;
 8001eb4:	6802      	ldr	r2, [r0, #0]
 8001eb6:	68d3      	ldr	r3, [r2, #12]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8001eb8:	f023 030c 	bic.w	r3, r3, #12
  tmpreg |= (uint32_t)USART_CR1_TE;
 8001ebc:	f043 0308 	orr.w	r3, r3, #8
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001ec0:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001ec2:	2320      	movs	r3, #32
 8001ec4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(huart);
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001ece:	4618      	mov	r0, r3
 8001ed0:	4770      	bx	lr
  __HAL_LOCK(huart);
 8001ed2:	2002      	movs	r0, #2
}
 8001ed4:	4770      	bx	lr

08001ed6 <HAL_HalfDuplex_EnableReceiver>:
  __HAL_LOCK(huart);
 8001ed6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d014      	beq.n	8001f08 <HAL_HalfDuplex_EnableReceiver+0x32>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_BUSY;
 8001ee4:	2324      	movs	r3, #36	; 0x24
 8001ee6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpreg = huart->Instance->CR1;
 8001eea:	6802      	ldr	r2, [r0, #0]
 8001eec:	68d3      	ldr	r3, [r2, #12]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8001eee:	f023 030c 	bic.w	r3, r3, #12
  tmpreg |= (uint32_t)USART_CR1_RE;
 8001ef2:	f043 0304 	orr.w	r3, r3, #4
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001ef6:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001ef8:	2320      	movs	r3, #32
 8001efa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(huart);
 8001efe:	2300      	movs	r3, #0
 8001f00:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001f04:	4618      	mov	r0, r3
 8001f06:	4770      	bx	lr
  __HAL_LOCK(huart);
 8001f08:	2002      	movs	r0, #2
}
 8001f0a:	4770      	bx	lr

08001f0c <HAL_UART_GetState>:
  temp1 = huart->gState;
 8001f0c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  temp2 = huart->RxState;
 8001f10:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
}
 8001f14:	4318      	orrs	r0, r3
 8001f16:	4770      	bx	lr

08001f18 <UART_Start_Receive_IT>:
{
 8001f18:	4603      	mov	r3, r0
  huart->pRxBuffPtr = pData;
 8001f1a:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8001f1c:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 8001f1e:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f20:	2000      	movs	r0, #0
 8001f22:	6418      	str	r0, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f24:	2222      	movs	r2, #34	; 0x22
 8001f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  __HAL_UNLOCK(huart);
 8001f2a:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001f2e:	6819      	ldr	r1, [r3, #0]
 8001f30:	68ca      	ldr	r2, [r1, #12]
 8001f32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f36:	60ca      	str	r2, [r1, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001f38:	6819      	ldr	r1, [r3, #0]
 8001f3a:	694a      	ldr	r2, [r1, #20]
 8001f3c:	f042 0201 	orr.w	r2, r2, #1
 8001f40:	614a      	str	r2, [r1, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68d3      	ldr	r3, [r2, #12]
 8001f46:	f043 0320 	orr.w	r3, r3, #32
 8001f4a:	60d3      	str	r3, [r2, #12]
}
 8001f4c:	4770      	bx	lr

08001f4e <HAL_UART_Receive_IT>:
{
 8001f4e:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f50:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b20      	cmp	r3, #32
 8001f58:	d10d      	bne.n	8001f76 <HAL_UART_Receive_IT+0x28>
    if ((pData == NULL) || (Size == 0U))
 8001f5a:	b171      	cbz	r1, 8001f7a <HAL_UART_Receive_IT+0x2c>
 8001f5c:	b17a      	cbz	r2, 8001f7e <HAL_UART_Receive_IT+0x30>
    __HAL_LOCK(huart);
 8001f5e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d00d      	beq.n	8001f82 <HAL_UART_Receive_IT+0x34>
 8001f66:	2301      	movs	r3, #1
 8001f68:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	6303      	str	r3, [r0, #48]	; 0x30
    return(UART_Start_Receive_IT(huart, pData, Size));
 8001f70:	f7ff ffd2 	bl	8001f18 <UART_Start_Receive_IT>
 8001f74:	e000      	b.n	8001f78 <HAL_UART_Receive_IT+0x2a>
    return HAL_BUSY;
 8001f76:	2002      	movs	r0, #2
}
 8001f78:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 8001f7a:	2001      	movs	r0, #1
 8001f7c:	e7fc      	b.n	8001f78 <HAL_UART_Receive_IT+0x2a>
 8001f7e:	2001      	movs	r0, #1
 8001f80:	e7fa      	b.n	8001f78 <HAL_UART_Receive_IT+0x2a>
    __HAL_LOCK(huart);
 8001f82:	2002      	movs	r0, #2
 8001f84:	e7f8      	b.n	8001f78 <HAL_UART_Receive_IT+0x2a>

08001f86 <_ZN14HardwareSerial9availableEv>:
  _serial.rx_head = _serial.rx_tail;
}

int HardwareSerial::available(void)
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _serial.rx_head - _serial.rx_tail)) % SERIAL_RX_BUFFER_SIZE;
 8001f86:	f8b0 30fc 	ldrh.w	r3, [r0, #252]	; 0xfc
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	3340      	adds	r3, #64	; 0x40
 8001f8e:	f8b0 00f8 	ldrh.w	r0, [r0, #248]	; 0xf8
 8001f92:	1a18      	subs	r0, r3, r0
}
 8001f94:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8001f98:	4770      	bx	lr

08001f9a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_serial.rx_head == _serial.rx_tail) {
 8001f9a:	f8b0 30fc 	ldrh.w	r3, [r0, #252]	; 0xfc
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	f8b0 20f8 	ldrh.w	r2, [r0, #248]	; 0xf8
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d003      	beq.n	8001fb0 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _serial.rx_buff[_serial.rx_tail];
 8001fa8:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
 8001fac:	5c98      	ldrb	r0, [r3, r2]
 8001fae:	4770      	bx	lr
    return -1;
 8001fb0:	f04f 30ff 	mov.w	r0, #4294967295
  }
}
 8001fb4:	4770      	bx	lr

08001fb6 <_ZN14HardwareSerial17availableForWriteEv>:
  }
}

int HardwareSerial::availableForWrite(void)
{
  tx_buffer_index_t head = _serial.tx_head;
 8001fb6:	f890 30fa 	ldrb.w	r3, [r0, #250]	; 0xfa
  tx_buffer_index_t tail = _serial.tx_tail;
 8001fba:	f8b0 00fe 	ldrh.w	r0, [r0, #254]	; 0xfe
 8001fbe:	b2c0      	uxtb	r0, r0

  if (head >= tail) {
 8001fc0:	4283      	cmp	r3, r0
 8001fc2:	d202      	bcs.n	8001fca <_ZN14HardwareSerial17availableForWriteEv+0x14>
    return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  }
  return tail - head - 1;
 8001fc4:	1ac0      	subs	r0, r0, r3
 8001fc6:	3801      	subs	r0, #1
}
 8001fc8:	4770      	bx	lr
    return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 8001fca:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001fce:	4418      	add	r0, r3
 8001fd0:	4770      	bx	lr

08001fd2 <_ZN14HardwareSerial5flushEv>:
void HardwareSerial::flush()
{
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written) {
 8001fd2:	7c03      	ldrb	r3, [r0, #16]
 8001fd4:	b133      	cbz	r3, 8001fe4 <_ZN14HardwareSerial5flushEv+0x12>
    return;
  }

  while ((_serial.tx_head != _serial.tx_tail)) {
 8001fd6:	f8b0 20fa 	ldrh.w	r2, [r0, #250]	; 0xfa
 8001fda:	f8b0 30fe 	ldrh.w	r3, [r0, #254]	; 0xfe
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d1f8      	bne.n	8001fd6 <_ZN14HardwareSerial5flushEv+0x4>
    // nop, the interrupt handler will free up space for us
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished transmission (TXC is set).
}
 8001fe4:	4770      	bx	lr

08001fe6 <_ZN14HardwareSerial5writeEh>:
  /* There is no real error management so just return transfer size requested*/
  return ret;
}

size_t HardwareSerial::write(uint8_t c)
{
 8001fe6:	b500      	push	{lr}
 8001fe8:	b083      	sub	sp, #12
  uint8_t buff = c;
 8001fea:	f88d 1007 	strb.w	r1, [sp, #7]
  return write(&buff, 1);
 8001fee:	6803      	ldr	r3, [r0, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f10d 0107 	add.w	r1, sp, #7
 8001ff8:	4798      	blx	r3
}
 8001ffa:	b003      	add	sp, #12
 8001ffc:	f85d fb04 	ldr.w	pc, [sp], #4

08002000 <_ZN14HardwareSerial16_rx_complete_irqEP8serial_s>:
{
 8002000:	b510      	push	{r4, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	4604      	mov	r4, r0
  if (uart_getc(obj, &c) == 0) {
 8002006:	f10d 0107 	add.w	r1, sp, #7
 800200a:	f001 fbd3 	bl	80037b4 <uart_getc>
 800200e:	b998      	cbnz	r0, 8002038 <_ZN14HardwareSerial16_rx_complete_irqEP8serial_s+0x38>
    rx_buffer_index_t i = (unsigned int)(obj->rx_head + 1) % SERIAL_RX_BUFFER_SIZE;
 8002010:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8002014:	b29b      	uxth	r3, r3
 8002016:	3301      	adds	r3, #1
 8002018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    if (i != obj->rx_tail) {
 800201c:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 8002020:	4293      	cmp	r3, r2
 8002022:	d009      	beq.n	8002038 <_ZN14HardwareSerial16_rx_complete_irqEP8serial_s+0x38>
      obj->rx_buff[obj->rx_head] = c;
 8002024:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002026:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800202a:	b292      	uxth	r2, r2
 800202c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002030:	5488      	strb	r0, [r1, r2]
      obj->rx_head = i;
 8002032:	b29b      	uxth	r3, r3
 8002034:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 8002038:	b002      	add	sp, #8
 800203a:	bd10      	pop	{r4, pc}

0800203c <_ZN14HardwareSerial16_tx_complete_irqEP8serial_s>:
  obj->tx_tail = (obj->tx_tail + obj->tx_size) % SERIAL_TX_BUFFER_SIZE;
 800203c:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8002040:	b29b      	uxth	r3, r3
 8002042:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8002044:	4413      	add	r3, r2
 8002046:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800204a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  if (obj->tx_head != obj->tx_tail) {
 800204e:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
 8002052:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8002056:	b29b      	uxth	r3, r3
 8002058:	429a      	cmp	r2, r3
 800205a:	d101      	bne.n	8002060 <_ZN14HardwareSerial16_tx_complete_irqEP8serial_s+0x24>
  return 0;
 800205c:	2000      	movs	r0, #0
}
 800205e:	4770      	bx	lr
{
 8002060:	b500      	push	{lr}
 8002062:	b083      	sub	sp, #12
    remaining_data = (SERIAL_TX_BUFFER_SIZE + obj->tx_head - obj->tx_tail)
 8002064:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8002068:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 800206c:	b292      	uxth	r2, r2
 800206e:	1a9b      	subs	r3, r3, r2
                     % SERIAL_TX_BUFFER_SIZE;
 8002070:	425a      	negs	r2, r3
 8002072:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002076:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800207a:	bf58      	it	pl
 800207c:	4253      	negpl	r3, r2
    remaining_data = (SERIAL_TX_BUFFER_SIZE + obj->tx_head - obj->tx_tail)
 800207e:	9300      	str	r3, [sp, #0]
                       (size_t)(SERIAL_TX_BUFFER_SIZE - obj->tx_tail));
 8002080:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 8002084:	b292      	uxth	r2, r2
 8002086:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 800208a:	9201      	str	r2, [sp, #4]
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 800208c:	4293      	cmp	r3, r2
 800208e:	d80a      	bhi.n	80020a6 <_ZN14HardwareSerial16_tx_complete_irqEP8serial_s+0x6a>
	return __b;
      return __a;
 8002090:	466b      	mov	r3, sp
    obj->tx_size = min(remaining_data,
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	66c2      	str	r2, [r0, #108]	; 0x6c
    uart_attach_tx_callback(obj, _tx_complete_irq, obj->tx_size);
 8002096:	4905      	ldr	r1, [pc, #20]	; (80020ac <_ZN14HardwareSerial16_tx_complete_irqEP8serial_s+0x70>)
 8002098:	f001 fbca 	bl	8003830 <uart_attach_tx_callback>
    return -1;
 800209c:	f04f 30ff 	mov.w	r0, #4294967295
}
 80020a0:	b003      	add	sp, #12
 80020a2:	f85d fb04 	ldr.w	pc, [sp], #4
	return __b;
 80020a6:	ab01      	add	r3, sp, #4
 80020a8:	e7f3      	b.n	8002092 <_ZN14HardwareSerial16_tx_complete_irqEP8serial_s+0x56>
 80020aa:	bf00      	nop
 80020ac:	0800203d 	.word	0x0800203d

080020b0 <_ZN14HardwareSerial4initE7PinNameS0_>:
  if (_rx == _tx) {
 80020b0:	4291      	cmp	r1, r2
 80020b2:	d015      	beq.n	80020e0 <_ZN14HardwareSerial4initE7PinNameS0_+0x30>
    _serial.pin_rx = _rx;
 80020b4:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
  _serial.pin_tx = _tx;
 80020b8:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
  _serial.rx_buff = _rx_buffer;
 80020bc:	f100 0311 	add.w	r3, r0, #17
 80020c0:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
  _serial.rx_head = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
  _serial.rx_tail = 0;
 80020ca:	f8a0 30f8 	strh.w	r3, [r0, #248]	; 0xf8
  _serial.tx_buff = _tx_buffer;
 80020ce:	f100 0251 	add.w	r2, r0, #81	; 0x51
 80020d2:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4
  _serial.tx_head = 0;
 80020d6:	f8a0 30fa 	strh.w	r3, [r0, #250]	; 0xfa
  _serial.tx_tail = 0;
 80020da:	f8a0 30fe 	strh.w	r3, [r0, #254]	; 0xfe
}
 80020de:	4770      	bx	lr
    _serial.pin_rx = NC;
 80020e0:	f04f 33ff 	mov.w	r3, #4294967295
 80020e4:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
 80020e8:	e7e6      	b.n	80020b8 <_ZN14HardwareSerial4initE7PinNameS0_+0x8>
	...

080020ec <_ZN14HardwareSerialC1E7PinNameS0_>:
HardwareSerial::HardwareSerial(PinName _rx, PinName _tx)
 80020ec:	b510      	push	{r4, lr}
 80020ee:	4604      	mov	r4, r0
    void setWriteError(int err = 1)
    {
      write_error = err;
    }
  public:
    Print() : write_error(0) {}
 80020f0:	2300      	movs	r3, #0
 80020f2:	6043      	str	r3, [r0, #4]
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream()
    {
      _timeout = 1000;
 80020f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020f8:	6083      	str	r3, [r0, #8]
 80020fa:	4b03      	ldr	r3, [pc, #12]	; (8002108 <_ZN14HardwareSerialC1E7PinNameS0_+0x1c>)
 80020fc:	6003      	str	r3, [r0, #0]
  init(_rx, _tx);
 80020fe:	f7ff ffd7 	bl	80020b0 <_ZN14HardwareSerial4initE7PinNameS0_>
}
 8002102:	4620      	mov	r0, r4
 8002104:	bd10      	pop	{r4, pc}
 8002106:	bf00      	nop
 8002108:	08003b6c 	.word	0x08003b6c

0800210c <_ZNK14HardwareSerial12isHalfDuplexEv>:
  _serial.pin_rx = NC;
}

bool HardwareSerial::isHalfDuplex(void) const
{
  return _serial.pin_rx == NC;
 800210c:	f8d0 00e8 	ldr.w	r0, [r0, #232]	; 0xe8
}
 8002110:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002114:	bf14      	ite	ne
 8002116:	2000      	movne	r0, #0
 8002118:	2001      	moveq	r0, #1
 800211a:	4770      	bx	lr

0800211c <_ZN14HardwareSerial5writeEPKhj>:
{
 800211c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	4604      	mov	r4, r0
 8002124:	460f      	mov	r7, r1
 8002126:	4690      	mov	r8, r2
  size_t available = availableForWrite();
 8002128:	6803      	ldr	r3, [r0, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	4798      	blx	r3
 800212e:	9001      	str	r0, [sp, #4]
  size_t available_till_buffer_end = SERIAL_TX_BUFFER_SIZE - _serial.tx_head;
 8002130:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
 8002134:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002138:	9300      	str	r3, [sp, #0]
  _written = true;
 800213a:	2301      	movs	r3, #1
 800213c:	7423      	strb	r3, [r4, #16]
  if (isHalfDuplex()) {
 800213e:	4620      	mov	r0, r4
 8002140:	f7ff ffe4 	bl	800210c <_ZNK14HardwareSerial12isHalfDuplexEv>
 8002144:	b110      	cbz	r0, 800214c <_ZN14HardwareSerial5writeEPKhj+0x30>
    if (_rx_enabled) {
 8002146:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800214a:	b93b      	cbnz	r3, 800215c <_ZN14HardwareSerial5writeEPKhj+0x40>
  while (!availableForWrite()) {
 800214c:	6823      	ldr	r3, [r4, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	4620      	mov	r0, r4
 8002152:	4798      	blx	r3
 8002154:	2800      	cmp	r0, #0
 8002156:	d0f9      	beq.n	800214c <_ZN14HardwareSerial5writeEPKhj+0x30>
 8002158:	4646      	mov	r6, r8
 800215a:	e01e      	b.n	800219a <_ZN14HardwareSerial5writeEPKhj+0x7e>
      _rx_enabled = false;
 800215c:	2300      	movs	r3, #0
 800215e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
      uart_enable_tx(&_serial);
 8002162:	f104 0094 	add.w	r0, r4, #148	; 0x94
 8002166:	f001 fb81 	bl	800386c <uart_enable_tx>
 800216a:	e7ef      	b.n	800214c <_ZN14HardwareSerial5writeEPKhj+0x30>
      if (__b < __a)
 800216c:	9a01      	ldr	r2, [sp, #4]
 800216e:	4293      	cmp	r3, r2
 8002170:	d337      	bcc.n	80021e2 <_ZN14HardwareSerial5writeEPKhj+0xc6>
      return __a;
 8002172:	ab01      	add	r3, sp, #4
    size_intermediate = min(available, available_till_buffer_end);
 8002174:	681d      	ldr	r5, [r3, #0]
    write(buffer, size_intermediate);
 8002176:	6823      	ldr	r3, [r4, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	462a      	mov	r2, r5
 800217c:	4639      	mov	r1, r7
 800217e:	4620      	mov	r0, r4
 8002180:	4798      	blx	r3
    size -= size_intermediate;
 8002182:	1b76      	subs	r6, r6, r5
    buffer += size_intermediate;
 8002184:	442f      	add	r7, r5
    available = availableForWrite();
 8002186:	6823      	ldr	r3, [r4, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	4620      	mov	r0, r4
 800218c:	4798      	blx	r3
 800218e:	9001      	str	r0, [sp, #4]
    available_till_buffer_end = SERIAL_TX_BUFFER_SIZE - _serial.tx_head;
 8002190:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
 8002194:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002198:	9300      	str	r3, [sp, #0]
  while ((size > available_till_buffer_end) || (size > available)) {
 800219a:	9b00      	ldr	r3, [sp, #0]
 800219c:	42b3      	cmp	r3, r6
 800219e:	d3e5      	bcc.n	800216c <_ZN14HardwareSerial5writeEPKhj+0x50>
 80021a0:	9a01      	ldr	r2, [sp, #4]
 80021a2:	42b2      	cmp	r2, r6
 80021a4:	d3e2      	bcc.n	800216c <_ZN14HardwareSerial5writeEPKhj+0x50>
  if (_serial.tx_head + size <= SERIAL_TX_BUFFER_SIZE) {
 80021a6:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
 80021aa:	199a      	adds	r2, r3, r6
 80021ac:	2a40      	cmp	r2, #64	; 0x40
 80021ae:	d81a      	bhi.n	80021e6 <_ZN14HardwareSerial5writeEPKhj+0xca>
    memcpy(&_serial.tx_buff[_serial.tx_head], buffer, size);
 80021b0:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 80021b4:	4632      	mov	r2, r6
 80021b6:	4639      	mov	r1, r7
 80021b8:	4418      	add	r0, r3
 80021ba:	f001 fc25 	bl	8003a08 <memcpy>
    size_intermediate = size;
 80021be:	4635      	mov	r5, r6
  _serial.tx_head = (_serial.tx_head + size) % SERIAL_TX_BUFFER_SIZE;
 80021c0:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
 80021c4:	441e      	add	r6, r3
 80021c6:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 80021ca:	f8a4 60fa 	strh.w	r6, [r4, #250]	; 0xfa
  if (!serial_tx_active(&_serial)) {
 80021ce:	f104 0694 	add.w	r6, r4, #148	; 0x94
 80021d2:	4630      	mov	r0, r6
 80021d4:	f001 fadc 	bl	8003790 <serial_tx_active>
 80021d8:	b1a8      	cbz	r0, 8002206 <_ZN14HardwareSerial5writeEPKhj+0xea>
}
 80021da:	4640      	mov	r0, r8
 80021dc:	b002      	add	sp, #8
 80021de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __b;
 80021e2:	466b      	mov	r3, sp
 80021e4:	e7c6      	b.n	8002174 <_ZN14HardwareSerial5writeEPKhj+0x58>
    size_intermediate = SERIAL_TX_BUFFER_SIZE - _serial.tx_head;
 80021e6:	f1c3 0540 	rsb	r5, r3, #64	; 0x40
    memcpy(&_serial.tx_buff[_serial.tx_head], buffer, size_intermediate);
 80021ea:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 80021ee:	462a      	mov	r2, r5
 80021f0:	4639      	mov	r1, r7
 80021f2:	4418      	add	r0, r3
 80021f4:	f001 fc08 	bl	8003a08 <memcpy>
    memcpy(&_serial.tx_buff[0], buffer + size_intermediate,
 80021f8:	1b72      	subs	r2, r6, r5
 80021fa:	1979      	adds	r1, r7, r5
 80021fc:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 8002200:	f001 fc02 	bl	8003a08 <memcpy>
 8002204:	e7dc      	b.n	80021c0 <_ZN14HardwareSerial5writeEPKhj+0xa4>
    _serial.tx_size = size_intermediate;
 8002206:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    uart_attach_tx_callback(&_serial, _tx_complete_irq, size_intermediate);
 800220a:	462a      	mov	r2, r5
 800220c:	4902      	ldr	r1, [pc, #8]	; (8002218 <_ZN14HardwareSerial5writeEPKhj+0xfc>)
 800220e:	4630      	mov	r0, r6
 8002210:	f001 fb0e 	bl	8003830 <uart_attach_tx_callback>
 8002214:	e7e1      	b.n	80021da <_ZN14HardwareSerial5writeEPKhj+0xbe>
 8002216:	bf00      	nop
 8002218:	0800203d 	.word	0x0800203d

0800221c <_ZN14HardwareSerial18enableHalfDuplexRxEv>:

void HardwareSerial::enableHalfDuplexRx(void)
{
 800221c:	b510      	push	{r4, lr}
 800221e:	4604      	mov	r4, r0
  if (isHalfDuplex()) {
 8002220:	f7ff ff74 	bl	800210c <_ZNK14HardwareSerial12isHalfDuplexEv>
 8002224:	b130      	cbz	r0, 8002234 <_ZN14HardwareSerial18enableHalfDuplexRxEv+0x18>
    // In half-duplex mode we have to wait for all TX characters to
    // be transmitted before we can receive data.
    flush();
 8002226:	6823      	ldr	r3, [r4, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	4620      	mov	r0, r4
 800222c:	4798      	blx	r3
    if (!_rx_enabled) {
 800222e:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8002232:	b103      	cbz	r3, 8002236 <_ZN14HardwareSerial18enableHalfDuplexRxEv+0x1a>
      _rx_enabled = true;
      uart_enable_rx(&_serial);
    }
  }
}
 8002234:	bd10      	pop	{r4, pc}
      _rx_enabled = true;
 8002236:	2301      	movs	r3, #1
 8002238:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
      uart_enable_rx(&_serial);
 800223c:	f104 0094 	add.w	r0, r4, #148	; 0x94
 8002240:	f001 fb26 	bl	8003890 <uart_enable_rx>
}
 8002244:	e7f6      	b.n	8002234 <_ZN14HardwareSerial18enableHalfDuplexRxEv+0x18>
	...

08002248 <_ZN14HardwareSerial5beginEmh>:
{
 8002248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800224c:	b083      	sub	sp, #12
 800224e:	4604      	mov	r4, r0
 8002250:	460e      	mov	r6, r1
  _baud = baud;
 8002252:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
  _config = config;
 8002256:	f880 2105 	strb.w	r2, [r0, #261]	; 0x105
  switch (config & 0x07) {
 800225a:	f002 0307 	and.w	r3, r2, #7
 800225e:	2b04      	cmp	r3, #4
 8002260:	d011      	beq.n	8002286 <_ZN14HardwareSerial5beginEmh+0x3e>
 8002262:	2b06      	cmp	r3, #6
 8002264:	d011      	beq.n	800228a <_ZN14HardwareSerial5beginEmh+0x42>
 8002266:	2b02      	cmp	r3, #2
 8002268:	d00b      	beq.n	8002282 <_ZN14HardwareSerial5beginEmh+0x3a>
      databits = 0;
 800226a:	2500      	movs	r5, #0
  if ((config & 0x30) == 0x30) {
 800226c:	f002 0330 	and.w	r3, r2, #48	; 0x30
 8002270:	2b30      	cmp	r3, #48	; 0x30
 8002272:	d00c      	beq.n	800228e <_ZN14HardwareSerial5beginEmh+0x46>
  } else if ((config & 0x20) == 0x20) {
 8002274:	f012 0f20 	tst.w	r2, #32
 8002278:	d01b      	beq.n	80022b2 <_ZN14HardwareSerial5beginEmh+0x6a>
    databits++;
 800227a:	3501      	adds	r5, #1
    parity = UART_PARITY_EVEN;
 800227c:	f44f 6880 	mov.w	r8, #1024	; 0x400
 8002280:	e008      	b.n	8002294 <_ZN14HardwareSerial5beginEmh+0x4c>
  switch (config & 0x07) {
 8002282:	2506      	movs	r5, #6
 8002284:	e7f2      	b.n	800226c <_ZN14HardwareSerial5beginEmh+0x24>
      databits = 7;
 8002286:	2507      	movs	r5, #7
 8002288:	e7f0      	b.n	800226c <_ZN14HardwareSerial5beginEmh+0x24>
      databits = 8;
 800228a:	2508      	movs	r5, #8
 800228c:	e7ee      	b.n	800226c <_ZN14HardwareSerial5beginEmh+0x24>
    databits++;
 800228e:	3501      	adds	r5, #1
    parity = UART_PARITY_ODD;
 8002290:	f44f 68c0 	mov.w	r8, #1536	; 0x600
  if ((config & 0x08) == 0x08) {
 8002294:	f012 0f08 	tst.w	r2, #8
 8002298:	d00e      	beq.n	80022b8 <_ZN14HardwareSerial5beginEmh+0x70>
    stopbits = UART_STOPBITS_2;
 800229a:	f44f 5900 	mov.w	r9, #8192	; 0x2000
  switch (databits) {
 800229e:	2d08      	cmp	r5, #8
 80022a0:	d00d      	beq.n	80022be <_ZN14HardwareSerial5beginEmh+0x76>
 80022a2:	2d09      	cmp	r5, #9
 80022a4:	d00d      	beq.n	80022c2 <_ZN14HardwareSerial5beginEmh+0x7a>
      Error_Handler();
 80022a6:	f240 11a1 	movw	r1, #417	; 0x1a1
 80022aa:	4811      	ldr	r0, [pc, #68]	; (80022f0 <_ZN14HardwareSerial5beginEmh+0xa8>)
 80022ac:	f001 f87f 	bl	80033ae <_Error_Handler>
      break;
 80022b0:	e009      	b.n	80022c6 <_ZN14HardwareSerial5beginEmh+0x7e>
    parity = UART_PARITY_NONE;
 80022b2:	f04f 0800 	mov.w	r8, #0
 80022b6:	e7ed      	b.n	8002294 <_ZN14HardwareSerial5beginEmh+0x4c>
    stopbits = UART_STOPBITS_1;
 80022b8:	f04f 0900 	mov.w	r9, #0
 80022bc:	e7ef      	b.n	800229e <_ZN14HardwareSerial5beginEmh+0x56>
  switch (databits) {
 80022be:	2500      	movs	r5, #0
 80022c0:	e001      	b.n	80022c6 <_ZN14HardwareSerial5beginEmh+0x7e>
      databits = UART_WORDLENGTH_9B;
 80022c2:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  uart_init(&_serial, (uint32_t)baud, databits, parity, stopbits);
 80022c6:	f104 0794 	add.w	r7, r4, #148	; 0x94
 80022ca:	f8cd 9000 	str.w	r9, [sp]
 80022ce:	4643      	mov	r3, r8
 80022d0:	462a      	mov	r2, r5
 80022d2:	4631      	mov	r1, r6
 80022d4:	4638      	mov	r0, r7
 80022d6:	f001 f993 	bl	8003600 <uart_init>
  enableHalfDuplexRx();
 80022da:	4620      	mov	r0, r4
 80022dc:	f7ff ff9e 	bl	800221c <_ZN14HardwareSerial18enableHalfDuplexRxEv>
  uart_attach_rx_callback(&_serial, _rx_complete_irq);
 80022e0:	4904      	ldr	r1, [pc, #16]	; (80022f4 <_ZN14HardwareSerial5beginEmh+0xac>)
 80022e2:	4638      	mov	r0, r7
 80022e4:	f001 fa84 	bl	80037f0 <uart_attach_rx_callback>
}
 80022e8:	b003      	add	sp, #12
 80022ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80022ee:	bf00      	nop
 80022f0:	08003af8 	.word	0x08003af8
 80022f4:	08002001 	.word	0x08002001

080022f8 <_ZN14HardwareSerial4readEv>:
{
 80022f8:	b510      	push	{r4, lr}
 80022fa:	4604      	mov	r4, r0
  enableHalfDuplexRx();
 80022fc:	f7ff ff8e 	bl	800221c <_ZN14HardwareSerial18enableHalfDuplexRxEv>
  if (_serial.rx_head == _serial.rx_tail) {
 8002300:	f8b4 20fc 	ldrh.w	r2, [r4, #252]	; 0xfc
 8002304:	b292      	uxth	r2, r2
 8002306:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800230a:	429a      	cmp	r2, r3
 800230c:	d008      	beq.n	8002320 <_ZN14HardwareSerial4readEv+0x28>
    unsigned char c = _serial.rx_buff[_serial.rx_tail];
 800230e:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
 8002312:	5cd0      	ldrb	r0, [r2, r3]
    _serial.rx_tail = (rx_buffer_index_t)(_serial.rx_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 8002314:	3301      	adds	r3, #1
 8002316:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800231a:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
}
 800231e:	bd10      	pop	{r4, pc}
    return -1;
 8002320:	f04f 30ff 	mov.w	r0, #4294967295
 8002324:	e7fb      	b.n	800231e <_ZN14HardwareSerial4readEv+0x26>

08002326 <_ZN13HardwareTimer10getChannelEm>:
  */
int HardwareTimer::getChannel(uint32_t channel)
{
  uint32_t return_value;

  switch (channel) {
 8002326:	3901      	subs	r1, #1
 8002328:	2903      	cmp	r1, #3
 800232a:	d809      	bhi.n	8002340 <_ZN13HardwareTimer10getChannelEm+0x1a>
 800232c:	e8df f001 	tbb	[pc, r1]
 8002330:	06040b02 	.word	0x06040b02
      break;
    case 3:
      return_value = TIM_CHANNEL_3;
      break;
    case 4:
      return_value = TIM_CHANNEL_4;
 8002334:	2000      	movs	r0, #0
 8002336:	4770      	bx	lr
      return_value = TIM_CHANNEL_3;
 8002338:	2008      	movs	r0, #8
      break;
 800233a:	4770      	bx	lr
      return_value = TIM_CHANNEL_4;
 800233c:	200c      	movs	r0, #12
      break;
 800233e:	4770      	bx	lr
    default:
      return_value = -1;
 8002340:	f04f 30ff 	mov.w	r0, #4294967295
 8002344:	4770      	bx	lr
      return_value = TIM_CHANNEL_2;
 8002346:	2004      	movs	r0, #4
  }
  return return_value;
}
 8002348:	4770      	bx	lr
	...

0800234c <_ZN13HardwareTimer12getLLChannelEm>:
  */
int HardwareTimer::getLLChannel(uint32_t channel)
{
  uint32_t return_value;
#if defined(TIM_CCER_CC1NE)
  if (isComplementaryChannel[channel - 1]) {
 800234c:	1e4b      	subs	r3, r1, #1
 800234e:	5cc3      	ldrb	r3, [r0, r3]
 8002350:	b15b      	cbz	r3, 800236a <_ZN13HardwareTimer12getLLChannelEm+0x1e>
    // Complementary channel
    switch (channel) {
 8002352:	2902      	cmp	r1, #2
 8002354:	d021      	beq.n	800239a <_ZN13HardwareTimer12getLLChannelEm+0x4e>
 8002356:	2903      	cmp	r1, #3
 8002358:	d021      	beq.n	800239e <_ZN13HardwareTimer12getLLChannelEm+0x52>
 800235a:	2901      	cmp	r1, #1
 800235c:	d003      	beq.n	8002366 <_ZN13HardwareTimer12getLLChannelEm+0x1a>
      case 4:
        return_value = LL_TIM_CHANNEL_CH4N;
        break;
#endif
      default:
        return_value = -1;
 800235e:	f04f 31ff 	mov.w	r1, #4294967295
      default:
        return_value = -1;
    }
  }
  return return_value;
}
 8002362:	4608      	mov	r0, r1
 8002364:	4770      	bx	lr
    switch (channel) {
 8002366:	2104      	movs	r1, #4
 8002368:	e7fb      	b.n	8002362 <_ZN13HardwareTimer12getLLChannelEm+0x16>
    switch (channel) {
 800236a:	1e4b      	subs	r3, r1, #1
 800236c:	2b03      	cmp	r3, #3
 800236e:	d811      	bhi.n	8002394 <_ZN13HardwareTimer12getLLChannelEm+0x48>
 8002370:	a201      	add	r2, pc, #4	; (adr r2, 8002378 <_ZN13HardwareTimer12getLLChannelEm+0x2c>)
 8002372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002376:	bf00      	nop
 8002378:	08002363 	.word	0x08002363
 800237c:	080023a5 	.word	0x080023a5
 8002380:	08002389 	.word	0x08002389
 8002384:	0800238f 	.word	0x0800238f
        return_value = LL_TIM_CHANNEL_CH3;
 8002388:	f44f 7180 	mov.w	r1, #256	; 0x100
        break;
 800238c:	e7e9      	b.n	8002362 <_ZN13HardwareTimer12getLLChannelEm+0x16>
        return_value = LL_TIM_CHANNEL_CH4;
 800238e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
        break;
 8002392:	e7e6      	b.n	8002362 <_ZN13HardwareTimer12getLLChannelEm+0x16>
        return_value = -1;
 8002394:	f04f 31ff 	mov.w	r1, #4294967295
 8002398:	e7e3      	b.n	8002362 <_ZN13HardwareTimer12getLLChannelEm+0x16>
        return_value = LL_TIM_CHANNEL_CH2N;
 800239a:	2140      	movs	r1, #64	; 0x40
 800239c:	e7e1      	b.n	8002362 <_ZN13HardwareTimer12getLLChannelEm+0x16>
        return_value = LL_TIM_CHANNEL_CH3N;
 800239e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023a2:	e7de      	b.n	8002362 <_ZN13HardwareTimer12getLLChannelEm+0x16>
        return_value = LL_TIM_CHANNEL_CH2;
 80023a4:	2110      	movs	r1, #16
 80023a6:	e7dc      	b.n	8002362 <_ZN13HardwareTimer12getLLChannelEm+0x16>

080023a8 <_ZN13HardwareTimer5getITEm>:
  */
int HardwareTimer::getIT(uint32_t channel)
{
  uint32_t return_value;

  switch (channel) {
 80023a8:	3901      	subs	r1, #1
 80023aa:	2903      	cmp	r1, #3
 80023ac:	d809      	bhi.n	80023c2 <_ZN13HardwareTimer5getITEm+0x1a>
 80023ae:	e8df f001 	tbb	[pc, r1]
 80023b2:	0b02      	.short	0x0b02
 80023b4:	0604      	.short	0x0604
      break;
    case 3:
      return_value = TIM_IT_CC3;
      break;
    case 4:
      return_value = TIM_IT_CC4;
 80023b6:	2002      	movs	r0, #2
 80023b8:	4770      	bx	lr
      return_value = TIM_IT_CC3;
 80023ba:	2008      	movs	r0, #8
      break;
 80023bc:	4770      	bx	lr
      return_value = TIM_IT_CC4;
 80023be:	2010      	movs	r0, #16
      break;
 80023c0:	4770      	bx	lr
    default:
      return_value = -1;
 80023c2:	f04f 30ff 	mov.w	r0, #4294967295
 80023c6:	4770      	bx	lr
      return_value = TIM_IT_CC2;
 80023c8:	2004      	movs	r0, #4
  }
  return return_value;
}
 80023ca:	4770      	bx	lr

080023cc <_ZN13HardwareTimer20getAssociatedChannelEm>:
  * @retval HAL channel. return -1 if arduino channel is invalid
  */
int HardwareTimer::getAssociatedChannel(uint32_t channel)
{
  int timAssociatedInputChannel = -1;
  switch (channel) {
 80023cc:	3901      	subs	r1, #1
 80023ce:	2903      	cmp	r1, #3
 80023d0:	d803      	bhi.n	80023da <_ZN13HardwareTimer20getAssociatedChannelEm+0xe>
 80023d2:	e8df f001 	tbb	[pc, r1]
 80023d6:	050b      	.short	0x050b
 80023d8:	0907      	.short	0x0907
      break;
    case 3:
      timAssociatedInputChannel = 4;
      break;
    case 4:
      timAssociatedInputChannel = 3;
 80023da:	f04f 30ff 	mov.w	r0, #4294967295
 80023de:	4770      	bx	lr
      timAssociatedInputChannel = 1;
 80023e0:	2001      	movs	r0, #1
      break;
 80023e2:	4770      	bx	lr
      timAssociatedInputChannel = 4;
 80023e4:	2004      	movs	r0, #4
      break;
 80023e6:	4770      	bx	lr
      timAssociatedInputChannel = 3;
 80023e8:	2003      	movs	r0, #3
      break;
 80023ea:	4770      	bx	lr
      timAssociatedInputChannel = 2;
 80023ec:	2002      	movs	r0, #2
    default:
      break;
  }
  return timAssociatedInputChannel;
}
 80023ee:	4770      	bx	lr

080023f0 <_ZN13HardwareTimer13resumeChannelEm>:
  * @brief  Configure specified channel and resume/start timer
  * @param  Arduino channel [1..4]
  * @retval None
  */
void HardwareTimer::resumeChannel(uint32_t channel)
{
 80023f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023f4:	4604      	mov	r4, r0
 80023f6:	460d      	mov	r5, r1
  int timChannel = getChannel(channel);
 80023f8:	f7ff ff95 	bl	8002326 <_ZN13HardwareTimer10getChannelEm>
 80023fc:	4607      	mov	r7, r0
  int timAssociatedInputChannel;
  if (timChannel == -1) {
 80023fe:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002402:	d02b      	beq.n	800245c <_ZN13HardwareTimer13resumeChannelEm+0x6c>
    Error_Handler();
  }

  int interrupt = getIT(channel);
 8002404:	4629      	mov	r1, r5
 8002406:	4620      	mov	r0, r4
 8002408:	f7ff ffce 	bl	80023a8 <_ZN13HardwareTimer5getITEm>
 800240c:	4606      	mov	r6, r0
  if (interrupt == -1) {
 800240e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002412:	d029      	beq.n	8002468 <_ZN13HardwareTimer13resumeChannelEm+0x78>
    Error_Handler();
  }

  int LLChannel = getLLChannel(channel);
 8002414:	4629      	mov	r1, r5
 8002416:	4620      	mov	r0, r4
 8002418:	f7ff ff98 	bl	800234c <_ZN13HardwareTimer12getLLChannelEm>
  if (LLChannel == -1) {
 800241c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002420:	d028      	beq.n	8002474 <_ZN13HardwareTimer13resumeChannelEm+0x84>
    Error_Handler();
  }

  // Clear flag and enable IT
  if (callbacks[channel]) {
 8002422:	f105 0806 	add.w	r8, r5, #6
 8002426:	eb04 1808 	add.w	r8, r4, r8, lsl #4
    bool _M_empty() const { return !_M_manager; }
 800242a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800242e:	b133      	cbz	r3, 800243e <_ZN13HardwareTimer13resumeChannelEm+0x4e>
    __HAL_TIM_CLEAR_FLAG(&(_timerObj.handle), interrupt);
 8002430:	6923      	ldr	r3, [r4, #16]
 8002432:	43f2      	mvns	r2, r6
 8002434:	611a      	str	r2, [r3, #16]
    __HAL_TIM_ENABLE_IT(&(_timerObj.handle), interrupt);
 8002436:	6923      	ldr	r3, [r4, #16]
 8002438:	68d8      	ldr	r0, [r3, #12]
 800243a:	4306      	orrs	r6, r0
 800243c:	60de      	str	r6, [r3, #12]
  }

  switch (_ChannelMode[channel - 1]) {
 800243e:	1e6a      	subs	r2, r5, #1
 8002440:	eb04 0342 	add.w	r3, r4, r2, lsl #1
 8002444:	889b      	ldrh	r3, [r3, #4]
 8002446:	2b0c      	cmp	r3, #12
 8002448:	d85c      	bhi.n	8002504 <_ZN13HardwareTimer13resumeChannelEm+0x114>
 800244a:	e8df f003 	tbb	[pc, r3]
 800244e:	5d5d      	.short	0x5d5d
 8002450:	19272727 	.word	0x19272727
 8002454:	56272719 	.word	0x56272719
 8002458:	5656      	.short	0x5656
 800245a:	35          	.byte	0x35
 800245b:	00          	.byte	0x00
    Error_Handler();
 800245c:	f240 1179 	movw	r1, #377	; 0x179
 8002460:	482e      	ldr	r0, [pc, #184]	; (800251c <_ZN13HardwareTimer13resumeChannelEm+0x12c>)
 8002462:	f000 ffa4 	bl	80033ae <_Error_Handler>
 8002466:	e7cd      	b.n	8002404 <_ZN13HardwareTimer13resumeChannelEm+0x14>
    Error_Handler();
 8002468:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 800246c:	482b      	ldr	r0, [pc, #172]	; (800251c <_ZN13HardwareTimer13resumeChannelEm+0x12c>)
 800246e:	f000 ff9e 	bl	80033ae <_Error_Handler>
 8002472:	e7cf      	b.n	8002414 <_ZN13HardwareTimer13resumeChannelEm+0x24>
    Error_Handler();
 8002474:	f240 1183 	movw	r1, #387	; 0x183
 8002478:	4828      	ldr	r0, [pc, #160]	; (800251c <_ZN13HardwareTimer13resumeChannelEm+0x12c>)
 800247a:	f000 ff98 	bl	80033ae <_Error_Handler>
 800247e:	e7d0      	b.n	8002422 <_ZN13HardwareTimer13resumeChannelEm+0x32>
    case TIMER_OUTPUT_COMPARE_PWM1:
    case TIMER_OUTPUT_COMPARE_PWM2: {
#if defined(TIM_CCER_CC1NE)
        if (isComplementaryChannel[channel - 1]) {
 8002480:	5ca3      	ldrb	r3, [r4, r2]
 8002482:	b12b      	cbz	r3, 8002490 <_ZN13HardwareTimer13resumeChannelEm+0xa0>
          HAL_TIMEx_PWMN_Start(&(_timerObj.handle), timChannel);
 8002484:	4639      	mov	r1, r7
 8002486:	f104 0010 	add.w	r0, r4, #16
 800248a:	f7ff f9ff 	bl	800188c <HAL_TIMEx_PWMN_Start>
 800248e:	e039      	b.n	8002504 <_ZN13HardwareTimer13resumeChannelEm+0x114>
        } else
#endif
        {
          HAL_TIM_PWM_Start(&(_timerObj.handle), timChannel);
 8002490:	4639      	mov	r1, r7
 8002492:	f104 0010 	add.w	r0, r4, #16
 8002496:	f7ff f889 	bl	80015ac <HAL_TIM_PWM_Start>
 800249a:	e033      	b.n	8002504 <_ZN13HardwareTimer13resumeChannelEm+0x114>
    case TIMER_OUTPUT_COMPARE_INACTIVE:
    case TIMER_OUTPUT_COMPARE_TOGGLE:
    case TIMER_OUTPUT_COMPARE_FORCED_ACTIVE:
    case TIMER_OUTPUT_COMPARE_FORCED_INACTIVE: {
#if defined(TIM_CCER_CC1NE)
        if (isComplementaryChannel[channel - 1]) {
 800249c:	5ca3      	ldrb	r3, [r4, r2]
 800249e:	b12b      	cbz	r3, 80024ac <_ZN13HardwareTimer13resumeChannelEm+0xbc>
          HAL_TIMEx_OCN_Start(&(_timerObj.handle), timChannel);
 80024a0:	4639      	mov	r1, r7
 80024a2:	f104 0010 	add.w	r0, r4, #16
 80024a6:	f7ff f987 	bl	80017b8 <HAL_TIMEx_OCN_Start>
 80024aa:	e02b      	b.n	8002504 <_ZN13HardwareTimer13resumeChannelEm+0x114>
        } else
#endif
        {
          HAL_TIM_OC_Start(&(_timerObj.handle), timChannel);
 80024ac:	4639      	mov	r1, r7
 80024ae:	f104 0010 	add.w	r0, r4, #16
 80024b2:	f7ff f80d 	bl	80014d0 <HAL_TIM_OC_Start>
 80024b6:	e025      	b.n	8002504 <_ZN13HardwareTimer13resumeChannelEm+0x114>
        }
      }
      break;
    case TIMER_INPUT_FREQ_DUTY_MEASUREMENT: {
        HAL_TIM_IC_Start(&(_timerObj.handle), timChannel);
 80024b8:	4639      	mov	r1, r7
 80024ba:	f104 0010 	add.w	r0, r4, #16
 80024be:	f7ff f8e3 	bl	8001688 <HAL_TIM_IC_Start>

        // Enable 2nd associated channel
        timAssociatedInputChannel = getAssociatedChannel(channel);
 80024c2:	4629      	mov	r1, r5
 80024c4:	4620      	mov	r0, r4
 80024c6:	f7ff ff81 	bl	80023cc <_ZN13HardwareTimer20getAssociatedChannelEm>
 80024ca:	4605      	mov	r5, r0
        LL_TIM_CC_EnableChannel(_timerObj.handle.Instance, getLLChannel(timAssociatedInputChannel));
 80024cc:	6926      	ldr	r6, [r4, #16]
 80024ce:	4601      	mov	r1, r0
 80024d0:	4620      	mov	r0, r4
 80024d2:	f7ff ff3b 	bl	800234c <_ZN13HardwareTimer12getLLChannelEm>
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  SET_BIT(TIMx->CCER, Channels);
 80024d6:	6a33      	ldr	r3, [r6, #32]
 80024d8:	4318      	orrs	r0, r3
 80024da:	6230      	str	r0, [r6, #32]
 80024dc:	f8d8 3008 	ldr.w	r3, [r8, #8]
        if (callbacks[channel]) {
 80024e0:	b183      	cbz	r3, 8002504 <_ZN13HardwareTimer13resumeChannelEm+0x114>
          __HAL_TIM_CLEAR_FLAG(&(_timerObj.handle), getIT(timAssociatedInputChannel));
 80024e2:	4629      	mov	r1, r5
 80024e4:	4620      	mov	r0, r4
 80024e6:	f7ff ff5f 	bl	80023a8 <_ZN13HardwareTimer5getITEm>
 80024ea:	6923      	ldr	r3, [r4, #16]
 80024ec:	43c2      	mvns	r2, r0
 80024ee:	611a      	str	r2, [r3, #16]
          __HAL_TIM_ENABLE_IT(&(_timerObj.handle), getIT(timAssociatedInputChannel));
 80024f0:	6923      	ldr	r3, [r4, #16]
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	4310      	orrs	r0, r2
 80024f6:	60d8      	str	r0, [r3, #12]
 80024f8:	e004      	b.n	8002504 <_ZN13HardwareTimer13resumeChannelEm+0x114>
      }
      break;
    case TIMER_INPUT_CAPTURE_RISING:
    case TIMER_INPUT_CAPTURE_FALLING:
    case TIMER_INPUT_CAPTURE_BOTHEDGE: {
        HAL_TIM_IC_Start(&(_timerObj.handle), timChannel);
 80024fa:	4639      	mov	r1, r7
 80024fc:	f104 0010 	add.w	r0, r4, #16
 8002500:	f7ff f8c2 	bl	8001688 <HAL_TIM_IC_Start>
      break;
    case TIMER_NOT_USED:
    default :
      break;
  }
}
 8002504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!LL_TIM_IsEnabledCounter(_timerObj.handle.Instance)) {
 8002508:	6923      	ldr	r3, [r4, #16]
  return ((READ_BIT(TIMx->CR1, TIM_CR1_CEN) == (TIM_CR1_CEN)) ? 1UL : 0UL);
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f013 0f01 	tst.w	r3, #1
 8002510:	d1f8      	bne.n	8002504 <_ZN13HardwareTimer13resumeChannelEm+0x114>
        HAL_TIM_Base_Start(&(_timerObj.handle));
 8002512:	f104 0010 	add.w	r0, r4, #16
 8002516:	f7fe fe75 	bl	8001204 <HAL_TIM_Base_Start>
}
 800251a:	e7f3      	b.n	8002504 <_ZN13HardwareTimer13resumeChannelEm+0x114>
 800251c:	08003b90 	.word	0x08003b90

08002520 <_ZN13HardwareTimer6resumeEv>:
{
 8002520:	b510      	push	{r4, lr}
 8002522:	4604      	mov	r4, r0
 8002524:	6e83      	ldr	r3, [r0, #104]	; 0x68
  if (callbacks[0]) {
 8002526:	b15b      	cbz	r3, 8002540 <_ZN13HardwareTimer6resumeEv+0x20>
    __HAL_TIM_CLEAR_FLAG(&(_timerObj.handle), TIM_FLAG_UPDATE);
 8002528:	6903      	ldr	r3, [r0, #16]
 800252a:	f06f 0201 	mvn.w	r2, #1
 800252e:	611a      	str	r2, [r3, #16]
    __HAL_TIM_ENABLE_IT(&(_timerObj.handle), TIM_IT_UPDATE);
 8002530:	f850 2f10 	ldr.w	r2, [r0, #16]!
 8002534:	68d3      	ldr	r3, [r2, #12]
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	60d3      	str	r3, [r2, #12]
    HAL_TIM_Base_Start(&(_timerObj.handle));
 800253c:	f7fe fe62 	bl	8001204 <HAL_TIM_Base_Start>
  resumeChannel(1);
 8002540:	2101      	movs	r1, #1
 8002542:	4620      	mov	r0, r4
 8002544:	f7ff ff54 	bl	80023f0 <_ZN13HardwareTimer13resumeChannelEm>
  resumeChannel(2);
 8002548:	2102      	movs	r1, #2
 800254a:	4620      	mov	r0, r4
 800254c:	f7ff ff50 	bl	80023f0 <_ZN13HardwareTimer13resumeChannelEm>
  resumeChannel(3);
 8002550:	2103      	movs	r1, #3
 8002552:	4620      	mov	r0, r4
 8002554:	f7ff ff4c 	bl	80023f0 <_ZN13HardwareTimer13resumeChannelEm>
  resumeChannel(4);
 8002558:	2104      	movs	r1, #4
 800255a:	4620      	mov	r0, r4
 800255c:	f7ff ff48 	bl	80023f0 <_ZN13HardwareTimer13resumeChannelEm>
}
 8002560:	bd10      	pop	{r4, pc}
	...

08002564 <_Z15get_timer_indexP11TIM_TypeDef>:
  * @brief  return timer index from timer handle
  * @param  htim : one of the defined timer
  * @retval timer index
  */
timer_index_t get_timer_index(TIM_TypeDef *instance)
{
 8002564:	4603      	mov	r3, r0
  timer_index_t index = UNKNOWN_TIMER;

#if defined(TIM1_BASE)
  if (instance == TIM1) {
 8002566:	4a0b      	ldr	r2, [pc, #44]	; (8002594 <_Z15get_timer_indexP11TIM_TypeDef+0x30>)
 8002568:	4290      	cmp	r0, r2
 800256a:	d00b      	beq.n	8002584 <_Z15get_timer_indexP11TIM_TypeDef+0x20>
  timer_index_t index = UNKNOWN_TIMER;
 800256c:	f64f 70ff 	movw	r0, #65535	; 0xffff
    index = TIMER1_INDEX;
  }
#endif
#if defined(TIM2_BASE)
  if (instance == TIM2) {
 8002570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002574:	d008      	beq.n	8002588 <_Z15get_timer_indexP11TIM_TypeDef+0x24>
    index = TIMER2_INDEX;
  }
#endif
#if defined(TIM3_BASE)
  if (instance == TIM3) {
 8002576:	4a08      	ldr	r2, [pc, #32]	; (8002598 <_Z15get_timer_indexP11TIM_TypeDef+0x34>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d007      	beq.n	800258c <_Z15get_timer_indexP11TIM_TypeDef+0x28>
    index = TIMER3_INDEX;
  }
#endif
#if defined(TIM4_BASE)
  if (instance == TIM4) {
 800257c:	4a07      	ldr	r2, [pc, #28]	; (800259c <_Z15get_timer_indexP11TIM_TypeDef+0x38>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d006      	beq.n	8002590 <_Z15get_timer_indexP11TIM_TypeDef+0x2c>
  if (instance == TIM22) {
    index = TIMER22_INDEX;
  }
#endif
  return index;
}
 8002582:	4770      	bx	lr
    index = TIMER1_INDEX;
 8002584:	2000      	movs	r0, #0
 8002586:	e7f3      	b.n	8002570 <_Z15get_timer_indexP11TIM_TypeDef+0xc>
    index = TIMER2_INDEX;
 8002588:	2001      	movs	r0, #1
 800258a:	e7f4      	b.n	8002576 <_Z15get_timer_indexP11TIM_TypeDef+0x12>
    index = TIMER3_INDEX;
 800258c:	2002      	movs	r0, #2
 800258e:	e7f5      	b.n	800257c <_Z15get_timer_indexP11TIM_TypeDef+0x18>
    index = TIMER4_INDEX;
 8002590:	2003      	movs	r0, #3
 8002592:	e7f6      	b.n	8002582 <_Z15get_timer_indexP11TIM_TypeDef+0x1e>
 8002594:	40012c00 	.word	0x40012c00
 8002598:	40000400 	.word	0x40000400
 800259c:	40000800 	.word	0x40000800

080025a0 <_ZN13HardwareTimerD1Ev>:
HardwareTimer::~HardwareTimer()
 80025a0:	b570      	push	{r4, r5, r6, lr}
 80025a2:	4605      	mov	r5, r0
  uint32_t index = get_timer_index(_timerObj.handle.Instance);
 80025a4:	4606      	mov	r6, r0
 80025a6:	f856 0f10 	ldr.w	r0, [r6, #16]!
 80025aa:	f7ff ffdb 	bl	8002564 <_Z15get_timer_indexP11TIM_TypeDef>
 80025ae:	4604      	mov	r4, r0
  disableTimerClock(&(_timerObj.handle));
 80025b0:	4630      	mov	r0, r6
 80025b2:	f000 ff49 	bl	8003448 <disableTimerClock>
  HardwareTimer_Handle[index] = NULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	4a0a      	ldr	r2, [pc, #40]	; (80025e4 <_ZN13HardwareTimerD1Ev+0x44>)
 80025ba:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  _timerObj.__this = NULL;
 80025be:	60eb      	str	r3, [r5, #12]
HardwareTimer::~HardwareTimer()
 80025c0:	f115 0660 	adds.w	r6, r5, #96	; 0x60
 80025c4:	d00c      	beq.n	80025e0 <_ZN13HardwareTimerD1Ev+0x40>
 80025c6:	f105 04b0 	add.w	r4, r5, #176	; 0xb0
 80025ca:	42a6      	cmp	r6, r4
 80025cc:	d008      	beq.n	80025e0 <_ZN13HardwareTimerD1Ev+0x40>
 80025ce:	3c10      	subs	r4, #16
      if (_M_manager)
 80025d0:	68a3      	ldr	r3, [r4, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f9      	beq.n	80025ca <_ZN13HardwareTimerD1Ev+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80025d6:	2203      	movs	r2, #3
 80025d8:	4621      	mov	r1, r4
 80025da:	4620      	mov	r0, r4
 80025dc:	4798      	blx	r3
    class function<_Res(_ArgTypes...)>
 80025de:	e7f4      	b.n	80025ca <_ZN13HardwareTimerD1Ev+0x2a>
}
 80025e0:	4628      	mov	r0, r5
 80025e2:	bd70      	pop	{r4, r5, r6, pc}
 80025e4:	20000260 	.word	0x20000260

080025e8 <_ZN13HardwareTimer5setupEP11TIM_TypeDef>:
{
 80025e8:	b570      	push	{r4, r5, r6, lr}
 80025ea:	4604      	mov	r4, r0
 80025ec:	460d      	mov	r5, r1
  uint32_t index = get_timer_index(instance);
 80025ee:	4608      	mov	r0, r1
 80025f0:	f7ff ffb8 	bl	8002564 <_Z15get_timer_indexP11TIM_TypeDef>
 80025f4:	4606      	mov	r6, r0
  if (index == UNKNOWN_TIMER) {
 80025f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025fa:	4298      	cmp	r0, r3
 80025fc:	d023      	beq.n	8002646 <_ZN13HardwareTimer5setupEP11TIM_TypeDef+0x5e>
  if (_timerObj.handle.Instance) {
 80025fe:	6923      	ldr	r3, [r4, #16]
 8002600:	b11b      	cbz	r3, 800260a <_ZN13HardwareTimer5setupEP11TIM_TypeDef+0x22>
    Error_Handler();
 8002602:	2152      	movs	r1, #82	; 0x52
 8002604:	4828      	ldr	r0, [pc, #160]	; (80026a8 <_ZN13HardwareTimer5setupEP11TIM_TypeDef+0xc0>)
 8002606:	f000 fed2 	bl	80033ae <_Error_Handler>
  HardwareTimer_Handle[index] = &_timerObj;
 800260a:	f104 030c 	add.w	r3, r4, #12
 800260e:	4a27      	ldr	r2, [pc, #156]	; (80026ac <_ZN13HardwareTimer5setupEP11TIM_TypeDef+0xc4>)
 8002610:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  _timerObj.handle.Instance = instance;
 8002614:	6125      	str	r5, [r4, #16]
  _timerObj.handle.Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002616:	2500      	movs	r5, #0
 8002618:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
  _timerObj.handle.hdma[0] = NULL;
 800261c:	6325      	str	r5, [r4, #48]	; 0x30
  _timerObj.handle.hdma[1] = NULL;
 800261e:	6365      	str	r5, [r4, #52]	; 0x34
  _timerObj.handle.hdma[2] = NULL;
 8002620:	63a5      	str	r5, [r4, #56]	; 0x38
  _timerObj.handle.hdma[3] = NULL;
 8002622:	63e5      	str	r5, [r4, #60]	; 0x3c
  _timerObj.handle.hdma[4] = NULL;
 8002624:	6425      	str	r5, [r4, #64]	; 0x40
  _timerObj.handle.hdma[5] = NULL;
 8002626:	6465      	str	r5, [r4, #68]	; 0x44
  _timerObj.handle.hdma[6] = NULL;
 8002628:	64a5      	str	r5, [r4, #72]	; 0x48
  _timerObj.handle.Lock = HAL_UNLOCKED;
 800262a:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
  _timerObj.handle.State = HAL_TIM_STATE_RESET;
 800262e:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
  _timerObj.__this = (void *)this;
 8002632:	60e4      	str	r4, [r4, #12]
  _timerObj.preemptPriority = TIM_IRQ_PRIO;
 8002634:	230e      	movs	r3, #14
 8002636:	65a3      	str	r3, [r4, #88]	; 0x58
  _timerObj.subPriority = TIM_IRQ_SUBPRIO;
 8002638:	65e5      	str	r5, [r4, #92]	; 0x5c
  enableTimerClock(&(_timerObj.handle));
 800263a:	f104 0610 	add.w	r6, r4, #16
 800263e:	4630      	mov	r0, r6
 8002640:	f000 feb8 	bl	80033b4 <enableTimerClock>
  for (int i = 0; i < TIMER_CHANNELS + 1 ; i++) {
 8002644:	e005      	b.n	8002652 <_ZN13HardwareTimer5setupEP11TIM_TypeDef+0x6a>
    Error_Handler();
 8002646:	214d      	movs	r1, #77	; 0x4d
 8002648:	4817      	ldr	r0, [pc, #92]	; (80026a8 <_ZN13HardwareTimer5setupEP11TIM_TypeDef+0xc0>)
 800264a:	f000 feb0 	bl	80033ae <_Error_Handler>
 800264e:	e7d6      	b.n	80025fe <_ZN13HardwareTimer5setupEP11TIM_TypeDef+0x16>
  for (int i = 0; i < TIMER_CHANNELS + 1 ; i++) {
 8002650:	3501      	adds	r5, #1
 8002652:	2d04      	cmp	r5, #4
 8002654:	dc10      	bgt.n	8002678 <_ZN13HardwareTimer5setupEP11TIM_TypeDef+0x90>
	if (_M_manager)
 8002656:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 800265a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f7      	beq.n	8002650 <_ZN13HardwareTimer5setupEP11TIM_TypeDef+0x68>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 8002660:	1da8      	adds	r0, r5, #6
 8002662:	eb04 1000 	add.w	r0, r4, r0, lsl #4
 8002666:	2203      	movs	r2, #3
 8002668:	4601      	mov	r1, r0
 800266a:	4798      	blx	r3
	    _M_manager = nullptr;
 800266c:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 8002670:	2200      	movs	r2, #0
 8002672:	669a      	str	r2, [r3, #104]	; 0x68
	    _M_invoker = nullptr;
 8002674:	66da      	str	r2, [r3, #108]	; 0x6c
 8002676:	e7eb      	b.n	8002650 <_ZN13HardwareTimer5setupEP11TIM_TypeDef+0x68>
  for (int i = 0; i < TIMER_CHANNELS; i++) {
 8002678:	2300      	movs	r3, #0
 800267a:	e005      	b.n	8002688 <_ZN13HardwareTimer5setupEP11TIM_TypeDef+0xa0>
    isComplementaryChannel[i] = false;
 800267c:	2200      	movs	r2, #0
 800267e:	54e2      	strb	r2, [r4, r3]
    _ChannelMode[i] = TIMER_DISABLED;
 8002680:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 8002684:	808a      	strh	r2, [r1, #4]
  for (int i = 0; i < TIMER_CHANNELS; i++) {
 8002686:	3301      	adds	r3, #1
 8002688:	2b03      	cmp	r3, #3
 800268a:	ddf7      	ble.n	800267c <_ZN13HardwareTimer5setupEP11TIM_TypeDef+0x94>
  _timerObj.handle.Init.Prescaler = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	6163      	str	r3, [r4, #20]
  _timerObj.handle.Init.Period = MAX_RELOAD;
 8002690:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002694:	61e2      	str	r2, [r4, #28]
  _timerObj.handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002696:	61a3      	str	r3, [r4, #24]
  _timerObj.handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002698:	6223      	str	r3, [r4, #32]
  _timerObj.handle.Init.RepetitionCounter = 0;
 800269a:	6263      	str	r3, [r4, #36]	; 0x24
  _timerObj.handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	62a3      	str	r3, [r4, #40]	; 0x28
  HAL_TIM_Base_Init(&(_timerObj.handle));
 80026a0:	4630      	mov	r0, r6
 80026a2:	f7fe fed7 	bl	8001454 <HAL_TIM_Base_Init>
}
 80026a6:	bd70      	pop	{r4, r5, r6, pc}
 80026a8:	08003b90 	.word	0x08003b90
 80026ac:	20000260 	.word	0x20000260

080026b0 <_ZN13HardwareTimerC1EP11TIM_TypeDef>:
HardwareTimer::HardwareTimer(TIM_TypeDef *instance)
 80026b0:	b538      	push	{r3, r4, r5, lr}
 80026b2:	4605      	mov	r5, r0
 80026b4:	f100 0260 	add.w	r2, r0, #96	; 0x60
 80026b8:	2304      	movs	r3, #4
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	db04      	blt.n	80026c8 <_ZN13HardwareTimerC1EP11TIM_TypeDef+0x18>
    _Function_base() : _M_manager(nullptr) { }
 80026be:	2400      	movs	r4, #0
 80026c0:	6094      	str	r4, [r2, #8]
 80026c2:	3210      	adds	r2, #16
 80026c4:	3b01      	subs	r3, #1
 80026c6:	e7f8      	b.n	80026ba <_ZN13HardwareTimerC1EP11TIM_TypeDef+0xa>
  _timerObj.handle.Instance = nullptr;
 80026c8:	2300      	movs	r3, #0
 80026ca:	612b      	str	r3, [r5, #16]
  setup(instance);
 80026cc:	4628      	mov	r0, r5
 80026ce:	f7ff ff8b 	bl	80025e8 <_ZN13HardwareTimer5setupEP11TIM_TypeDef>
}
 80026d2:	4628      	mov	r0, r5
 80026d4:	bd38      	pop	{r3, r4, r5, pc}
	...

080026d8 <_ZN13HardwareTimer15getTimerClkFreqEv>:
  * @brief  This function return the timer clock frequency.
  * @param  None
  * @retval frequency in Hz
  */
uint32_t HardwareTimer::getTimerClkFreq()
{
 80026d8:	b510      	push	{r4, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	4604      	mov	r4, r0
#if defined(STM32MP1xx)
  uint8_t timerClkSrc = getTimerClkSrc(_timerObj.handle.Instance);
  uint64_t clkSelection = timerClkSrc == 1 ? RCC_PERIPHCLK_TIMG1 : RCC_PERIPHCLK_TIMG2;
  return HAL_RCCEx_GetPeriphCLKFreq(clkSelection);
#else
  RCC_ClkInitTypeDef    clkconfig = {};
 80026de:	2300      	movs	r3, #0
 80026e0:	9301      	str	r3, [sp, #4]
 80026e2:	9302      	str	r3, [sp, #8]
 80026e4:	9303      	str	r3, [sp, #12]
 80026e6:	9304      	str	r3, [sp, #16]
 80026e8:	9305      	str	r3, [sp, #20]
  uint32_t              pFLatency = 0U;
 80026ea:	9300      	str	r3, [sp, #0]
  uint32_t              uwTimclock = 0U, uwAPBxPrescaler = 0U;

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026ec:	4669      	mov	r1, sp
 80026ee:	a801      	add	r0, sp, #4
 80026f0:	f7fe fd56 	bl	80011a0 <HAL_RCC_GetClockConfig>
  switch (getTimerClkSrc(_timerObj.handle.Instance)) {
 80026f4:	6920      	ldr	r0, [r4, #16]
 80026f6:	f000 ff59 	bl	80035ac <getTimerClkSrc>
 80026fa:	2801      	cmp	r0, #1
 80026fc:	d008      	beq.n	8002710 <_ZN13HardwareTimer15getTimerClkFreqEv+0x38>
 80026fe:	2802      	cmp	r0, #2
 8002700:	d015      	beq.n	800272e <_ZN13HardwareTimer15getTimerClkFreqEv+0x56>
      uwTimclock = HAL_RCC_GetPCLK2Freq();
      break;
#endif
    default:
    case 0: // Unknown timer clock source
      Error_Handler();
 8002702:	f240 5156 	movw	r1, #1366	; 0x556
 8002706:	480e      	ldr	r0, [pc, #56]	; (8002740 <_ZN13HardwareTimer15getTimerClkFreqEv+0x68>)
 8002708:	f000 fe51 	bl	80033ae <_Error_Handler>
  uint32_t              uwTimclock = 0U, uwAPBxPrescaler = 0U;
 800270c:	2000      	movs	r0, #0
 800270e:	e015      	b.n	800273c <_ZN13HardwareTimer15getTimerClkFreqEv+0x64>
      uwAPBxPrescaler = clkconfig.APB1CLKDivider;
 8002710:	9c04      	ldr	r4, [sp, #16]
      uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002712:	f7fe fd25 	bl	8001160 <HAL_RCC_GetPCLK1Freq>
        uwTimclock *= 4;
        break;
    } else
#endif
#endif
    switch (uwAPBxPrescaler) {
 8002716:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800271a:	d006      	beq.n	800272a <_ZN13HardwareTimer15getTimerClkFreqEv+0x52>
 800271c:	d80b      	bhi.n	8002736 <_ZN13HardwareTimer15getTimerClkFreqEv+0x5e>
 800271e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8002722:	d002      	beq.n	800272a <_ZN13HardwareTimer15getTimerClkFreqEv+0x52>
 8002724:	f5b4 6fa0 	cmp.w	r4, #1280	; 0x500
 8002728:	d108      	bne.n	800273c <_ZN13HardwareTimer15getTimerClkFreqEv+0x64>
        break;
      case RCC_HCLK_DIV2:
      case RCC_HCLK_DIV4:
      case RCC_HCLK_DIV8:
      case RCC_HCLK_DIV16:
        uwTimclock *= 2;
 800272a:	0040      	lsls	r0, r0, #1
        break;
    }
#endif /* STM32H7xx */
  return uwTimclock;
 800272c:	e006      	b.n	800273c <_ZN13HardwareTimer15getTimerClkFreqEv+0x64>
      uwAPBxPrescaler = clkconfig.APB2CLKDivider;
 800272e:	9c05      	ldr	r4, [sp, #20]
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002730:	f7fe fd26 	bl	8001180 <HAL_RCC_GetPCLK2Freq>
      break;
 8002734:	e7ef      	b.n	8002716 <_ZN13HardwareTimer15getTimerClkFreqEv+0x3e>
    switch (uwAPBxPrescaler) {
 8002736:	f5b4 6fe0 	cmp.w	r4, #1792	; 0x700
 800273a:	d0f6      	beq.n	800272a <_ZN13HardwareTimer15getTimerClkFreqEv+0x52>
#endif /* STM32MP1xx */
}
 800273c:	b006      	add	sp, #24
 800273e:	bd10      	pop	{r4, pc}
 8002740:	08003b90 	.word	0x08003b90

08002744 <_ZN13HardwareTimer11setOverflowEm13TimerFormat_t>:
{
 8002744:	b538      	push	{r3, r4, r5, lr}
 8002746:	4605      	mov	r5, r0
 8002748:	460c      	mov	r4, r1
  switch (format) {
 800274a:	2a01      	cmp	r2, #1
 800274c:	d007      	beq.n	800275e <_ZN13HardwareTimer11setOverflowEm13TimerFormat_t+0x1a>
 800274e:	2a02      	cmp	r2, #2
 8002750:	d014      	beq.n	800277c <_ZN13HardwareTimer11setOverflowEm13TimerFormat_t+0x38>
  if (PeriodTicks > 0) {
 8002752:	b104      	cbz	r4, 8002756 <_ZN13HardwareTimer11setOverflowEm13TimerFormat_t+0x12>
    ARR_RegisterValue = PeriodTicks - 1;
 8002754:	3c01      	subs	r4, #1
  __HAL_TIM_SET_AUTORELOAD(&_timerObj.handle, ARR_RegisterValue);
 8002756:	692b      	ldr	r3, [r5, #16]
 8002758:	62dc      	str	r4, [r3, #44]	; 0x2c
 800275a:	61ec      	str	r4, [r5, #28]
}
 800275c:	bd38      	pop	{r3, r4, r5, pc}
      period_cyc = overflow * (getTimerClkFreq() / 1000000);
 800275e:	f7ff ffbb 	bl	80026d8 <_ZN13HardwareTimer15getTimerClkFreqEv>
 8002762:	490c      	ldr	r1, [pc, #48]	; (8002794 <_ZN13HardwareTimer11setOverflowEm13TimerFormat_t+0x50>)
 8002764:	fba1 3100 	umull	r3, r1, r1, r0
 8002768:	0c89      	lsrs	r1, r1, #18
 800276a:	fb04 f401 	mul.w	r4, r4, r1
      Prescalerfactor = (period_cyc / 0x10000) + 1;
 800276e:	0c23      	lsrs	r3, r4, #16
 8002770:	1c59      	adds	r1, r3, #1
      LL_TIM_SetPrescaler(_timerObj.handle.Instance, Prescalerfactor - 1);
 8002772:	692a      	ldr	r2, [r5, #16]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002774:	6293      	str	r3, [r2, #40]	; 0x28
      PeriodTicks = period_cyc / Prescalerfactor;
 8002776:	fbb4 f4f1 	udiv	r4, r4, r1
      break;
 800277a:	e7ea      	b.n	8002752 <_ZN13HardwareTimer11setOverflowEm13TimerFormat_t+0xe>
      period_cyc = getTimerClkFreq() / overflow;
 800277c:	f7ff ffac 	bl	80026d8 <_ZN13HardwareTimer15getTimerClkFreqEv>
 8002780:	fbb0 f4f4 	udiv	r4, r0, r4
      Prescalerfactor = (period_cyc / 0x10000) + 1;
 8002784:	0c23      	lsrs	r3, r4, #16
 8002786:	1c59      	adds	r1, r3, #1
      LL_TIM_SetPrescaler(_timerObj.handle.Instance, Prescalerfactor - 1);
 8002788:	692a      	ldr	r2, [r5, #16]
 800278a:	6293      	str	r3, [r2, #40]	; 0x28
      PeriodTicks = period_cyc / Prescalerfactor;
 800278c:	fbb4 f4f1 	udiv	r4, r4, r1
      break;
 8002790:	e7df      	b.n	8002752 <_ZN13HardwareTimer11setOverflowEm13TimerFormat_t+0xe>
 8002792:	bf00      	nop
 8002794:	431bde83 	.word	0x431bde83

08002798 <TIM1_UP_IRQHandler>:
    * @brief  TIM1 IRQHandler common with TIM10 and TIM16 on some STM32F1xx
    * @param  None
    * @retval None
    */
  void TIM1_IRQHandler(void)
  {
 8002798:	b508      	push	{r3, lr}
    if (HardwareTimer_Handle[TIMER1_INDEX]) {
 800279a:	4b03      	ldr	r3, [pc, #12]	; (80027a8 <TIM1_UP_IRQHandler+0x10>)
 800279c:	6818      	ldr	r0, [r3, #0]
 800279e:	b110      	cbz	r0, 80027a6 <TIM1_UP_IRQHandler+0xe>
      HAL_TIM_IRQHandler(&HardwareTimer_Handle[TIMER1_INDEX]->handle);
 80027a0:	3004      	adds	r0, #4
 80027a2:	f7fe fd5f 	bl	8001264 <HAL_TIM_IRQHandler>
    if (HardwareTimer_Handle[TIMER16_INDEX]) {
      HAL_TIM_IRQHandler(&HardwareTimer_Handle[TIMER16_INDEX]->handle);
    }
#endif
#endif
  }
 80027a6:	bd08      	pop	{r3, pc}
 80027a8:	20000260 	.word	0x20000260

080027ac <TIM1_CC_IRQHandler>:

#if !defined(STM32F3xx)
  void TIM1_CC_IRQHandler(void)
  {
 80027ac:	b508      	push	{r3, lr}
    if (HardwareTimer_Handle[TIMER1_INDEX]) {
 80027ae:	4b03      	ldr	r3, [pc, #12]	; (80027bc <TIM1_CC_IRQHandler+0x10>)
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	b110      	cbz	r0, 80027ba <TIM1_CC_IRQHandler+0xe>
      HAL_TIM_IRQHandler(&HardwareTimer_Handle[TIMER1_INDEX]->handle);
 80027b4:	3004      	adds	r0, #4
 80027b6:	f7fe fd55 	bl	8001264 <HAL_TIM_IRQHandler>
    }
  }
 80027ba:	bd08      	pop	{r3, pc}
 80027bc:	20000260 	.word	0x20000260

080027c0 <TIM2_IRQHandler>:
    * @brief  TIM2 IRQHandler
    * @param  None
    * @retval None
    */
  void TIM2_IRQHandler(void)
  {
 80027c0:	b508      	push	{r3, lr}
    if (HardwareTimer_Handle[TIMER2_INDEX]) {
 80027c2:	4b03      	ldr	r3, [pc, #12]	; (80027d0 <TIM2_IRQHandler+0x10>)
 80027c4:	6858      	ldr	r0, [r3, #4]
 80027c6:	b110      	cbz	r0, 80027ce <TIM2_IRQHandler+0xe>
      HAL_TIM_IRQHandler(&HardwareTimer_Handle[TIMER2_INDEX]->handle);
 80027c8:	3004      	adds	r0, #4
 80027ca:	f7fe fd4b 	bl	8001264 <HAL_TIM_IRQHandler>
    }
  }
 80027ce:	bd08      	pop	{r3, pc}
 80027d0:	20000260 	.word	0x20000260

080027d4 <TIM3_IRQHandler>:
    * @brief  TIM3 IRQHandler
    * @param  None
    * @retval None
    */
  void TIM3_IRQHandler(void)
  {
 80027d4:	b508      	push	{r3, lr}
    if (HardwareTimer_Handle[TIMER3_INDEX]) {
 80027d6:	4b03      	ldr	r3, [pc, #12]	; (80027e4 <TIM3_IRQHandler+0x10>)
 80027d8:	6898      	ldr	r0, [r3, #8]
 80027da:	b110      	cbz	r0, 80027e2 <TIM3_IRQHandler+0xe>
      HAL_TIM_IRQHandler(&HardwareTimer_Handle[TIMER3_INDEX]->handle);
 80027dc:	3004      	adds	r0, #4
 80027de:	f7fe fd41 	bl	8001264 <HAL_TIM_IRQHandler>
#if defined(STM32G0xx) && defined(TIM4_BASE)
    if (HardwareTimer_Handle[TIMER4_INDEX]) {
      HAL_TIM_IRQHandler(&HardwareTimer_Handle[TIMER4_INDEX]->handle);
    }
#endif
  }
 80027e2:	bd08      	pop	{r3, pc}
 80027e4:	20000260 	.word	0x20000260

080027e8 <TIM4_IRQHandler>:
    * @brief  TIM4 IRQHandler
    * @param  None
    * @retval None
    */
  void TIM4_IRQHandler(void)
  {
 80027e8:	b508      	push	{r3, lr}
    if (HardwareTimer_Handle[TIMER4_INDEX]) {
 80027ea:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <TIM4_IRQHandler+0x10>)
 80027ec:	68d8      	ldr	r0, [r3, #12]
 80027ee:	b110      	cbz	r0, 80027f6 <TIM4_IRQHandler+0xe>
      HAL_TIM_IRQHandler(&HardwareTimer_Handle[TIMER4_INDEX]->handle);
 80027f0:	3004      	adds	r0, #4
 80027f2:	f7fe fd37 	bl	8001264 <HAL_TIM_IRQHandler>
    }
  }
 80027f6:	bd08      	pop	{r3, pc}
 80027f8:	20000260 	.word	0x20000260

080027fc <_ZNSt8functionIFvvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 80027fc:	b538      	push	{r3, r4, r5, lr}
 80027fe:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
 8002800:	2300      	movs	r3, #0
 8002802:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 8002804:	688b      	ldr	r3, [r1, #8]
      if (static_cast<bool>(__x))
 8002806:	b133      	cbz	r3, 8002816 <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
 8002808:	460d      	mov	r5, r1
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800280a:	2202      	movs	r2, #2
 800280c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 800280e:	68eb      	ldr	r3, [r5, #12]
 8002810:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8002812:	68ab      	ldr	r3, [r5, #8]
 8002814:	60a3      	str	r3, [r4, #8]
    }
 8002816:	4620      	mov	r0, r4
 8002818:	bd38      	pop	{r3, r4, r5, pc}

0800281a <_ZN13HardwareTimer15attachInterruptESt8functionIFvvEE>:
{
 800281a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800281c:	b08b      	sub	sp, #44	; 0x2c
 800281e:	4604      	mov	r4, r0
 8002820:	460e      	mov	r6, r1
    bool _M_empty() const { return !_M_manager; }
 8002822:	6e83      	ldr	r3, [r0, #104]	; 0x68
  if (callbacks[0]) {
 8002824:	b303      	cbz	r3, 8002868 <_ZN13HardwareTimer15attachInterruptESt8functionIFvvEE+0x4e>
    callbacks[0] = callback;
 8002826:	3460      	adds	r4, #96	; 0x60
	function(__x).swap(*this);
 8002828:	ad02      	add	r5, sp, #8
 800282a:	4628      	mov	r0, r5
 800282c:	f7ff ffe6 	bl	80027fc <_ZNSt8functionIFvvEEC1ERKS1_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002830:	466b      	mov	r3, sp
 8002832:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002836:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800283a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800283e:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8002842:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002846:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800284a:	9a04      	ldr	r2, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 800284c:	68a3      	ldr	r3, [r4, #8]
 800284e:	9304      	str	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8002850:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002852:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8002854:	68e1      	ldr	r1, [r4, #12]
 8002856:	9105      	str	r1, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 8002858:	60e2      	str	r2, [r4, #12]
      if (_M_manager)
 800285a:	b11b      	cbz	r3, 8002864 <_ZN13HardwareTimer15attachInterruptESt8functionIFvvEE+0x4a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800285c:	2203      	movs	r2, #3
 800285e:	a902      	add	r1, sp, #8
 8002860:	4608      	mov	r0, r1
 8002862:	4798      	blx	r3
}
 8002864:	b00b      	add	sp, #44	; 0x2c
 8002866:	bdf0      	pop	{r4, r5, r6, r7, pc}
    callbacks[0] = callback;
 8002868:	f100 0560 	add.w	r5, r0, #96	; 0x60
	function(__x).swap(*this);
 800286c:	af06      	add	r7, sp, #24
 800286e:	4638      	mov	r0, r7
 8002870:	f7ff ffc4 	bl	80027fc <_ZNSt8functionIFvvEEC1ERKS1_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002874:	466b      	mov	r3, sp
 8002876:	e897 0003 	ldmia.w	r7, {r0, r1}
 800287a:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800287e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002882:	e887 0003 	stmia.w	r7, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8002886:	e893 0003 	ldmia.w	r3, {r0, r1}
 800288a:	e885 0003 	stmia.w	r5, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800288e:	9a08      	ldr	r2, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 8002890:	68ab      	ldr	r3, [r5, #8]
 8002892:	9308      	str	r3, [sp, #32]
      __b = _GLIBCXX_MOVE(__tmp);
 8002894:	60aa      	str	r2, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002896:	9a09      	ldr	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 8002898:	68e9      	ldr	r1, [r5, #12]
 800289a:	9109      	str	r1, [sp, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
 800289c:	60ea      	str	r2, [r5, #12]
      if (_M_manager)
 800289e:	b11b      	cbz	r3, 80028a8 <_ZN13HardwareTimer15attachInterruptESt8functionIFvvEE+0x8e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80028a0:	2203      	movs	r2, #3
 80028a2:	a906      	add	r1, sp, #24
 80028a4:	4608      	mov	r0, r1
 80028a6:	4798      	blx	r3
    bool _M_empty() const { return !_M_manager; }
 80028a8:	68b3      	ldr	r3, [r6, #8]
    if (callback) {
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0da      	beq.n	8002864 <_ZN13HardwareTimer15attachInterruptESt8functionIFvvEE+0x4a>
      __HAL_TIM_CLEAR_FLAG(&(_timerObj.handle), TIM_FLAG_UPDATE);
 80028ae:	6923      	ldr	r3, [r4, #16]
 80028b0:	f06f 0201 	mvn.w	r2, #1
 80028b4:	611a      	str	r2, [r3, #16]
      __HAL_TIM_ENABLE_IT(&(_timerObj.handle), TIM_IT_UPDATE);
 80028b6:	6922      	ldr	r2, [r4, #16]
 80028b8:	68d3      	ldr	r3, [r2, #12]
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	60d3      	str	r3, [r2, #12]
}
 80028c0:	e7d0      	b.n	8002864 <_ZN13HardwareTimer15attachInterruptESt8functionIFvvEE+0x4a>

080028c2 <_ZNKSt8functionIFvvEEclEv>:

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80028c2:	b508      	push	{r3, lr}
    bool _M_empty() const { return !_M_manager; }
 80028c4:	6883      	ldr	r3, [r0, #8]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80028c6:	b113      	cbz	r3, 80028ce <_ZNKSt8functionIFvvEEclEv+0xc>
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80028c8:	68c3      	ldr	r3, [r0, #12]
 80028ca:	4798      	blx	r3
    }
 80028cc:	bd08      	pop	{r3, pc}
	__throw_bad_function_call();
 80028ce:	f001 f867 	bl	80039a0 <_ZSt25__throw_bad_function_callv>
	...

080028d4 <_ZN13HardwareTimer14updateCallbackEP17TIM_HandleTypeDef>:
{
 80028d4:	b510      	push	{r4, lr}
  if (!htim) {
 80028d6:	4604      	mov	r4, r0
 80028d8:	b148      	cbz	r0, 80028ee <_ZN13HardwareTimer14updateCallbackEP17TIM_HandleTypeDef+0x1a>
  timerObj_t *obj = get_timer_obj(htim);
 80028da:	4620      	mov	r0, r4
 80028dc:	f000 fd68 	bl	80033b0 <get_timer_obj>
  HardwareTimer *HT = (HardwareTimer *)(obj->__this);
 80028e0:	6800      	ldr	r0, [r0, #0]
    bool _M_empty() const { return !_M_manager; }
 80028e2:	6e83      	ldr	r3, [r0, #104]	; 0x68
  if (HT->callbacks[0]) {
 80028e4:	b113      	cbz	r3, 80028ec <_ZN13HardwareTimer14updateCallbackEP17TIM_HandleTypeDef+0x18>
    HT->callbacks[0]();
 80028e6:	3060      	adds	r0, #96	; 0x60
 80028e8:	f7ff ffeb 	bl	80028c2 <_ZNKSt8functionIFvvEEclEv>
}
 80028ec:	bd10      	pop	{r4, pc}
    Error_Handler();
 80028ee:	f240 415a 	movw	r1, #1114	; 0x45a
 80028f2:	4802      	ldr	r0, [pc, #8]	; (80028fc <_ZN13HardwareTimer14updateCallbackEP17TIM_HandleTypeDef+0x28>)
 80028f4:	f000 fd5b 	bl	80033ae <_Error_Handler>
 80028f8:	e7ef      	b.n	80028da <_ZN13HardwareTimer14updateCallbackEP17TIM_HandleTypeDef+0x6>
 80028fa:	bf00      	nop
 80028fc:	08003b90 	.word	0x08003b90

08002900 <HAL_TIM_PeriodElapsedCallback>:
  {
 8002900:	b508      	push	{r3, lr}
    HardwareTimer::updateCallback(htim);
 8002902:	f7ff ffe7 	bl	80028d4 <_ZN13HardwareTimer14updateCallbackEP17TIM_HandleTypeDef>
  }
 8002906:	bd08      	pop	{r3, pc}

08002908 <_ZN13HardwareTimer22captureCompareCallbackEP17TIM_HandleTypeDef>:
{
 8002908:	b538      	push	{r3, r4, r5, lr}
  if (!htim) {
 800290a:	4605      	mov	r5, r0
 800290c:	b148      	cbz	r0, 8002922 <_ZN13HardwareTimer22captureCompareCallbackEP17TIM_HandleTypeDef+0x1a>
  uint32_t channel = htim->Channel;
 800290e:	7f2b      	ldrb	r3, [r5, #28]
  switch (htim->Channel) {
 8002910:	3b01      	subs	r3, #1
 8002912:	2b07      	cmp	r3, #7
 8002914:	d819      	bhi.n	800294a <_ZN13HardwareTimer22captureCompareCallbackEP17TIM_HandleTypeDef+0x42>
 8002916:	e8df f003 	tbb	[pc, r3]
 800291a:	1b0a      	.short	0x1b0a
 800291c:	18180c18 	.word	0x18180c18
 8002920:	1918      	.short	0x1918
    Error_Handler();
 8002922:	f240 416d 	movw	r1, #1133	; 0x46d
 8002926:	480b      	ldr	r0, [pc, #44]	; (8002954 <_ZN13HardwareTimer22captureCompareCallbackEP17TIM_HandleTypeDef+0x4c>)
 8002928:	f000 fd41 	bl	80033ae <_Error_Handler>
 800292c:	e7ef      	b.n	800290e <_ZN13HardwareTimer22captureCompareCallbackEP17TIM_HandleTypeDef+0x6>
  uint32_t channel = htim->Channel;
 800292e:	2401      	movs	r4, #1
 8002930:	e000      	b.n	8002934 <_ZN13HardwareTimer22captureCompareCallbackEP17TIM_HandleTypeDef+0x2c>
        channel = 3;
 8002932:	2403      	movs	r4, #3
  timerObj_t *obj = get_timer_obj(htim);
 8002934:	4628      	mov	r0, r5
 8002936:	f000 fd3b 	bl	80033b0 <get_timer_obj>
  HardwareTimer *HT = (HardwareTimer *)(obj->__this);
 800293a:	6800      	ldr	r0, [r0, #0]
  if (HT->callbacks[channel]) {
 800293c:	1da3      	adds	r3, r4, #6
 800293e:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 8002942:	6883      	ldr	r3, [r0, #8]
 8002944:	b10b      	cbz	r3, 800294a <_ZN13HardwareTimer22captureCompareCallbackEP17TIM_HandleTypeDef+0x42>
    HT->callbacks[channel]();
 8002946:	f7ff ffbc 	bl	80028c2 <_ZNKSt8functionIFvvEEclEv>
}
 800294a:	bd38      	pop	{r3, r4, r5, pc}
        channel = 4;
 800294c:	2404      	movs	r4, #4
        break;
 800294e:	e7f1      	b.n	8002934 <_ZN13HardwareTimer22captureCompareCallbackEP17TIM_HandleTypeDef+0x2c>
        channel = 2;
 8002950:	2402      	movs	r4, #2
 8002952:	e7ef      	b.n	8002934 <_ZN13HardwareTimer22captureCompareCallbackEP17TIM_HandleTypeDef+0x2c>
 8002954:	08003b90 	.word	0x08003b90

08002958 <HAL_TIM_IC_CaptureCallback>:
  {
 8002958:	b508      	push	{r3, lr}
    HardwareTimer::captureCompareCallback(htim);
 800295a:	f7ff ffd5 	bl	8002908 <_ZN13HardwareTimer22captureCompareCallbackEP17TIM_HandleTypeDef>
  }
 800295e:	bd08      	pop	{r3, pc}

08002960 <HAL_TIM_OC_DelayElapsedCallback>:
  {
 8002960:	b508      	push	{r3, lr}
    HardwareTimer::captureCompareCallback(htim);
 8002962:	f7ff ffd1 	bl	8002908 <_ZN13HardwareTimer22captureCompareCallbackEP17TIM_HandleTypeDef>
  }
 8002966:	bd08      	pop	{r3, pc}

08002968 <_ZN5Print5printEPKc>:
    }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str)
    {
      if (str == NULL) {
 8002968:	b161      	cbz	r1, 8002984 <_ZN5Print5printEPKc+0x1c>
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 800296a:	b570      	push	{r4, r5, r6, lr}
 800296c:	4604      	mov	r4, r0
 800296e:	460d      	mov	r5, r1
        return 0;
      }
      return write((const uint8_t *)str, strlen(str));
 8002970:	6803      	ldr	r3, [r0, #0]
 8002972:	685e      	ldr	r6, [r3, #4]
 8002974:	4608      	mov	r0, r1
 8002976:	f7fd fbe9 	bl	800014c <strlen>
 800297a:	4602      	mov	r2, r0
 800297c:	4629      	mov	r1, r5
 800297e:	4620      	mov	r0, r4
 8002980:	47b0      	blx	r6
  return write(str);
}
 8002982:	bd70      	pop	{r4, r5, r6, pc}
        return 0;
 8002984:	2000      	movs	r0, #0
 8002986:	4770      	bx	lr

08002988 <_ZN6Stream9timedReadEv>:

#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait

// private method to read stream with timeout
int Stream::timedRead()
{
 8002988:	b510      	push	{r4, lr}
 800298a:	4604      	mov	r4, r0
  int c;
  _startMillis = millis();
 800298c:	f000 f841 	bl	8002a12 <millis>
 8002990:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	4620      	mov	r0, r4
 8002998:	4798      	blx	r3
    if (c >= 0) {
 800299a:	2800      	cmp	r0, #0
 800299c:	da08      	bge.n	80029b0 <_ZN6Stream9timedReadEv+0x28>
      return c;
    }
  } while (millis() - _startMillis < _timeout);
 800299e:	f000 f838 	bl	8002a12 <millis>
 80029a2:	68e3      	ldr	r3, [r4, #12]
 80029a4:	1ac0      	subs	r0, r0, r3
 80029a6:	68a3      	ldr	r3, [r4, #8]
 80029a8:	4298      	cmp	r0, r3
 80029aa:	d3f2      	bcc.n	8002992 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
 80029ac:	f04f 30ff 	mov.w	r0, #4294967295
}
 80029b0:	bd10      	pop	{r4, pc}

080029b2 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 80029b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029b4:	4607      	mov	r7, r0
 80029b6:	460c      	mov	r4, r1
 80029b8:	4616      	mov	r6, r2
  size_t count = 0;
 80029ba:	2500      	movs	r5, #0
  while (count < length) {
 80029bc:	42b5      	cmp	r5, r6
 80029be:	d20a      	bcs.n	80029d6 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
 80029c0:	4638      	mov	r0, r7
 80029c2:	f7ff ffe1 	bl	8002988 <_ZN6Stream9timedReadEv>
    if (c < 0) {
 80029c6:	2800      	cmp	r0, #0
 80029c8:	db05      	blt.n	80029d6 <_ZN6Stream9readBytesEPcj+0x24>
      break;
    }
    *buffer++ = (char)c;
 80029ca:	4621      	mov	r1, r4
 80029cc:	f801 0b01 	strb.w	r0, [r1], #1
    count++;
 80029d0:	3501      	adds	r5, #1
    *buffer++ = (char)c;
 80029d2:	460c      	mov	r4, r1
  while (count < length) {
 80029d4:	e7f2      	b.n	80029bc <_ZN6Stream9readBytesEPcj+0xa>
  }
  return count;
}
 80029d6:	4628      	mov	r0, r5
 80029d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080029da <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
 80029da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (length < 1) {
 80029de:	4698      	mov	r8, r3
 80029e0:	b19b      	cbz	r3, 8002a0a <_ZN6Stream14readBytesUntilEcPcj+0x30>
 80029e2:	4606      	mov	r6, r0
 80029e4:	460f      	mov	r7, r1
 80029e6:	4614      	mov	r4, r2
    return 0;
  }
  size_t index = 0;
 80029e8:	2500      	movs	r5, #0
 80029ea:	e004      	b.n	80029f6 <_ZN6Stream14readBytesUntilEcPcj+0x1c>
  while (index < length) {
    int c = timedRead();
    if (c < 0 || c == terminator) {
      break;
    }
    *buffer++ = (char)c;
 80029ec:	4622      	mov	r2, r4
 80029ee:	f802 0b01 	strb.w	r0, [r2], #1
    index++;
 80029f2:	3501      	adds	r5, #1
    *buffer++ = (char)c;
 80029f4:	4614      	mov	r4, r2
  while (index < length) {
 80029f6:	4545      	cmp	r5, r8
 80029f8:	d208      	bcs.n	8002a0c <_ZN6Stream14readBytesUntilEcPcj+0x32>
    int c = timedRead();
 80029fa:	4630      	mov	r0, r6
 80029fc:	f7ff ffc4 	bl	8002988 <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) {
 8002a00:	2800      	cmp	r0, #0
 8002a02:	db03      	blt.n	8002a0c <_ZN6Stream14readBytesUntilEcPcj+0x32>
 8002a04:	4287      	cmp	r7, r0
 8002a06:	d1f1      	bne.n	80029ec <_ZN6Stream14readBytesUntilEcPcj+0x12>
 8002a08:	e000      	b.n	8002a0c <_ZN6Stream14readBytesUntilEcPcj+0x32>
    return 0;
 8002a0a:	461d      	mov	r5, r3
  }
  return index; // return number of characters, not including null terminator
}
 8002a0c:	4628      	mov	r0, r5
 8002a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002a12 <millis>:
#ifdef __cplusplus
extern "C" {
#endif

uint32_t millis(void)
{
 8002a12:	b508      	push	{r3, lr}
  // ToDo: ensure no interrupts
  return getCurrentMillis();
 8002a14:	f000 f90c 	bl	8002c30 <getCurrentMillis>
}
 8002a18:	bd08      	pop	{r3, pc}

08002a1a <_ZL10get_pin_idt>:
  * @brief  This function returns the pin ID function of the HAL PIN definition
  * @param  pin : one of the gpio pin
  * @retval None
  */
static uint8_t get_pin_id(uint16_t pin)
{
 8002a1a:	4603      	mov	r3, r0
  uint8_t id = 0;
 8002a1c:	2000      	movs	r0, #0

  while (pin != 0x0001) {
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d003      	beq.n	8002a2a <_ZL10get_pin_idt+0x10>
    pin = pin >> 1;
 8002a22:	085b      	lsrs	r3, r3, #1
    id++;
 8002a24:	3001      	adds	r0, #1
 8002a26:	b2c0      	uxtb	r0, r0
  while (pin != 0x0001) {
 8002a28:	e7f9      	b.n	8002a1e <_ZL10get_pin_idt+0x4>
  }

  return id;
}
 8002a2a:	4770      	bx	lr

08002a2c <_Z41__static_initialization_and_destruction_0ii>:
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
}

#endif /* !STM32MP1xx && !STM32L5xx */
#ifdef __cplusplus
}
 8002a2c:	b510      	push	{r4, lr}
 8002a2e:	2801      	cmp	r0, #1
 8002a30:	d005      	beq.n	8002a3e <_Z41__static_initialization_and_destruction_0ii+0x12>
static gpio_irq_conf_str gpio_irq_conf[NB_EXTI] = {
 8002a32:	b918      	cbnz	r0, 8002a3c <_Z41__static_initialization_and_destruction_0ii+0x10>
 8002a34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a38:	4299      	cmp	r1, r3
 8002a3a:	d046      	beq.n	8002aca <_Z41__static_initialization_and_destruction_0ii+0x9e>
}
 8002a3c:	bd10      	pop	{r4, pc}
 8002a3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a42:	4299      	cmp	r1, r3
 8002a44:	d1f5      	bne.n	8002a32 <_Z41__static_initialization_and_destruction_0ii+0x6>
};
 8002a46:	4b27      	ldr	r3, [pc, #156]	; (8002ae4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8002a48:	2206      	movs	r2, #6
 8002a4a:	701a      	strb	r2, [r3, #0]
    _Function_base() : _M_manager(nullptr) { }
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	60da      	str	r2, [r3, #12]
 8002a50:	2407      	movs	r4, #7
 8002a52:	751c      	strb	r4, [r3, #20]
 8002a54:	621a      	str	r2, [r3, #32]
 8002a56:	2408      	movs	r4, #8
 8002a58:	f883 4028 	strb.w	r4, [r3, #40]	; 0x28
 8002a5c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a5e:	2409      	movs	r4, #9
 8002a60:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
 8002a64:	649a      	str	r2, [r3, #72]	; 0x48
 8002a66:	240a      	movs	r4, #10
 8002a68:	f883 4050 	strb.w	r4, [r3, #80]	; 0x50
 8002a6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a6e:	2417      	movs	r4, #23
 8002a70:	f883 4064 	strb.w	r4, [r3, #100]	; 0x64
 8002a74:	671a      	str	r2, [r3, #112]	; 0x70
 8002a76:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
 8002a7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002a7e:	f883 408c 	strb.w	r4, [r3, #140]	; 0x8c
 8002a82:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8002a86:	f883 40a0 	strb.w	r4, [r3, #160]	; 0xa0
 8002a8a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8002a8e:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
 8002a92:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8002a96:	2428      	movs	r4, #40	; 0x28
 8002a98:	f883 40c8 	strb.w	r4, [r3, #200]	; 0xc8
 8002a9c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002aa0:	f883 40dc 	strb.w	r4, [r3, #220]	; 0xdc
 8002aa4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002aa8:	f883 40f0 	strb.w	r4, [r3, #240]	; 0xf0
 8002aac:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 8002ab0:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
 8002ab4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8002ab8:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
 8002abc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8002ac0:	f883 412c 	strb.w	r4, [r3, #300]	; 0x12c
 8002ac4:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8002ac8:	e7b3      	b.n	8002a32 <_Z41__static_initialization_and_destruction_0ii+0x6>
static gpio_irq_conf_str gpio_irq_conf[NB_EXTI] = {
 8002aca:	4c07      	ldr	r4, [pc, #28]	; (8002ae8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8002acc:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8002ace:	429c      	cmp	r4, r3
 8002ad0:	d0b4      	beq.n	8002a3c <_Z41__static_initialization_and_destruction_0ii+0x10>
 8002ad2:	3c14      	subs	r4, #20
      if (_M_manager)
 8002ad4:	68e3      	ldr	r3, [r4, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f8      	beq.n	8002acc <_Z41__static_initialization_and_destruction_0ii+0xa0>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8002ada:	1d20      	adds	r0, r4, #4
 8002adc:	2203      	movs	r2, #3
 8002ade:	4601      	mov	r1, r0
 8002ae0:	4798      	blx	r3
} gpio_irq_conf_str;
 8002ae2:	e7f3      	b.n	8002acc <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8002ae4:	20000270 	.word	0x20000270
 8002ae8:	200003b0 	.word	0x200003b0

08002aec <EXTI0_IRQHandler>:
{
 8002aec:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002aee:	2001      	movs	r0, #1
 8002af0:	f7fe f812 	bl	8000b18 <HAL_GPIO_EXTI_IRQHandler>
}
 8002af4:	bd08      	pop	{r3, pc}

08002af6 <EXTI1_IRQHandler>:
{
 8002af6:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002af8:	2002      	movs	r0, #2
 8002afa:	f7fe f80d 	bl	8000b18 <HAL_GPIO_EXTI_IRQHandler>
}
 8002afe:	bd08      	pop	{r3, pc}

08002b00 <EXTI2_IRQHandler>:
{
 8002b00:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002b02:	2004      	movs	r0, #4
 8002b04:	f7fe f808 	bl	8000b18 <HAL_GPIO_EXTI_IRQHandler>
}
 8002b08:	bd08      	pop	{r3, pc}

08002b0a <EXTI3_IRQHandler>:
{
 8002b0a:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002b0c:	2008      	movs	r0, #8
 8002b0e:	f7fe f803 	bl	8000b18 <HAL_GPIO_EXTI_IRQHandler>
}
 8002b12:	bd08      	pop	{r3, pc}

08002b14 <EXTI4_IRQHandler>:
{
 8002b14:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002b16:	2010      	movs	r0, #16
 8002b18:	f7fd fffe 	bl	8000b18 <HAL_GPIO_EXTI_IRQHandler>
}
 8002b1c:	bd08      	pop	{r3, pc}

08002b1e <EXTI9_5_IRQHandler>:
{
 8002b1e:	b510      	push	{r4, lr}
  for (pin = GPIO_PIN_5; pin <= GPIO_PIN_9; pin = pin << 1) {
 8002b20:	2420      	movs	r4, #32
 8002b22:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8002b26:	d804      	bhi.n	8002b32 <EXTI9_5_IRQHandler+0x14>
    HAL_GPIO_EXTI_IRQHandler(pin);
 8002b28:	b2a0      	uxth	r0, r4
 8002b2a:	f7fd fff5 	bl	8000b18 <HAL_GPIO_EXTI_IRQHandler>
  for (pin = GPIO_PIN_5; pin <= GPIO_PIN_9; pin = pin << 1) {
 8002b2e:	0064      	lsls	r4, r4, #1
 8002b30:	e7f7      	b.n	8002b22 <EXTI9_5_IRQHandler+0x4>
}
 8002b32:	bd10      	pop	{r4, pc}

08002b34 <EXTI15_10_IRQHandler>:
{
 8002b34:	b510      	push	{r4, lr}
  for (pin = GPIO_PIN_10; pin <= GPIO_PIN_15; pin = pin << 1) {
 8002b36:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002b3a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8002b3e:	d804      	bhi.n	8002b4a <EXTI15_10_IRQHandler+0x16>
    HAL_GPIO_EXTI_IRQHandler(pin);
 8002b40:	b2a0      	uxth	r0, r4
 8002b42:	f7fd ffe9 	bl	8000b18 <HAL_GPIO_EXTI_IRQHandler>
  for (pin = GPIO_PIN_10; pin <= GPIO_PIN_15; pin = pin << 1) {
 8002b46:	0064      	lsls	r4, r4, #1
 8002b48:	e7f7      	b.n	8002b3a <EXTI15_10_IRQHandler+0x6>
}
 8002b4a:	bd10      	pop	{r4, pc}

08002b4c <HAL_GPIO_EXTI_Callback>:
{
 8002b4c:	b508      	push	{r3, lr}
  uint8_t irq_id = get_pin_id(GPIO_Pin);
 8002b4e:	f7ff ff64 	bl	8002a1a <_ZL10get_pin_idt>
  if (gpio_irq_conf[irq_id].callback != NULL) {
 8002b52:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8002b56:	4804      	ldr	r0, [pc, #16]	; (8002b68 <HAL_GPIO_EXTI_Callback+0x1c>)
 8002b58:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002b5c:	3004      	adds	r0, #4
    bool _M_empty() const { return !_M_manager; }
 8002b5e:	6883      	ldr	r3, [r0, #8]
 8002b60:	b10b      	cbz	r3, 8002b66 <HAL_GPIO_EXTI_Callback+0x1a>
    gpio_irq_conf[irq_id].callback();
 8002b62:	f7ff feae 	bl	80028c2 <_ZNKSt8functionIFvvEEclEv>
}
 8002b66:	bd08      	pop	{r3, pc}
 8002b68:	20000270 	.word	0x20000270

08002b6c <_GLOBAL__sub_I__Z22stm32_interrupt_enableP12GPIO_TypeDeftSt8functionIFvvEEm>:
}
 8002b6c:	b508      	push	{r3, lr}
 8002b6e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002b72:	2001      	movs	r0, #1
 8002b74:	f7ff ff5a 	bl	8002a2c <_Z41__static_initialization_and_destruction_0ii>
 8002b78:	bd08      	pop	{r3, pc}

08002b7a <_GLOBAL__sub_D__Z22stm32_interrupt_enableP12GPIO_TypeDeftSt8functionIFvvEEm>:
 8002b7a:	b508      	push	{r3, lr}
 8002b7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002b80:	2000      	movs	r0, #0
 8002b82:	f7ff ff53 	bl	8002a2c <_Z41__static_initialization_and_destruction_0ii>
 8002b86:	bd08      	pop	{r3, pc}

08002b88 <set_GPIO_Port_Clock>:
#endif
};

/* Enable GPIO clock and return GPIO base address */
GPIO_TypeDef *set_GPIO_Port_Clock(uint32_t port_idx)
{
 8002b88:	b086      	sub	sp, #24
  GPIO_TypeDef *gpioPort = 0;
  switch (port_idx) {
 8002b8a:	2804      	cmp	r0, #4
 8002b8c:	d841      	bhi.n	8002c12 <set_GPIO_Port_Clock+0x8a>
 8002b8e:	e8df f000 	tbb	[pc, r0]
 8002b92:	1003      	.short	0x1003
 8002b94:	281c      	.short	0x281c
 8002b96:	34          	.byte	0x34
 8002b97:	00          	.byte	0x00
    case PortA:
      gpioPort = (GPIO_TypeDef *)GPIOA_BASE;
      __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b98:	4b1f      	ldr	r3, [pc, #124]	; (8002c18 <set_GPIO_Port_Clock+0x90>)
 8002b9a:	699a      	ldr	r2, [r3, #24]
 8002b9c:	f042 0204 	orr.w	r2, r2, #4
 8002ba0:	619a      	str	r2, [r3, #24]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	9301      	str	r3, [sp, #4]
 8002baa:	9b01      	ldr	r3, [sp, #4]
      gpioPort = (GPIO_TypeDef *)GPIOA_BASE;
 8002bac:	481b      	ldr	r0, [pc, #108]	; (8002c1c <set_GPIO_Port_Clock+0x94>)
      //TBD: error management
      gpioPort = 0;
      break;
  }
  return gpioPort;
}
 8002bae:	b006      	add	sp, #24
 8002bb0:	4770      	bx	lr
      __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb2:	4b19      	ldr	r3, [pc, #100]	; (8002c18 <set_GPIO_Port_Clock+0x90>)
 8002bb4:	699a      	ldr	r2, [r3, #24]
 8002bb6:	f042 0208 	orr.w	r2, r2, #8
 8002bba:	619a      	str	r2, [r3, #24]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	9302      	str	r3, [sp, #8]
 8002bc4:	9b02      	ldr	r3, [sp, #8]
      gpioPort = (GPIO_TypeDef *)GPIOB_BASE;
 8002bc6:	4816      	ldr	r0, [pc, #88]	; (8002c20 <set_GPIO_Port_Clock+0x98>)
      break;
 8002bc8:	e7f1      	b.n	8002bae <set_GPIO_Port_Clock+0x26>
      __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bca:	4b13      	ldr	r3, [pc, #76]	; (8002c18 <set_GPIO_Port_Clock+0x90>)
 8002bcc:	699a      	ldr	r2, [r3, #24]
 8002bce:	f042 0210 	orr.w	r2, r2, #16
 8002bd2:	619a      	str	r2, [r3, #24]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	9303      	str	r3, [sp, #12]
 8002bdc:	9b03      	ldr	r3, [sp, #12]
      gpioPort = (GPIO_TypeDef *)GPIOC_BASE;
 8002bde:	4811      	ldr	r0, [pc, #68]	; (8002c24 <set_GPIO_Port_Clock+0x9c>)
      break;
 8002be0:	e7e5      	b.n	8002bae <set_GPIO_Port_Clock+0x26>
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8002be2:	4b0d      	ldr	r3, [pc, #52]	; (8002c18 <set_GPIO_Port_Clock+0x90>)
 8002be4:	699a      	ldr	r2, [r3, #24]
 8002be6:	f042 0220 	orr.w	r2, r2, #32
 8002bea:	619a      	str	r2, [r3, #24]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f003 0320 	and.w	r3, r3, #32
 8002bf2:	9304      	str	r3, [sp, #16]
 8002bf4:	9b04      	ldr	r3, [sp, #16]
      gpioPort = (GPIO_TypeDef *)GPIOD_BASE;
 8002bf6:	480c      	ldr	r0, [pc, #48]	; (8002c28 <set_GPIO_Port_Clock+0xa0>)
      break;
 8002bf8:	e7d9      	b.n	8002bae <set_GPIO_Port_Clock+0x26>
      __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bfa:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <set_GPIO_Port_Clock+0x90>)
 8002bfc:	699a      	ldr	r2, [r3, #24]
 8002bfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c02:	619a      	str	r2, [r3, #24]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0a:	9305      	str	r3, [sp, #20]
 8002c0c:	9b05      	ldr	r3, [sp, #20]
      gpioPort = (GPIO_TypeDef *)GPIOE_BASE;
 8002c0e:	4807      	ldr	r0, [pc, #28]	; (8002c2c <set_GPIO_Port_Clock+0xa4>)
      break;
 8002c10:	e7cd      	b.n	8002bae <set_GPIO_Port_Clock+0x26>
      gpioPort = (GPIO_TypeDef *)GPIOE_BASE;
 8002c12:	2000      	movs	r0, #0
  return gpioPort;
 8002c14:	e7cb      	b.n	8002bae <set_GPIO_Port_Clock+0x26>
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40010800 	.word	0x40010800
 8002c20:	40010c00 	.word	0x40010c00
 8002c24:	40011000 	.word	0x40011000
 8002c28:	40011400 	.word	0x40011400
 8002c2c:	40011800 	.word	0x40011800

08002c30 <getCurrentMillis>:
  * @brief  Function called wto read the current millisecond
  * @param  None
  * @retval None
  */
uint32_t getCurrentMillis(void)
{
 8002c30:	b508      	push	{r3, lr}
  return HAL_GetTick();
 8002c32:	f7fd fd65 	bl	8000700 <HAL_GetTick>
}
 8002c36:	bd08      	pop	{r3, pc}

08002c38 <pin_function>:

/**
 * Configure pin (mode, speed, output type and pull-up/pull-down)
 */
void pin_function(PinName pin, int function)
{
 8002c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c3c:	b085      	sub	sp, #20
 8002c3e:	4605      	mov	r5, r0
 8002c40:	4688      	mov	r8, r1
  /* Get the pin information */
  uint32_t mode  = STM_PIN_FUNCTION(function);
 8002c42:	f001 0707 	and.w	r7, r1, #7
  uint32_t afnum = STM_PIN_AFNUM(function);
 8002c46:	f3c1 2906 	ubfx	r9, r1, #8, #7
  uint32_t port = STM_PORT(pin);
 8002c4a:	f3c0 1603 	ubfx	r6, r0, #4, #4
  uint32_t ll_pin  = STM_LL_GPIO_PIN(pin);
 8002c4e:	f000 020f 	and.w	r2, r0, #15
 8002c52:	4bb3      	ldr	r3, [pc, #716]	; (8002f20 <pin_function+0x2e8>)
 8002c54:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
  uint32_t ll_mode = 0;

  if (pin == (PinName)NC) {
 8002c58:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002c5c:	d00e      	beq.n	8002c7c <pin_function+0x44>
    return;
  }
#endif /* DUALPAD_ANALOG_SWITCH */

  /* Enable GPIO clock */
  GPIO_TypeDef *gpio = set_GPIO_Port_Clock(port);
 8002c5e:	4630      	mov	r0, r6
 8002c60:	f7ff ff92 	bl	8002b88 <set_GPIO_Port_Clock>
 8002c64:	4606      	mov	r6, r0
   *  For most families there are dedicated registers so it is
   *  not so important, register can be set at any time.
   *  But for families like F1, speed only applies to output.
   */
#if defined (STM32F1xx)
  if (mode == STM_PIN_OUTPUT) {
 8002c66:	2f01      	cmp	r7, #1
 8002c68:	d00d      	beq.n	8002c86 <pin_function+0x4e>
#endif
#if defined (STM32F1xx)
  }
#endif

  switch (mode) {
 8002c6a:	2f03      	cmp	r7, #3
 8002c6c:	f200 82ca 	bhi.w	8003204 <pin_function+0x5cc>
 8002c70:	e8df f017 	tbh	[pc, r7, lsl #1]
 8002c74:	001f006d 	.word	0x001f006d
 8002c78:	02cf019c 	.word	0x02cf019c
    Error_Handler();
 8002c7c:	219e      	movs	r1, #158	; 0x9e
 8002c7e:	48a9      	ldr	r0, [pc, #676]	; (8002f24 <pin_function+0x2ec>)
 8002c80:	f000 fb95 	bl	80033ae <_Error_Handler>
 8002c84:	e7eb      	b.n	8002c5e <pin_function+0x26>
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002c86:	0e21      	lsrs	r1, r4, #24
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8002c88:	5842      	ldr	r2, [r0, r1]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8a:	fa94 f3a4 	rbit	r3, r4
 8002c8e:	fab3 f383 	clz	r3, r3
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	2003      	movs	r0, #3
 8002c96:	fa00 f303 	lsl.w	r3, r0, r3
 8002c9a:	ea22 0303 	bic.w	r3, r2, r3
 8002c9e:	fa94 f2a4 	rbit	r2, r4
 8002ca2:	fab2 f282 	clz	r2, r2
 8002ca6:	0092      	lsls	r2, r2, #2
 8002ca8:	fa00 f202 	lsl.w	r2, r0, r2
 8002cac:	4313      	orrs	r3, r2
 8002cae:	5073      	str	r3, [r6, r1]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 8002cb0:	e7db      	b.n	8002c6a <pin_function+0x32>
      ll_mode = LL_GPIO_MODE_ALTERNATE;
      /* In case of ALT function, also set the afnum */
      pin_SetAFPin(gpio, pin, afnum);
      break;
    case STM_PIN_ANALOG:
      ll_mode = LL_GPIO_MODE_ANALOG;
 8002cb2:	46be      	mov	lr, r7
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002cb4:	ea4f 6c14 	mov.w	ip, r4, lsr #24
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002cb8:	f856 200c 	ldr.w	r2, [r6, ip]
 8002cbc:	fa94 f0a4 	rbit	r0, r4
 8002cc0:	fab0 f080 	clz	r0, r0
 8002cc4:	0080      	lsls	r0, r0, #2
 8002cc6:	230f      	movs	r3, #15
 8002cc8:	4083      	lsls	r3, r0
 8002cca:	ea22 0203 	bic.w	r2, r2, r3
 8002cce:	fa94 f1a4 	rbit	r1, r4
 8002cd2:	fab1 f181 	clz	r1, r1
 8002cd6:	0089      	lsls	r1, r1, #2
 8002cd8:	fa0e f301 	lsl.w	r3, lr, r1
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f846 300c 	str.w	r3, [r6, ip]
  } else {
    LL_GPIO_DisablePinAnalogControl(gpio, ll_pin);
  }
#endif

  if ((mode == STM_PIN_OUTPUT) || (mode == STM_PIN_ALTERNATE)) {
 8002ce2:	3f01      	subs	r7, #1
 8002ce4:	2f01      	cmp	r7, #1
 8002ce6:	f240 8297 	bls.w	8003218 <pin_function+0x5e0>
    } else {
      LL_GPIO_SetPinOutputType(gpio, ll_pin, LL_GPIO_OUTPUT_PUSHPULL);
    }
  }

  pin_PullConfig(gpio, ll_pin, STM_PIN_PUPD(function));
 8002cea:	f3c8 1801 	ubfx	r8, r8, #4, #2
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002cee:	0e21      	lsrs	r1, r4, #24
  return (READ_BIT(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U))) >> (POSITION_VAL(Pin) * 4U));
 8002cf0:	5870      	ldr	r0, [r6, r1]
 8002cf2:	fa94 f3a4 	rbit	r3, r4
 8002cf6:	fab3 f383 	clz	r3, r3
 8002cfa:	009a      	lsls	r2, r3, #2
 8002cfc:	230f      	movs	r3, #15
 8002cfe:	4093      	lsls	r3, r2
 8002d00:	4003      	ands	r3, r0
 8002d02:	fa94 f2a4 	rbit	r2, r4
 8002d06:	fab2 f282 	clz	r2, r2
 8002d0a:	0092      	lsls	r2, r2, #2
 8002d0c:	40d3      	lsrs	r3, r2
{
#ifdef STM32F1xx
  uint32_t function = LL_GPIO_GetPinMode(gpio, ll_pin);
#endif
  hsem_lock(CFG_HW_GPIO_SEMID, HSEM_LOCK_DEFAULT_RETRY);
  switch (pull_config) {
 8002d0e:	f1b8 0f01 	cmp.w	r8, #1
 8002d12:	f000 82a8 	beq.w	8003266 <pin_function+0x62e>
 8002d16:	f1b8 0f02 	cmp.w	r8, #2
 8002d1a:	f000 82e5 	beq.w	80032e8 <pin_function+0x6b0>
      LL_GPIO_SetPinPull(gpio, ll_pin, LL_GPIO_PULL_DOWN);
      break;
    default:
#ifdef STM32F1xx
      /*  Input+NoPull = Floating for F1 family */
      if (function == LL_GPIO_MODE_INPUT) {
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	f040 82b0 	bne.w	8003284 <pin_function+0x64c>
 8002d24:	fa94 f3a4 	rbit	r3, r4
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002d28:	fab3 f383 	clz	r3, r3
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	220f      	movs	r2, #15
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	ea20 0003 	bic.w	r0, r0, r3
 8002d38:	fa94 f4a4 	rbit	r4, r4
 8002d3c:	fab4 f484 	clz	r4, r4
 8002d40:	00a4      	lsls	r4, r4, #2
 8002d42:	2304      	movs	r3, #4
 8002d44:	fa03 f404 	lsl.w	r4, r3, r4
 8002d48:	4320      	orrs	r0, r4
 8002d4a:	5070      	str	r0, [r6, r1]
}
 8002d4c:	e29a      	b.n	8003284 <pin_function+0x64c>
}

static inline void pin_SetF1AFPin(uint32_t afnum)
{
  // Enable AFIO clock
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d4e:	4b76      	ldr	r3, [pc, #472]	; (8002f28 <pin_function+0x2f0>)
 8002d50:	699a      	ldr	r2, [r3, #24]
 8002d52:	f042 0201 	orr.w	r2, r2, #1
 8002d56:	619a      	str	r2, [r3, #24]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	9301      	str	r3, [sp, #4]
 8002d60:	9b01      	ldr	r3, [sp, #4]

  switch (afnum) {
 8002d62:	f109 39ff 	add.w	r9, r9, #4294967295
 8002d66:	f1b9 0f23 	cmp.w	r9, #35	; 0x23
 8002d6a:	d82c      	bhi.n	8002dc6 <pin_function+0x18e>
 8002d6c:	e8df f019 	tbh	[pc, r9, lsl #1]
 8002d70:	002e0024 	.word	0x002e0024
 8002d74:	003e0036 	.word	0x003e0036
 8002d78:	004e0046 	.word	0x004e0046
 8002d7c:	005e0056 	.word	0x005e0056
 8002d80:	006e0066 	.word	0x006e0066
 8002d84:	00800078 	.word	0x00800078
 8002d88:	00920088 	.word	0x00920088
 8002d8c:	00a2009a 	.word	0x00a2009a
 8002d90:	00b600ac 	.word	0x00b600ac
 8002d94:	00c600be 	.word	0x00c600be
 8002d98:	00e000d0 	.word	0x00e000d0
 8002d9c:	002b00e8 	.word	0x002b00e8
 8002da0:	002b002b 	.word	0x002b002b
 8002da4:	00f800f0 	.word	0x00f800f0
 8002da8:	002b002b 	.word	0x002b002b
 8002dac:	002b002b 	.word	0x002b002b
 8002db0:	01060100 	.word	0x01060100
 8002db4:	0116010e 	.word	0x0116010e
    case AFIO_SPI1_ENABLE:
      __HAL_AFIO_REMAP_SPI1_ENABLE();
 8002db8:	4a5c      	ldr	r2, [pc, #368]	; (8002f2c <pin_function+0x2f4>)
 8002dba:	6853      	ldr	r3, [r2, #4]
 8002dbc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002dc0:	f043 0301 	orr.w	r3, r3, #1
 8002dc4:	6053      	str	r3, [r2, #4]
      ll_mode = LL_GPIO_MODE_INPUT;
 8002dc6:	f04f 0e08 	mov.w	lr, #8
#endif
    default:
    case AFIO_NONE:
      break;
  }
}
 8002dca:	e773      	b.n	8002cb4 <pin_function+0x7c>
      __HAL_AFIO_REMAP_SPI1_DISABLE();
 8002dcc:	4a57      	ldr	r2, [pc, #348]	; (8002f2c <pin_function+0x2f4>)
 8002dce:	6853      	ldr	r3, [r2, #4]
 8002dd0:	f023 0301 	bic.w	r3, r3, #1
 8002dd4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002dd8:	6053      	str	r3, [r2, #4]
      break;
 8002dda:	e7f4      	b.n	8002dc6 <pin_function+0x18e>
      __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002ddc:	4a53      	ldr	r2, [pc, #332]	; (8002f2c <pin_function+0x2f4>)
 8002dde:	6853      	ldr	r3, [r2, #4]
 8002de0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002de4:	f043 0302 	orr.w	r3, r3, #2
 8002de8:	6053      	str	r3, [r2, #4]
      break;
 8002dea:	e7ec      	b.n	8002dc6 <pin_function+0x18e>
      __HAL_AFIO_REMAP_I2C1_DISABLE();
 8002dec:	4a4f      	ldr	r2, [pc, #316]	; (8002f2c <pin_function+0x2f4>)
 8002dee:	6853      	ldr	r3, [r2, #4]
 8002df0:	f023 0302 	bic.w	r3, r3, #2
 8002df4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002df8:	6053      	str	r3, [r2, #4]
      break;
 8002dfa:	e7e4      	b.n	8002dc6 <pin_function+0x18e>
      __HAL_AFIO_REMAP_USART1_ENABLE();
 8002dfc:	4a4b      	ldr	r2, [pc, #300]	; (8002f2c <pin_function+0x2f4>)
 8002dfe:	6853      	ldr	r3, [r2, #4]
 8002e00:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002e04:	f043 0304 	orr.w	r3, r3, #4
 8002e08:	6053      	str	r3, [r2, #4]
      break;
 8002e0a:	e7dc      	b.n	8002dc6 <pin_function+0x18e>
      __HAL_AFIO_REMAP_USART1_DISABLE();
 8002e0c:	4a47      	ldr	r2, [pc, #284]	; (8002f2c <pin_function+0x2f4>)
 8002e0e:	6853      	ldr	r3, [r2, #4]
 8002e10:	f023 0304 	bic.w	r3, r3, #4
 8002e14:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002e18:	6053      	str	r3, [r2, #4]
      break;
 8002e1a:	e7d4      	b.n	8002dc6 <pin_function+0x18e>
      __HAL_AFIO_REMAP_USART2_ENABLE();
 8002e1c:	4a43      	ldr	r2, [pc, #268]	; (8002f2c <pin_function+0x2f4>)
 8002e1e:	6853      	ldr	r3, [r2, #4]
 8002e20:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002e24:	f043 0308 	orr.w	r3, r3, #8
 8002e28:	6053      	str	r3, [r2, #4]
      break;
 8002e2a:	e7cc      	b.n	8002dc6 <pin_function+0x18e>
      __HAL_AFIO_REMAP_USART2_DISABLE();
 8002e2c:	4a3f      	ldr	r2, [pc, #252]	; (8002f2c <pin_function+0x2f4>)
 8002e2e:	6853      	ldr	r3, [r2, #4]
 8002e30:	f023 0308 	bic.w	r3, r3, #8
 8002e34:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002e38:	6053      	str	r3, [r2, #4]
      break;
 8002e3a:	e7c4      	b.n	8002dc6 <pin_function+0x18e>
      __HAL_AFIO_REMAP_USART3_ENABLE();
 8002e3c:	4a3b      	ldr	r2, [pc, #236]	; (8002f2c <pin_function+0x2f4>)
 8002e3e:	6853      	ldr	r3, [r2, #4]
 8002e40:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002e44:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002e48:	6053      	str	r3, [r2, #4]
      break;
 8002e4a:	e7bc      	b.n	8002dc6 <pin_function+0x18e>
      __HAL_AFIO_REMAP_USART3_PARTIAL();
 8002e4c:	4a37      	ldr	r2, [pc, #220]	; (8002f2c <pin_function+0x2f4>)
 8002e4e:	6853      	ldr	r3, [r2, #4]
 8002e50:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002e54:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002e58:	f043 0310 	orr.w	r3, r3, #16
 8002e5c:	6053      	str	r3, [r2, #4]
      break;
 8002e5e:	e7b2      	b.n	8002dc6 <pin_function+0x18e>
      __HAL_AFIO_REMAP_USART3_DISABLE();
 8002e60:	4a32      	ldr	r2, [pc, #200]	; (8002f2c <pin_function+0x2f4>)
 8002e62:	6853      	ldr	r3, [r2, #4]
 8002e64:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002e68:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002e6c:	6053      	str	r3, [r2, #4]
      break;
 8002e6e:	e7aa      	b.n	8002dc6 <pin_function+0x18e>
      __HAL_AFIO_REMAP_TIM1_ENABLE();
 8002e70:	4a2e      	ldr	r2, [pc, #184]	; (8002f2c <pin_function+0x2f4>)
 8002e72:	6853      	ldr	r3, [r2, #4]
 8002e74:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002e78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e7c:	6053      	str	r3, [r2, #4]
      break;
 8002e7e:	e7a2      	b.n	8002dc6 <pin_function+0x18e>
      __HAL_AFIO_REMAP_TIM1_PARTIAL();
 8002e80:	4a2a      	ldr	r2, [pc, #168]	; (8002f2c <pin_function+0x2f4>)
 8002e82:	6853      	ldr	r3, [r2, #4]
 8002e84:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002e88:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e90:	6053      	str	r3, [r2, #4]
      break;
 8002e92:	e798      	b.n	8002dc6 <pin_function+0x18e>
      __HAL_AFIO_REMAP_TIM1_DISABLE();
 8002e94:	4a25      	ldr	r2, [pc, #148]	; (8002f2c <pin_function+0x2f4>)
 8002e96:	6853      	ldr	r3, [r2, #4]
 8002e98:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002e9c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002ea0:	6053      	str	r3, [r2, #4]
      break;
 8002ea2:	e790      	b.n	8002dc6 <pin_function+0x18e>
      __HAL_AFIO_REMAP_TIM2_ENABLE();
 8002ea4:	4a21      	ldr	r2, [pc, #132]	; (8002f2c <pin_function+0x2f4>)
 8002ea6:	6853      	ldr	r3, [r2, #4]
 8002ea8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002eac:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002eb0:	6053      	str	r3, [r2, #4]
      break;
 8002eb2:	e788      	b.n	8002dc6 <pin_function+0x18e>
      __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8002eb4:	4a1d      	ldr	r2, [pc, #116]	; (8002f2c <pin_function+0x2f4>)
 8002eb6:	6853      	ldr	r3, [r2, #4]
 8002eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ebc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002ec0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ec4:	6053      	str	r3, [r2, #4]
      break;
 8002ec6:	e77e      	b.n	8002dc6 <pin_function+0x18e>
      __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002ec8:	4a18      	ldr	r2, [pc, #96]	; (8002f2c <pin_function+0x2f4>)
 8002eca:	6853      	ldr	r3, [r2, #4]
 8002ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed8:	6053      	str	r3, [r2, #4]
      break;
 8002eda:	e774      	b.n	8002dc6 <pin_function+0x18e>
      __HAL_AFIO_REMAP_TIM2_DISABLE();
 8002edc:	4a13      	ldr	r2, [pc, #76]	; (8002f2c <pin_function+0x2f4>)
 8002ede:	6853      	ldr	r3, [r2, #4]
 8002ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ee4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002ee8:	6053      	str	r3, [r2, #4]
      break;
 8002eea:	e76c      	b.n	8002dc6 <pin_function+0x18e>
      __HAL_AFIO_REMAP_TIM3_ENABLE();
 8002eec:	4a0f      	ldr	r2, [pc, #60]	; (8002f2c <pin_function+0x2f4>)
 8002eee:	6853      	ldr	r3, [r2, #4]
 8002ef0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002ef4:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8002ef8:	6053      	str	r3, [r2, #4]
      break;
 8002efa:	e764      	b.n	8002dc6 <pin_function+0x18e>
      __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002efc:	4a0b      	ldr	r2, [pc, #44]	; (8002f2c <pin_function+0x2f4>)
 8002efe:	6853      	ldr	r3, [r2, #4]
 8002f00:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002f04:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002f08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f0c:	6053      	str	r3, [r2, #4]
      break;
 8002f0e:	e75a      	b.n	8002dc6 <pin_function+0x18e>
      __HAL_AFIO_REMAP_TIM3_DISABLE();
 8002f10:	4a06      	ldr	r2, [pc, #24]	; (8002f2c <pin_function+0x2f4>)
 8002f12:	6853      	ldr	r3, [r2, #4]
 8002f14:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002f18:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002f1c:	6053      	str	r3, [r2, #4]
      break;
 8002f1e:	e752      	b.n	8002dc6 <pin_function+0x18e>
 8002f20:	08003c70 	.word	0x08003c70
 8002f24:	08003bfc 	.word	0x08003bfc
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40010000 	.word	0x40010000
      __HAL_AFIO_REMAP_TIM4_ENABLE();
 8002f30:	4aa3      	ldr	r2, [pc, #652]	; (80031c0 <pin_function+0x588>)
 8002f32:	6853      	ldr	r3, [r2, #4]
 8002f34:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002f38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f3c:	6053      	str	r3, [r2, #4]
      break;
 8002f3e:	e742      	b.n	8002dc6 <pin_function+0x18e>
      __HAL_AFIO_REMAP_TIM4_DISABLE();
 8002f40:	4a9f      	ldr	r2, [pc, #636]	; (80031c0 <pin_function+0x588>)
 8002f42:	6853      	ldr	r3, [r2, #4]
 8002f44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f48:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002f4c:	6053      	str	r3, [r2, #4]
      break;
 8002f4e:	e73a      	b.n	8002dc6 <pin_function+0x18e>
      __HAL_AFIO_REMAP_PD01_ENABLE();
 8002f50:	4a9b      	ldr	r2, [pc, #620]	; (80031c0 <pin_function+0x588>)
 8002f52:	6853      	ldr	r3, [r2, #4]
 8002f54:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f5c:	6053      	str	r3, [r2, #4]
      break;
 8002f5e:	e732      	b.n	8002dc6 <pin_function+0x18e>
      __HAL_AFIO_REMAP_PD01_DISABLE();
 8002f60:	4a97      	ldr	r2, [pc, #604]	; (80031c0 <pin_function+0x588>)
 8002f62:	6853      	ldr	r3, [r2, #4]
 8002f64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002f68:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002f6c:	6053      	str	r3, [r2, #4]
      break;
 8002f6e:	e72a      	b.n	8002dc6 <pin_function+0x18e>
      __HAL_AFIO_REMAP_SWJ_ENABLE();
 8002f70:	4a93      	ldr	r2, [pc, #588]	; (80031c0 <pin_function+0x588>)
 8002f72:	6853      	ldr	r3, [r2, #4]
 8002f74:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f78:	6053      	str	r3, [r2, #4]
      break;
 8002f7a:	e724      	b.n	8002dc6 <pin_function+0x18e>
      __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8002f7c:	4a90      	ldr	r2, [pc, #576]	; (80031c0 <pin_function+0x588>)
 8002f7e:	6853      	ldr	r3, [r2, #4]
 8002f80:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f88:	6053      	str	r3, [r2, #4]
      break;
 8002f8a:	e71c      	b.n	8002dc6 <pin_function+0x18e>
      __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f8c:	4a8c      	ldr	r2, [pc, #560]	; (80031c0 <pin_function+0x588>)
 8002f8e:	6853      	ldr	r3, [r2, #4]
 8002f90:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f98:	6053      	str	r3, [r2, #4]
      break;
 8002f9a:	e714      	b.n	8002dc6 <pin_function+0x18e>
      __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002f9c:	4a88      	ldr	r2, [pc, #544]	; (80031c0 <pin_function+0x588>)
 8002f9e:	6853      	ldr	r3, [r2, #4]
 8002fa0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002fa4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fa8:	6053      	str	r3, [r2, #4]
      break;
 8002faa:	e70c      	b.n	8002dc6 <pin_function+0x18e>
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002fac:	4b85      	ldr	r3, [pc, #532]	; (80031c4 <pin_function+0x58c>)
 8002fae:	699a      	ldr	r2, [r3, #24]
 8002fb0:	f042 0201 	orr.w	r2, r2, #1
 8002fb4:	619a      	str	r2, [r3, #24]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	9302      	str	r3, [sp, #8]
 8002fbe:	9b02      	ldr	r3, [sp, #8]
  switch (afnum) {
 8002fc0:	f109 39ff 	add.w	r9, r9, #4294967295
 8002fc4:	f1b9 0f23 	cmp.w	r9, #35	; 0x23
 8002fc8:	d82c      	bhi.n	8003024 <pin_function+0x3ec>
 8002fca:	e8df f019 	tbh	[pc, r9, lsl #1]
 8002fce:	0024      	.short	0x0024
 8002fd0:	0036002e 	.word	0x0036002e
 8002fd4:	0046003e 	.word	0x0046003e
 8002fd8:	0056004e 	.word	0x0056004e
 8002fdc:	0066005e 	.word	0x0066005e
 8002fe0:	0078006e 	.word	0x0078006e
 8002fe4:	00880080 	.word	0x00880080
 8002fe8:	009a0092 	.word	0x009a0092
 8002fec:	00ac00a2 	.word	0x00ac00a2
 8002ff0:	00be00b6 	.word	0x00be00b6
 8002ff4:	00d000c6 	.word	0x00d000c6
 8002ff8:	00e000d8 	.word	0x00e000d8
 8002ffc:	002b002b 	.word	0x002b002b
 8003000:	00e8002b 	.word	0x00e8002b
 8003004:	002b00f0 	.word	0x002b00f0
 8003008:	002b002b 	.word	0x002b002b
 800300c:	00fd002b 	.word	0x00fd002b
 8003010:	010b0103 	.word	0x010b0103
 8003014:	0113      	.short	0x0113
      __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003016:	4a6a      	ldr	r2, [pc, #424]	; (80031c0 <pin_function+0x588>)
 8003018:	6853      	ldr	r3, [r2, #4]
 800301a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800301e:	f043 0301 	orr.w	r3, r3, #1
 8003022:	6053      	str	r3, [r2, #4]
      ll_mode = LL_GPIO_MODE_ALTERNATE;
 8003024:	f04f 0e09 	mov.w	lr, #9
}
 8003028:	e644      	b.n	8002cb4 <pin_function+0x7c>
      __HAL_AFIO_REMAP_SPI1_DISABLE();
 800302a:	4a65      	ldr	r2, [pc, #404]	; (80031c0 <pin_function+0x588>)
 800302c:	6853      	ldr	r3, [r2, #4]
 800302e:	f023 0301 	bic.w	r3, r3, #1
 8003032:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003036:	6053      	str	r3, [r2, #4]
      break;
 8003038:	e7f4      	b.n	8003024 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_I2C1_ENABLE();
 800303a:	4a61      	ldr	r2, [pc, #388]	; (80031c0 <pin_function+0x588>)
 800303c:	6853      	ldr	r3, [r2, #4]
 800303e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003042:	f043 0302 	orr.w	r3, r3, #2
 8003046:	6053      	str	r3, [r2, #4]
      break;
 8003048:	e7ec      	b.n	8003024 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_I2C1_DISABLE();
 800304a:	4a5d      	ldr	r2, [pc, #372]	; (80031c0 <pin_function+0x588>)
 800304c:	6853      	ldr	r3, [r2, #4]
 800304e:	f023 0302 	bic.w	r3, r3, #2
 8003052:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003056:	6053      	str	r3, [r2, #4]
      break;
 8003058:	e7e4      	b.n	8003024 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_USART1_ENABLE();
 800305a:	4a59      	ldr	r2, [pc, #356]	; (80031c0 <pin_function+0x588>)
 800305c:	6853      	ldr	r3, [r2, #4]
 800305e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003062:	f043 0304 	orr.w	r3, r3, #4
 8003066:	6053      	str	r3, [r2, #4]
      break;
 8003068:	e7dc      	b.n	8003024 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_USART1_DISABLE();
 800306a:	4a55      	ldr	r2, [pc, #340]	; (80031c0 <pin_function+0x588>)
 800306c:	6853      	ldr	r3, [r2, #4]
 800306e:	f023 0304 	bic.w	r3, r3, #4
 8003072:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003076:	6053      	str	r3, [r2, #4]
      break;
 8003078:	e7d4      	b.n	8003024 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_USART2_ENABLE();
 800307a:	4a51      	ldr	r2, [pc, #324]	; (80031c0 <pin_function+0x588>)
 800307c:	6853      	ldr	r3, [r2, #4]
 800307e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003082:	f043 0308 	orr.w	r3, r3, #8
 8003086:	6053      	str	r3, [r2, #4]
      break;
 8003088:	e7cc      	b.n	8003024 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_USART2_DISABLE();
 800308a:	4a4d      	ldr	r2, [pc, #308]	; (80031c0 <pin_function+0x588>)
 800308c:	6853      	ldr	r3, [r2, #4]
 800308e:	f023 0308 	bic.w	r3, r3, #8
 8003092:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003096:	6053      	str	r3, [r2, #4]
      break;
 8003098:	e7c4      	b.n	8003024 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_USART3_ENABLE();
 800309a:	4a49      	ldr	r2, [pc, #292]	; (80031c0 <pin_function+0x588>)
 800309c:	6853      	ldr	r3, [r2, #4]
 800309e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80030a2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80030a6:	6053      	str	r3, [r2, #4]
      break;
 80030a8:	e7bc      	b.n	8003024 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_USART3_PARTIAL();
 80030aa:	4a45      	ldr	r2, [pc, #276]	; (80031c0 <pin_function+0x588>)
 80030ac:	6853      	ldr	r3, [r2, #4]
 80030ae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80030b2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80030b6:	f043 0310 	orr.w	r3, r3, #16
 80030ba:	6053      	str	r3, [r2, #4]
      break;
 80030bc:	e7b2      	b.n	8003024 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_USART3_DISABLE();
 80030be:	4a40      	ldr	r2, [pc, #256]	; (80031c0 <pin_function+0x588>)
 80030c0:	6853      	ldr	r3, [r2, #4]
 80030c2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80030c6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80030ca:	6053      	str	r3, [r2, #4]
      break;
 80030cc:	e7aa      	b.n	8003024 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_TIM1_ENABLE();
 80030ce:	4a3c      	ldr	r2, [pc, #240]	; (80031c0 <pin_function+0x588>)
 80030d0:	6853      	ldr	r3, [r2, #4]
 80030d2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80030d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030da:	6053      	str	r3, [r2, #4]
      break;
 80030dc:	e7a2      	b.n	8003024 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_TIM1_PARTIAL();
 80030de:	4a38      	ldr	r2, [pc, #224]	; (80031c0 <pin_function+0x588>)
 80030e0:	6853      	ldr	r3, [r2, #4]
 80030e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80030e6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80030ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030ee:	6053      	str	r3, [r2, #4]
      break;
 80030f0:	e798      	b.n	8003024 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_TIM1_DISABLE();
 80030f2:	4a33      	ldr	r2, [pc, #204]	; (80031c0 <pin_function+0x588>)
 80030f4:	6853      	ldr	r3, [r2, #4]
 80030f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80030fa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80030fe:	6053      	str	r3, [r2, #4]
      break;
 8003100:	e790      	b.n	8003024 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_TIM2_ENABLE();
 8003102:	4a2f      	ldr	r2, [pc, #188]	; (80031c0 <pin_function+0x588>)
 8003104:	6853      	ldr	r3, [r2, #4]
 8003106:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800310a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800310e:	6053      	str	r3, [r2, #4]
      break;
 8003110:	e788      	b.n	8003024 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8003112:	4a2b      	ldr	r2, [pc, #172]	; (80031c0 <pin_function+0x588>)
 8003114:	6853      	ldr	r3, [r2, #4]
 8003116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800311a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800311e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003122:	6053      	str	r3, [r2, #4]
      break;
 8003124:	e77e      	b.n	8003024 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8003126:	4a26      	ldr	r2, [pc, #152]	; (80031c0 <pin_function+0x588>)
 8003128:	6853      	ldr	r3, [r2, #4]
 800312a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800312e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003136:	6053      	str	r3, [r2, #4]
      break;
 8003138:	e774      	b.n	8003024 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_TIM2_DISABLE();
 800313a:	4a21      	ldr	r2, [pc, #132]	; (80031c0 <pin_function+0x588>)
 800313c:	6853      	ldr	r3, [r2, #4]
 800313e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003142:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003146:	6053      	str	r3, [r2, #4]
      break;
 8003148:	e76c      	b.n	8003024 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_TIM3_ENABLE();
 800314a:	4a1d      	ldr	r2, [pc, #116]	; (80031c0 <pin_function+0x588>)
 800314c:	6853      	ldr	r3, [r2, #4]
 800314e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003152:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8003156:	6053      	str	r3, [r2, #4]
      break;
 8003158:	e764      	b.n	8003024 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_TIM3_PARTIAL();
 800315a:	4a19      	ldr	r2, [pc, #100]	; (80031c0 <pin_function+0x588>)
 800315c:	6853      	ldr	r3, [r2, #4]
 800315e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003162:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003166:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800316a:	6053      	str	r3, [r2, #4]
      break;
 800316c:	e75a      	b.n	8003024 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_TIM3_DISABLE();
 800316e:	4a14      	ldr	r2, [pc, #80]	; (80031c0 <pin_function+0x588>)
 8003170:	6853      	ldr	r3, [r2, #4]
 8003172:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003176:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800317a:	6053      	str	r3, [r2, #4]
      break;
 800317c:	e752      	b.n	8003024 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_TIM4_ENABLE();
 800317e:	4a10      	ldr	r2, [pc, #64]	; (80031c0 <pin_function+0x588>)
 8003180:	6853      	ldr	r3, [r2, #4]
 8003182:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003186:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800318a:	6053      	str	r3, [r2, #4]
      break;
 800318c:	e74a      	b.n	8003024 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_TIM4_DISABLE();
 800318e:	4a0c      	ldr	r2, [pc, #48]	; (80031c0 <pin_function+0x588>)
 8003190:	6853      	ldr	r3, [r2, #4]
 8003192:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003196:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800319a:	6053      	str	r3, [r2, #4]
      break;
 800319c:	e742      	b.n	8003024 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_PD01_ENABLE();
 800319e:	4a08      	ldr	r2, [pc, #32]	; (80031c0 <pin_function+0x588>)
 80031a0:	6853      	ldr	r3, [r2, #4]
 80031a2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80031a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031aa:	6053      	str	r3, [r2, #4]
      break;
 80031ac:	e73a      	b.n	8003024 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_PD01_DISABLE();
 80031ae:	4a04      	ldr	r2, [pc, #16]	; (80031c0 <pin_function+0x588>)
 80031b0:	6853      	ldr	r3, [r2, #4]
 80031b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80031b6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80031ba:	6053      	str	r3, [r2, #4]
      break;
 80031bc:	e732      	b.n	8003024 <pin_function+0x3ec>
 80031be:	bf00      	nop
 80031c0:	40010000 	.word	0x40010000
 80031c4:	40021000 	.word	0x40021000
      __HAL_AFIO_REMAP_SWJ_ENABLE();
 80031c8:	4a5a      	ldr	r2, [pc, #360]	; (8003334 <pin_function+0x6fc>)
 80031ca:	6853      	ldr	r3, [r2, #4]
 80031cc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80031d0:	6053      	str	r3, [r2, #4]
      break;
 80031d2:	e727      	b.n	8003024 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_SWJ_NONJTRST();
 80031d4:	4a57      	ldr	r2, [pc, #348]	; (8003334 <pin_function+0x6fc>)
 80031d6:	6853      	ldr	r3, [r2, #4]
 80031d8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80031dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031e0:	6053      	str	r3, [r2, #4]
      break;
 80031e2:	e71f      	b.n	8003024 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80031e4:	4a53      	ldr	r2, [pc, #332]	; (8003334 <pin_function+0x6fc>)
 80031e6:	6853      	ldr	r3, [r2, #4]
 80031e8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80031ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031f0:	6053      	str	r3, [r2, #4]
      break;
 80031f2:	e717      	b.n	8003024 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_SWJ_DISABLE();
 80031f4:	4a4f      	ldr	r2, [pc, #316]	; (8003334 <pin_function+0x6fc>)
 80031f6:	6853      	ldr	r3, [r2, #4]
 80031f8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80031fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003200:	6053      	str	r3, [r2, #4]
      break;
 8003202:	e70f      	b.n	8003024 <pin_function+0x3ec>
      Error_Handler();
 8003204:	21fb      	movs	r1, #251	; 0xfb
 8003206:	484c      	ldr	r0, [pc, #304]	; (8003338 <pin_function+0x700>)
 8003208:	f000 f8d1 	bl	80033ae <_Error_Handler>
  uint32_t ll_mode = 0;
 800320c:	f04f 0e00 	mov.w	lr, #0
      break;
 8003210:	e550      	b.n	8002cb4 <pin_function+0x7c>
      ll_mode = LL_GPIO_MODE_ANALOG;
 8003212:	f04f 0e00 	mov.w	lr, #0
 8003216:	e54d      	b.n	8002cb4 <pin_function+0x7c>
    if (STM_PIN_OD(function)) {
 8003218:	f018 0f08 	tst.w	r8, #8
 800321c:	d014      	beq.n	8003248 <pin_function+0x610>
 800321e:	fa94 f2a4 	rbit	r2, r4
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8003222:	fab2 f282 	clz	r2, r2
 8003226:	0092      	lsls	r2, r2, #2
 8003228:	2104      	movs	r1, #4
 800322a:	fa01 f202 	lsl.w	r2, r1, r2
 800322e:	ea23 0302 	bic.w	r3, r3, r2
 8003232:	fa94 f2a4 	rbit	r2, r4
 8003236:	fab2 f282 	clz	r2, r2
 800323a:	0092      	lsls	r2, r2, #2
 800323c:	fa01 f202 	lsl.w	r2, r1, r2
 8003240:	4313      	orrs	r3, r2
 8003242:	f846 300c 	str.w	r3, [r6, ip]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 8003246:	e550      	b.n	8002cea <pin_function+0xb2>
 8003248:	fa94 f2a4 	rbit	r2, r4
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800324c:	fab2 f282 	clz	r2, r2
 8003250:	0092      	lsls	r2, r2, #2
 8003252:	2104      	movs	r1, #4
 8003254:	fa01 f202 	lsl.w	r2, r1, r2
 8003258:	ea23 0302 	bic.w	r3, r3, r2
 800325c:	fa94 f2a4 	rbit	r2, r4
 8003260:	f846 300c 	str.w	r3, [r6, ip]
}
 8003264:	e541      	b.n	8002cea <pin_function+0xb2>
      if (function == LL_GPIO_MODE_FLOATING) {
 8003266:	2b04      	cmp	r3, #4
 8003268:	d02a      	beq.n	80032c0 <pin_function+0x688>
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800326a:	68f3      	ldr	r3, [r6, #12]
 800326c:	0a22      	lsrs	r2, r4, #8
 800326e:	ea23 2414 	bic.w	r4, r3, r4, lsr #8
 8003272:	fa92 f3a2 	rbit	r3, r2
 8003276:	fab3 f383 	clz	r3, r3
 800327a:	2201      	movs	r2, #1
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	431c      	orrs	r4, r3
 8003282:	60f4      	str	r4, [r6, #12]
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003284:	4b2d      	ldr	r3, [pc, #180]	; (800333c <pin_function+0x704>)
 8003286:	699a      	ldr	r2, [r3, #24]
 8003288:	f042 0201 	orr.w	r2, r2, #1
 800328c:	619a      	str	r2, [r3, #24]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	9303      	str	r3, [sp, #12]
 8003296:	9b03      	ldr	r3, [sp, #12]
  if ((pin == PA_13) || (pin == PA_14)) {
 8003298:	f1a5 030d 	sub.w	r3, r5, #13
 800329c:	2b01      	cmp	r3, #1
 800329e:	d941      	bls.n	8003324 <pin_function+0x6ec>
  if ((pin == PA_15) || (pin == PB_3) || (pin == PB_4)) {
 80032a0:	2d0f      	cmp	r5, #15
 80032a2:	d003      	beq.n	80032ac <pin_function+0x674>
 80032a4:	2d13      	cmp	r5, #19
 80032a6:	d001      	beq.n	80032ac <pin_function+0x674>
 80032a8:	2d14      	cmp	r5, #20
 80032aa:	d106      	bne.n	80032ba <pin_function+0x682>
    __HAL_AFIO_REMAP_SWJ_NOJTAG(); // JTAG-DP Disabled and SW-DP enabled
 80032ac:	4a21      	ldr	r2, [pc, #132]	; (8003334 <pin_function+0x6fc>)
 80032ae:	6853      	ldr	r3, [r2, #4]
 80032b0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80032b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032b8:	6053      	str	r3, [r2, #4]
#endif /* DUALPAD_ANALOG_SWITCH */

  pin_DisconnectDebug(pin);

  hsem_unlock(CFG_HW_GPIO_SEMID);
}
 80032ba:	b005      	add	sp, #20
 80032bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80032c0:	fa94 f3a4 	rbit	r3, r4
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80032c4:	fab3 f383 	clz	r3, r3
 80032c8:	009a      	lsls	r2, r3, #2
 80032ca:	230f      	movs	r3, #15
 80032cc:	4093      	lsls	r3, r2
 80032ce:	ea20 0003 	bic.w	r0, r0, r3
 80032d2:	fa94 f3a4 	rbit	r3, r4
 80032d6:	fab3 f383 	clz	r3, r3
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	2208      	movs	r2, #8
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	4318      	orrs	r0, r3
 80032e4:	5070      	str	r0, [r6, r1]
}
 80032e6:	e7c0      	b.n	800326a <pin_function+0x632>
      if (function == LL_GPIO_MODE_FLOATING) {
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d007      	beq.n	80032fc <pin_function+0x6c4>
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80032ec:	68f3      	ldr	r3, [r6, #12]
 80032ee:	0a22      	lsrs	r2, r4, #8
 80032f0:	ea23 2414 	bic.w	r4, r3, r4, lsr #8
 80032f4:	fa92 f2a2 	rbit	r2, r2
 80032f8:	60f4      	str	r4, [r6, #12]
}
 80032fa:	e7c3      	b.n	8003284 <pin_function+0x64c>
 80032fc:	fa94 f3a4 	rbit	r3, r4
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8003300:	fab3 f383 	clz	r3, r3
 8003304:	009a      	lsls	r2, r3, #2
 8003306:	230f      	movs	r3, #15
 8003308:	4093      	lsls	r3, r2
 800330a:	ea20 0003 	bic.w	r0, r0, r3
 800330e:	fa94 f3a4 	rbit	r3, r4
 8003312:	fab3 f383 	clz	r3, r3
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	2208      	movs	r2, #8
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	4318      	orrs	r0, r3
 8003320:	5070      	str	r0, [r6, r1]
}
 8003322:	e7e3      	b.n	80032ec <pin_function+0x6b4>
    __HAL_AFIO_REMAP_SWJ_DISABLE(); // JTAG-DP Disabled and SW-DP Disabled
 8003324:	4a03      	ldr	r2, [pc, #12]	; (8003334 <pin_function+0x6fc>)
 8003326:	6853      	ldr	r3, [r2, #4]
 8003328:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800332c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003330:	6053      	str	r3, [r2, #4]
 8003332:	e7b5      	b.n	80032a0 <pin_function+0x668>
 8003334:	40010000 	.word	0x40010000
 8003338:	08003bfc 	.word	0x08003bfc
 800333c:	40021000 	.word	0x40021000

08003340 <pinmap_pinout>:

void pinmap_pinout(PinName pin, const PinMap *map)
{
  if (pin == NC) {
 8003340:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003344:	d008      	beq.n	8003358 <pinmap_pinout+0x18>
{
 8003346:	b508      	push	{r3, lr}
    return;
  }

  while (map->pin != NC) {
 8003348:	680b      	ldr	r3, [r1, #0]
 800334a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334e:	d008      	beq.n	8003362 <pinmap_pinout+0x22>
    if (map->pin == pin) {
 8003350:	4283      	cmp	r3, r0
 8003352:	d002      	beq.n	800335a <pinmap_pinout+0x1a>
      pin_function(pin, map->function);
      return;
    }
    map++;
 8003354:	310c      	adds	r1, #12
 8003356:	e7f7      	b.n	8003348 <pinmap_pinout+0x8>
 8003358:	4770      	bx	lr
      pin_function(pin, map->function);
 800335a:	6889      	ldr	r1, [r1, #8]
 800335c:	f7ff fc6c 	bl	8002c38 <pin_function>
      return;
 8003360:	e004      	b.n	800336c <pinmap_pinout+0x2c>
  }
  Error_Handler();
 8003362:	f240 1129 	movw	r1, #297	; 0x129
 8003366:	4802      	ldr	r0, [pc, #8]	; (8003370 <pinmap_pinout+0x30>)
 8003368:	f000 f821 	bl	80033ae <_Error_Handler>
}
 800336c:	bd08      	pop	{r3, pc}
 800336e:	bf00      	nop
 8003370:	08003bfc 	.word	0x08003bfc

08003374 <pinmap_find_peripheral>:

void *pinmap_find_peripheral(PinName pin, const PinMap *map)
{
  while (map->pin != NC) {
 8003374:	680b      	ldr	r3, [r1, #0]
 8003376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337a:	d005      	beq.n	8003388 <pinmap_find_peripheral+0x14>
    if (map->pin == pin) {
 800337c:	4283      	cmp	r3, r0
 800337e:	d001      	beq.n	8003384 <pinmap_find_peripheral+0x10>
      return map->peripheral;
    }
    map++;
 8003380:	310c      	adds	r1, #12
 8003382:	e7f7      	b.n	8003374 <pinmap_find_peripheral>
      return map->peripheral;
 8003384:	6848      	ldr	r0, [r1, #4]
 8003386:	4770      	bx	lr
  }
  return NP;
 8003388:	2000      	movs	r0, #0
}
 800338a:	4770      	bx	lr

0800338c <pinmap_peripheral>:

void *pinmap_peripheral(PinName pin, const PinMap *map)
{
  void *peripheral = NP;

  if (pin != (PinName)NC) {
 800338c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003390:	d003      	beq.n	800339a <pinmap_peripheral+0xe>
{
 8003392:	b508      	push	{r3, lr}
    peripheral = pinmap_find_peripheral(pin, map);
 8003394:	f7ff ffee 	bl	8003374 <pinmap_find_peripheral>
  }
  return peripheral;
}
 8003398:	bd08      	pop	{r3, pc}
  void *peripheral = NP;
 800339a:	2000      	movs	r0, #0
}
 800339c:	4770      	bx	lr

0800339e <pinmap_merge_peripheral>:

// Merge peripherals
void *pinmap_merge_peripheral(void *a, void *b)
{
  // both are the same (inc both NP)
  if (a == b) {
 800339e:	4288      	cmp	r0, r1
 80033a0:	d004      	beq.n	80033ac <pinmap_merge_peripheral+0xe>
    return a;
  }

  // one (or both) is not set
  if (a == NP) {
 80033a2:	b110      	cbz	r0, 80033aa <pinmap_merge_peripheral+0xc>
    return b;
  }
  if (b == NP) {
 80033a4:	b111      	cbz	r1, 80033ac <pinmap_merge_peripheral+0xe>
    return a;
  }

  // mismatch error case
  return NP;
 80033a6:	2000      	movs	r0, #0
 80033a8:	4770      	bx	lr
    return b;
 80033aa:	4608      	mov	r0, r1
}
 80033ac:	4770      	bx	lr

080033ae <_Error_Handler>:
  */
WEAK void _Error_Handler(const char *msg, int val)
{
  /* User can add his own implementation to report the HAL error return state */
  core_debug("Error: %s (%i)\n", msg, val);
  while (1) {
 80033ae:	e7fe      	b.n	80033ae <_Error_Handler>

080033b0 <get_timer_obj>:
timerObj_t *get_timer_obj(TIM_HandleTypeDef *htim)
{
  timerObj_t *obj;
  obj = (timerObj_t *)((char *)htim - offsetof(timerObj_t, handle));
  return (obj);
}
 80033b0:	3804      	subs	r0, #4
 80033b2:	4770      	bx	lr

080033b4 <enableTimerClock>:
  * @brief  Enable the timer clock
  * @param  htim: TIM handle
  * @retval None
  */
void enableTimerClock(TIM_HandleTypeDef *htim)
{
 80033b4:	b084      	sub	sp, #16
  // Enable TIM clock
#if defined(TIM1_BASE)
  if (htim->Instance == TIM1) {
 80033b6:	6802      	ldr	r2, [r0, #0]
 80033b8:	4b20      	ldr	r3, [pc, #128]	; (800343c <enableTimerClock+0x88>)
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d00d      	beq.n	80033da <enableTimerClock+0x26>
    __HAL_RCC_TIM1_CLK_ENABLE();
  }
#endif
#if defined(TIM2_BASE)
  if (htim->Instance == TIM2) {
 80033be:	6803      	ldr	r3, [r0, #0]
 80033c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c4:	d015      	beq.n	80033f2 <enableTimerClock+0x3e>
    __HAL_RCC_TIM2_CLK_ENABLE();
  }
#endif
#if defined(TIM3_BASE)
  if (htim->Instance == TIM3) {
 80033c6:	6802      	ldr	r2, [r0, #0]
 80033c8:	4b1d      	ldr	r3, [pc, #116]	; (8003440 <enableTimerClock+0x8c>)
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d01d      	beq.n	800340a <enableTimerClock+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
  }
#endif
#if defined(TIM4_BASE)
  if (htim->Instance == TIM4) {
 80033ce:	6802      	ldr	r2, [r0, #0]
 80033d0:	4b1c      	ldr	r3, [pc, #112]	; (8003444 <enableTimerClock+0x90>)
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d025      	beq.n	8003422 <enableTimerClock+0x6e>
#if defined(TIM22_BASE)
  if (htim->Instance == TIM22) {
    __HAL_RCC_TIM22_CLK_ENABLE();
  }
#endif
}
 80033d6:	b004      	add	sp, #16
 80033d8:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033da:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80033de:	699a      	ldr	r2, [r3, #24]
 80033e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033e4:	619a      	str	r2, [r3, #24]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	9b00      	ldr	r3, [sp, #0]
 80033f0:	e7e5      	b.n	80033be <enableTimerClock+0xa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033f2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80033f6:	69da      	ldr	r2, [r3, #28]
 80033f8:	f042 0201 	orr.w	r2, r2, #1
 80033fc:	61da      	str	r2, [r3, #28]
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	9301      	str	r3, [sp, #4]
 8003406:	9b01      	ldr	r3, [sp, #4]
 8003408:	e7dd      	b.n	80033c6 <enableTimerClock+0x12>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800340a:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 800340e:	69da      	ldr	r2, [r3, #28]
 8003410:	f042 0202 	orr.w	r2, r2, #2
 8003414:	61da      	str	r2, [r3, #28]
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	9302      	str	r3, [sp, #8]
 800341e:	9b02      	ldr	r3, [sp, #8]
 8003420:	e7d5      	b.n	80033ce <enableTimerClock+0x1a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003422:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003426:	69da      	ldr	r2, [r3, #28]
 8003428:	f042 0204 	orr.w	r2, r2, #4
 800342c:	61da      	str	r2, [r3, #28]
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	9303      	str	r3, [sp, #12]
 8003436:	9b03      	ldr	r3, [sp, #12]
}
 8003438:	e7cd      	b.n	80033d6 <enableTimerClock+0x22>
 800343a:	bf00      	nop
 800343c:	40012c00 	.word	0x40012c00
 8003440:	40000400 	.word	0x40000400
 8003444:	40000800 	.word	0x40000800

08003448 <disableTimerClock>:
  */
void disableTimerClock(TIM_HandleTypeDef *htim)
{
  // Enable TIM clock
#if defined(TIM1_BASE)
  if (htim->Instance == TIM1) {
 8003448:	6802      	ldr	r2, [r0, #0]
 800344a:	4b14      	ldr	r3, [pc, #80]	; (800349c <disableTimerClock+0x54>)
 800344c:	429a      	cmp	r2, r3
 800344e:	d00c      	beq.n	800346a <disableTimerClock+0x22>
    __HAL_RCC_TIM1_CLK_DISABLE();
  }
#endif
#if defined(TIM2_BASE)
  if (htim->Instance == TIM2) {
 8003450:	6803      	ldr	r3, [r0, #0]
 8003452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003456:	d00e      	beq.n	8003476 <disableTimerClock+0x2e>
    __HAL_RCC_TIM2_CLK_DISABLE();
  }
#endif
#if defined(TIM3_BASE)
  if (htim->Instance == TIM3) {
 8003458:	6802      	ldr	r2, [r0, #0]
 800345a:	4b11      	ldr	r3, [pc, #68]	; (80034a0 <disableTimerClock+0x58>)
 800345c:	429a      	cmp	r2, r3
 800345e:	d010      	beq.n	8003482 <disableTimerClock+0x3a>
    __HAL_RCC_TIM3_CLK_DISABLE();
  }
#endif
#if defined(TIM4_BASE)
  if (htim->Instance == TIM4) {
 8003460:	6802      	ldr	r2, [r0, #0]
 8003462:	4b10      	ldr	r3, [pc, #64]	; (80034a4 <disableTimerClock+0x5c>)
 8003464:	429a      	cmp	r2, r3
 8003466:	d012      	beq.n	800348e <disableTimerClock+0x46>
#if defined(TIM22_BASE)
  if (htim->Instance == TIM22) {
    __HAL_RCC_TIM22_CLK_DISABLE();
  }
#endif
}
 8003468:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_DISABLE();
 800346a:	4a0f      	ldr	r2, [pc, #60]	; (80034a8 <disableTimerClock+0x60>)
 800346c:	6993      	ldr	r3, [r2, #24]
 800346e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003472:	6193      	str	r3, [r2, #24]
 8003474:	e7ec      	b.n	8003450 <disableTimerClock+0x8>
    __HAL_RCC_TIM2_CLK_DISABLE();
 8003476:	4a0c      	ldr	r2, [pc, #48]	; (80034a8 <disableTimerClock+0x60>)
 8003478:	69d3      	ldr	r3, [r2, #28]
 800347a:	f023 0301 	bic.w	r3, r3, #1
 800347e:	61d3      	str	r3, [r2, #28]
 8003480:	e7ea      	b.n	8003458 <disableTimerClock+0x10>
    __HAL_RCC_TIM3_CLK_DISABLE();
 8003482:	4a09      	ldr	r2, [pc, #36]	; (80034a8 <disableTimerClock+0x60>)
 8003484:	69d3      	ldr	r3, [r2, #28]
 8003486:	f023 0302 	bic.w	r3, r3, #2
 800348a:	61d3      	str	r3, [r2, #28]
 800348c:	e7e8      	b.n	8003460 <disableTimerClock+0x18>
    __HAL_RCC_TIM4_CLK_DISABLE();
 800348e:	4a06      	ldr	r2, [pc, #24]	; (80034a8 <disableTimerClock+0x60>)
 8003490:	69d3      	ldr	r3, [r2, #28]
 8003492:	f023 0304 	bic.w	r3, r3, #4
 8003496:	61d3      	str	r3, [r2, #28]
}
 8003498:	e7e6      	b.n	8003468 <disableTimerClock+0x20>
 800349a:	bf00      	nop
 800349c:	40012c00 	.word	0x40012c00
 80034a0:	40000400 	.word	0x40000400
 80034a4:	40000800 	.word	0x40000800
 80034a8:	40021000 	.word	0x40021000

080034ac <getTimerUpIrq>:
  */
IRQn_Type getTimerUpIrq(TIM_TypeDef *tim)
{
  IRQn_Type IRQn = NonMaskableInt_IRQn;

  if (tim != (TIM_TypeDef *)NC) {
 80034ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 80034b0:	d019      	beq.n	80034e6 <getTimerUpIrq+0x3a>
{
 80034b2:	b508      	push	{r3, lr}
    /* Get IRQn depending on TIM instance */
    switch ((uint32_t)tim) {
 80034b4:	4b0f      	ldr	r3, [pc, #60]	; (80034f4 <getTimerUpIrq+0x48>)
 80034b6:	4298      	cmp	r0, r3
 80034b8:	d018      	beq.n	80034ec <getTimerUpIrq+0x40>
 80034ba:	d808      	bhi.n	80034ce <getTimerUpIrq+0x22>
 80034bc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80034c0:	d016      	beq.n	80034f0 <getTimerUpIrq+0x44>
 80034c2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80034c6:	4298      	cmp	r0, r3
 80034c8:	d106      	bne.n	80034d8 <getTimerUpIrq+0x2c>
        IRQn = TIM2_IRQn;
        break;
#endif
#if defined(TIM3_BASE)
      case (uint32_t)TIM3_BASE:
        IRQn = TIM3_IRQn;
 80034ca:	201d      	movs	r0, #29
        _Error_Handler("TIM: Unknown timer IRQn", (int)tim);
        break;
    }
  }
  return IRQn;
}
 80034cc:	bd08      	pop	{r3, pc}
    switch ((uint32_t)tim) {
 80034ce:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <getTimerUpIrq+0x4c>)
 80034d0:	4298      	cmp	r0, r3
 80034d2:	d101      	bne.n	80034d8 <getTimerUpIrq+0x2c>
 80034d4:	2019      	movs	r0, #25
 80034d6:	e7f9      	b.n	80034cc <getTimerUpIrq+0x20>
        _Error_Handler("TIM: Unknown timer IRQn", (int)tim);
 80034d8:	4601      	mov	r1, r0
 80034da:	4808      	ldr	r0, [pc, #32]	; (80034fc <getTimerUpIrq+0x50>)
 80034dc:	f7ff ff67 	bl	80033ae <_Error_Handler>
  IRQn_Type IRQn = NonMaskableInt_IRQn;
 80034e0:	f06f 000d 	mvn.w	r0, #13
        break;
 80034e4:	e7f2      	b.n	80034cc <getTimerUpIrq+0x20>
  IRQn_Type IRQn = NonMaskableInt_IRQn;
 80034e6:	f06f 000d 	mvn.w	r0, #13
}
 80034ea:	4770      	bx	lr
        IRQn = TIM4_IRQn;
 80034ec:	201e      	movs	r0, #30
 80034ee:	e7ed      	b.n	80034cc <getTimerUpIrq+0x20>
        IRQn = TIM2_IRQn;
 80034f0:	201c      	movs	r0, #28
 80034f2:	e7eb      	b.n	80034cc <getTimerUpIrq+0x20>
 80034f4:	40000800 	.word	0x40000800
 80034f8:	40012c00 	.word	0x40012c00
 80034fc:	08003cb0 	.word	0x08003cb0

08003500 <getTimerCCIrq>:
  */
IRQn_Type getTimerCCIrq(TIM_TypeDef *tim)
{
  IRQn_Type IRQn = NonMaskableInt_IRQn;

  if (tim != (TIM_TypeDef *)NC) {
 8003500:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003504:	d019      	beq.n	800353a <getTimerCCIrq+0x3a>
{
 8003506:	b508      	push	{r3, lr}
    /* Get IRQn depending on TIM instance */
    switch ((uint32_t)tim) {
 8003508:	4b0f      	ldr	r3, [pc, #60]	; (8003548 <getTimerCCIrq+0x48>)
 800350a:	4298      	cmp	r0, r3
 800350c:	d018      	beq.n	8003540 <getTimerCCIrq+0x40>
 800350e:	d808      	bhi.n	8003522 <getTimerCCIrq+0x22>
 8003510:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003514:	d016      	beq.n	8003544 <getTimerCCIrq+0x44>
 8003516:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800351a:	4298      	cmp	r0, r3
 800351c:	d106      	bne.n	800352c <getTimerCCIrq+0x2c>
        IRQn = TIM2_IRQn;
        break;
#endif
#if defined(TIM3_BASE)
      case (uint32_t)TIM3_BASE:
        IRQn = TIM3_IRQn;
 800351e:	201d      	movs	r0, #29
        _Error_Handler("TIM: Unknown timer IRQn", (int)tim);
        break;
    }
  }
  return IRQn;
}
 8003520:	bd08      	pop	{r3, pc}
    switch ((uint32_t)tim) {
 8003522:	4b0a      	ldr	r3, [pc, #40]	; (800354c <getTimerCCIrq+0x4c>)
 8003524:	4298      	cmp	r0, r3
 8003526:	d101      	bne.n	800352c <getTimerCCIrq+0x2c>
 8003528:	201b      	movs	r0, #27
 800352a:	e7f9      	b.n	8003520 <getTimerCCIrq+0x20>
        _Error_Handler("TIM: Unknown timer IRQn", (int)tim);
 800352c:	4601      	mov	r1, r0
 800352e:	4808      	ldr	r0, [pc, #32]	; (8003550 <getTimerCCIrq+0x50>)
 8003530:	f7ff ff3d 	bl	80033ae <_Error_Handler>
  IRQn_Type IRQn = NonMaskableInt_IRQn;
 8003534:	f06f 000d 	mvn.w	r0, #13
        break;
 8003538:	e7f2      	b.n	8003520 <getTimerCCIrq+0x20>
  IRQn_Type IRQn = NonMaskableInt_IRQn;
 800353a:	f06f 000d 	mvn.w	r0, #13
}
 800353e:	4770      	bx	lr
        IRQn = TIM4_IRQn;
 8003540:	201e      	movs	r0, #30
 8003542:	e7ed      	b.n	8003520 <getTimerCCIrq+0x20>
        IRQn = TIM2_IRQn;
 8003544:	201c      	movs	r0, #28
 8003546:	e7eb      	b.n	8003520 <getTimerCCIrq+0x20>
 8003548:	40000800 	.word	0x40000800
 800354c:	40012c00 	.word	0x40012c00
 8003550:	08003cb0 	.word	0x08003cb0

08003554 <HAL_TIM_Base_MspInit>:
{
 8003554:	b570      	push	{r4, r5, r6, lr}
 8003556:	4604      	mov	r4, r0
  timerObj_t *obj = get_timer_obj(htim_base);
 8003558:	f7ff ff2a 	bl	80033b0 <get_timer_obj>
 800355c:	4605      	mov	r5, r0
  enableTimerClock(htim_base);
 800355e:	4620      	mov	r0, r4
 8003560:	f7ff ff28 	bl	80033b4 <enableTimerClock>
  HAL_NVIC_SetPriority(getTimerUpIrq(htim_base->Instance), obj->preemptPriority, obj->subPriority);
 8003564:	6820      	ldr	r0, [r4, #0]
 8003566:	f7ff ffa1 	bl	80034ac <getTimerUpIrq>
 800356a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800356c:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 800356e:	f7fd f8cd 	bl	800070c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(getTimerUpIrq(htim_base->Instance));
 8003572:	6820      	ldr	r0, [r4, #0]
 8003574:	f7ff ff9a 	bl	80034ac <getTimerUpIrq>
 8003578:	f7fd f8fc 	bl	8000774 <HAL_NVIC_EnableIRQ>
  if (getTimerCCIrq(htim_base->Instance) != getTimerUpIrq(htim_base->Instance)) {
 800357c:	6820      	ldr	r0, [r4, #0]
 800357e:	f7ff ffbf 	bl	8003500 <getTimerCCIrq>
 8003582:	4606      	mov	r6, r0
 8003584:	6820      	ldr	r0, [r4, #0]
 8003586:	f7ff ff91 	bl	80034ac <getTimerUpIrq>
 800358a:	4286      	cmp	r6, r0
 800358c:	d100      	bne.n	8003590 <HAL_TIM_Base_MspInit+0x3c>
}
 800358e:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(getTimerCCIrq(htim_base->Instance), obj->preemptPriority, obj->subPriority);
 8003590:	6820      	ldr	r0, [r4, #0]
 8003592:	f7ff ffb5 	bl	8003500 <getTimerCCIrq>
 8003596:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8003598:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 800359a:	f7fd f8b7 	bl	800070c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(getTimerCCIrq(htim_base->Instance));
 800359e:	6820      	ldr	r0, [r4, #0]
 80035a0:	f7ff ffae 	bl	8003500 <getTimerCCIrq>
 80035a4:	f7fd f8e6 	bl	8000774 <HAL_NVIC_EnableIRQ>
}
 80035a8:	e7f1      	b.n	800358e <HAL_TIM_Base_MspInit+0x3a>
	...

080035ac <getTimerClkSrc>:
  */
uint8_t getTimerClkSrc(TIM_TypeDef *tim)
{
  uint8_t clkSrc = 0;

  if (tim != (TIM_TypeDef *)NC)
 80035ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 80035b0:	d015      	beq.n	80035de <getTimerClkSrc+0x32>
{
 80035b2:	b508      	push	{r3, lr}
    /* TIMx source CLK is PCKL1 */
    clkSrc = 1;
#else
  {
    /* Get source clock depending on TIM instance */
    switch ((uint32_t)tim) {
 80035b4:	4b0f      	ldr	r3, [pc, #60]	; (80035f4 <getTimerClkSrc+0x48>)
 80035b6:	4298      	cmp	r0, r3
 80035b8:	d013      	beq.n	80035e2 <getTimerClkSrc+0x36>
 80035ba:	d80a      	bhi.n	80035d2 <getTimerClkSrc+0x26>
 80035bc:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 80035c0:	4298      	cmp	r0, r3
 80035c2:	d010      	beq.n	80035e6 <getTimerClkSrc+0x3a>
 80035c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035c8:	4298      	cmp	r0, r3
 80035ca:	d00e      	beq.n	80035ea <getTimerClkSrc+0x3e>
 80035cc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80035d0:	d00d      	beq.n	80035ee <getTimerClkSrc+0x42>
      case (uint32_t)TIM22:
#endif
        clkSrc = 2;
        break;
      default:
        _Error_Handler("TIM: Unknown timer instance", (int)tim);
 80035d2:	4601      	mov	r1, r0
 80035d4:	4808      	ldr	r0, [pc, #32]	; (80035f8 <getTimerClkSrc+0x4c>)
 80035d6:	f7ff feea 	bl	80033ae <_Error_Handler>
  uint8_t clkSrc = 0;
 80035da:	2000      	movs	r0, #0
        break;
 80035dc:	e006      	b.n	80035ec <getTimerClkSrc+0x40>
  uint8_t clkSrc = 0;
 80035de:	2000      	movs	r0, #0
    }
  }
#endif
  return clkSrc;
}
 80035e0:	4770      	bx	lr
        clkSrc = 2;
 80035e2:	2002      	movs	r0, #2
 80035e4:	e002      	b.n	80035ec <getTimerClkSrc+0x40>
    switch ((uint32_t)tim) {
 80035e6:	2001      	movs	r0, #1
 80035e8:	e000      	b.n	80035ec <getTimerClkSrc+0x40>
 80035ea:	2001      	movs	r0, #1
}
 80035ec:	bd08      	pop	{r3, pc}
    switch ((uint32_t)tim) {
 80035ee:	2001      	movs	r0, #1
 80035f0:	e7fc      	b.n	80035ec <getTimerClkSrc+0x40>
 80035f2:	bf00      	nop
 80035f4:	40012c00 	.word	0x40012c00
 80035f8:	08003cc8 	.word	0x08003cc8

080035fc <get_serial_obj>:

  obj_s = (struct serial_s *)((char *)huart - offsetof(struct serial_s, handle));
  obj = (serial_t *)((char *)obj_s - offsetof(serial_t, uart));

  return (obj);
}
 80035fc:	3804      	subs	r0, #4
 80035fe:	4770      	bx	lr

08003600 <uart_init>:
  * @param  obj : pointer to serial_t structure
  * @retval None
  */
void uart_init(serial_t *obj, uint32_t baudrate, uint32_t databits, uint32_t parity, uint32_t stopbits)
{
  if (obj == NULL) {
 8003600:	2800      	cmp	r0, #0
 8003602:	f000 80a6 	beq.w	8003752 <uart_init+0x152>
{
 8003606:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	4688      	mov	r8, r1
 800360e:	4617      	mov	r7, r2
 8003610:	461e      	mov	r6, r3
 8003612:	4604      	mov	r4, r0
    return;
  }

  UART_HandleTypeDef *huart = &(obj->handle);
 8003614:	f100 0904 	add.w	r9, r0, #4

  /* Determine the U(S)ART peripheral to use (USART1, USART2, ...) */
  USART_TypeDef *uart_tx = pinmap_peripheral(obj->pin_tx, PinMap_UART_TX);
 8003618:	494e      	ldr	r1, [pc, #312]	; (8003754 <uart_init+0x154>)
 800361a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800361c:	f7ff feb6 	bl	800338c <pinmap_peripheral>
 8003620:	4682      	mov	sl, r0
  USART_TypeDef *uart_rx = pinmap_peripheral(obj->pin_rx, PinMap_UART_RX);
 8003622:	494d      	ldr	r1, [pc, #308]	; (8003758 <uart_init+0x158>)
 8003624:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003626:	f7ff feb1 	bl	800338c <pinmap_peripheral>
 800362a:	4605      	mov	r5, r0

  /* Pin Tx must not be NP */
  if (uart_tx == NP) {
 800362c:	f1ba 0f00 	cmp.w	sl, #0
 8003630:	d03a      	beq.n	80036a8 <uart_init+0xa8>
    core_debug("ERROR: [U(S)ART] Tx pin has no peripheral!\n");
    return;
  }
  /* Pin Rx must not be NP if not half-duplex */
  if ((obj->pin_rx != NC) && (uart_rx == NP)) {
 8003632:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003638:	d001      	beq.n	800363e <uart_init+0x3e>
 800363a:	2800      	cmp	r0, #0
 800363c:	d034      	beq.n	80036a8 <uart_init+0xa8>

  /*
   * Get the peripheral name (USART1, USART2, ...) from the pin
   * and assign it to the object
   */
  obj->uart = pinmap_merge_peripheral(uart_tx, uart_rx);
 800363e:	4629      	mov	r1, r5
 8003640:	4650      	mov	r0, sl
 8003642:	f7ff feac 	bl	800339e <pinmap_merge_peripheral>
 8003646:	6020      	str	r0, [r4, #0]

  if (obj->uart == NP) {
 8003648:	2800      	cmp	r0, #0
 800364a:	d02d      	beq.n	80036a8 <uart_init+0xa8>
    return;
  }

  /* Enable USART clock */
#if defined(USART1_BASE)
  else if (obj->uart == USART1) {
 800364c:	4b43      	ldr	r3, [pc, #268]	; (800375c <uart_init+0x15c>)
 800364e:	4298      	cmp	r0, r3
 8003650:	d02d      	beq.n	80036ae <uart_init+0xae>
    obj->index = UART1_INDEX;
    obj->irq = USART1_IRQn;
  }
#endif
#if defined(USART2_BASE)
  else if (obj->uart == USART2) {
 8003652:	4b43      	ldr	r3, [pc, #268]	; (8003760 <uart_init+0x160>)
 8003654:	4298      	cmp	r0, r3
 8003656:	d044      	beq.n	80036e2 <uart_init+0xe2>
    obj->index = UART2_INDEX;
    obj->irq = USART2_IRQn;
  }
#endif
#if defined(USART3_BASE)
  else if (obj->uart == USART3) {
 8003658:	4b42      	ldr	r3, [pc, #264]	; (8003764 <uart_init+0x164>)
 800365a:	4298      	cmp	r0, r3
 800365c:	d05b      	beq.n	8003716 <uart_init+0x116>
    obj->irq = USART10_IRQn;
  }
#endif

  /* Configure UART GPIO pins */
  pinmap_pinout(obj->pin_tx, PinMap_UART_TX);
 800365e:	493d      	ldr	r1, [pc, #244]	; (8003754 <uart_init+0x154>)
 8003660:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003662:	f7ff fe6d 	bl	8003340 <pinmap_pinout>
  if (uart_rx != NP) {
 8003666:	b11d      	cbz	r5, 8003670 <uart_init+0x70>
    pinmap_pinout(obj->pin_rx, PinMap_UART_RX);
 8003668:	493b      	ldr	r1, [pc, #236]	; (8003758 <uart_init+0x158>)
 800366a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800366c:	f7ff fe68 	bl	8003340 <pinmap_pinout>
  }

  /* Configure uart */
  uart_handlers[obj->index] = huart;
 8003670:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8003674:	4b3c      	ldr	r3, [pc, #240]	; (8003768 <uart_init+0x168>)
 8003676:	f843 9022 	str.w	r9, [r3, r2, lsl #2]
  huart->Instance          = (USART_TypeDef *)(obj->uart);
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	6063      	str	r3, [r4, #4]
  huart->Init.BaudRate     = baudrate;
 800367e:	f8c4 8008 	str.w	r8, [r4, #8]
  huart->Init.WordLength   = databits;
 8003682:	60e7      	str	r7, [r4, #12]
  huart->Init.StopBits     = stopbits;
 8003684:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003686:	6123      	str	r3, [r4, #16]
  huart->Init.Parity       = parity;
 8003688:	6166      	str	r6, [r4, #20]
  huart->Init.Mode         = UART_MODE_TX_RX;
 800368a:	230c      	movs	r3, #12
 800368c:	61a3      	str	r3, [r4, #24]
  huart->Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 800368e:	2200      	movs	r2, #0
 8003690:	61e2      	str	r2, [r4, #28]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8003692:	6222      	str	r2, [r4, #32]
#ifdef UART_ONE_BIT_SAMPLE_DISABLE
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
#endif

  /* Set the NVIC priority for future interrupts */
  HAL_NVIC_SetPriority(obj->irq, UART_IRQ_PRIO, UART_IRQ_SUBPRIO);
 8003694:	2101      	movs	r1, #1
 8003696:	f994 0058 	ldrsb.w	r0, [r4, #88]	; 0x58
 800369a:	f7fd f837 	bl	800070c <HAL_NVIC_SetPriority>
    }
#endif
  }
#endif

  if (uart_rx == NP) {
 800369e:	2d00      	cmp	r5, #0
 80036a0:	d053      	beq.n	800374a <uart_init+0x14a>
    if (HAL_HalfDuplex_Init(huart) != HAL_OK) {
      return;
    }
  } else if (HAL_UART_Init(huart) != HAL_OK) {
 80036a2:	4648      	mov	r0, r9
 80036a4:	f7fe f9f1 	bl	8001a8a <HAL_UART_Init>
    return;
  }
}
 80036a8:	b004      	add	sp, #16
 80036aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_USART1_FORCE_RESET();
 80036ae:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036b8:	60da      	str	r2, [r3, #12]
    __HAL_RCC_USART1_RELEASE_RESET();
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036c0:	60da      	str	r2, [r3, #12]
    __HAL_RCC_USART1_CLK_ENABLE();
 80036c2:	699a      	ldr	r2, [r3, #24]
 80036c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036c8:	619a      	str	r2, [r3, #24]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d0:	9301      	str	r3, [sp, #4]
 80036d2:	9b01      	ldr	r3, [sp, #4]
    obj->index = UART1_INDEX;
 80036d4:	2300      	movs	r3, #0
 80036d6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
    obj->irq = USART1_IRQn;
 80036da:	2325      	movs	r3, #37	; 0x25
 80036dc:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80036e0:	e7bd      	b.n	800365e <uart_init+0x5e>
    __HAL_RCC_USART2_FORCE_RESET();
 80036e2:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80036ec:	611a      	str	r2, [r3, #16]
    __HAL_RCC_USART2_RELEASE_RESET();
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80036f4:	611a      	str	r2, [r3, #16]
    __HAL_RCC_USART2_CLK_ENABLE();
 80036f6:	69da      	ldr	r2, [r3, #28]
 80036f8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80036fc:	61da      	str	r2, [r3, #28]
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003704:	9302      	str	r3, [sp, #8]
 8003706:	9b02      	ldr	r3, [sp, #8]
    obj->index = UART2_INDEX;
 8003708:	2301      	movs	r3, #1
 800370a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
    obj->irq = USART2_IRQn;
 800370e:	2326      	movs	r3, #38	; 0x26
 8003710:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8003714:	e7a3      	b.n	800365e <uart_init+0x5e>
    __HAL_RCC_USART3_FORCE_RESET();
 8003716:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003720:	611a      	str	r2, [r3, #16]
    __HAL_RCC_USART3_RELEASE_RESET();
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003728:	611a      	str	r2, [r3, #16]
    __HAL_RCC_USART3_CLK_ENABLE();
 800372a:	69da      	ldr	r2, [r3, #28]
 800372c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003730:	61da      	str	r2, [r3, #28]
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003738:	9303      	str	r3, [sp, #12]
 800373a:	9b03      	ldr	r3, [sp, #12]
    obj->index = UART3_INDEX;
 800373c:	2302      	movs	r3, #2
 800373e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
    obj->irq = USART3_IRQn;
 8003742:	2327      	movs	r3, #39	; 0x27
 8003744:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8003748:	e789      	b.n	800365e <uart_init+0x5e>
    if (HAL_HalfDuplex_Init(huart) != HAL_OK) {
 800374a:	4648      	mov	r0, r9
 800374c:	f7fe f9cc 	bl	8001ae8 <HAL_HalfDuplex_Init>
 8003750:	e7aa      	b.n	80036a8 <uart_init+0xa8>
 8003752:	4770      	bx	lr
 8003754:	08003d20 	.word	0x08003d20
 8003758:	08003ce4 	.word	0x08003ce4
 800375c:	40013800 	.word	0x40013800
 8003760:	40004400 	.word	0x40004400
 8003764:	40004800 	.word	0x40004800
 8003768:	200003b0 	.word	0x200003b0

0800376c <serial_rx_active>:
 *
 * @param obj The serial object
 * @return Non-zero if the RX transaction is ongoing, 0 otherwise
 */
uint8_t serial_rx_active(serial_t *obj)
{
 800376c:	b508      	push	{r3, lr}
  return ((HAL_UART_GetState(uart_handlers[obj->index]) & HAL_UART_STATE_BUSY_RX) == HAL_UART_STATE_BUSY_RX);
 800376e:	f890 2059 	ldrb.w	r2, [r0, #89]	; 0x59
 8003772:	4b06      	ldr	r3, [pc, #24]	; (800378c <serial_rx_active+0x20>)
 8003774:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003778:	f7fe fbc8 	bl	8001f0c <HAL_UART_GetState>
 800377c:	f000 0022 	and.w	r0, r0, #34	; 0x22
}
 8003780:	2822      	cmp	r0, #34	; 0x22
 8003782:	bf14      	ite	ne
 8003784:	2000      	movne	r0, #0
 8003786:	2001      	moveq	r0, #1
 8003788:	bd08      	pop	{r3, pc}
 800378a:	bf00      	nop
 800378c:	200003b0 	.word	0x200003b0

08003790 <serial_tx_active>:
 *
 * @param obj The serial object
 * @return Non-zero if the TX transaction is ongoing, 0 otherwise
 */
uint8_t serial_tx_active(serial_t *obj)
{
 8003790:	b508      	push	{r3, lr}
  return ((HAL_UART_GetState(uart_handlers[obj->index]) & HAL_UART_STATE_BUSY_TX) == HAL_UART_STATE_BUSY_TX);
 8003792:	f890 2059 	ldrb.w	r2, [r0, #89]	; 0x59
 8003796:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <serial_tx_active+0x20>)
 8003798:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800379c:	f7fe fbb6 	bl	8001f0c <HAL_UART_GetState>
 80037a0:	f000 0021 	and.w	r0, r0, #33	; 0x21
}
 80037a4:	2821      	cmp	r0, #33	; 0x21
 80037a6:	bf14      	ite	ne
 80037a8:	2000      	movne	r0, #0
 80037aa:	2001      	moveq	r0, #1
 80037ac:	bd08      	pop	{r3, pc}
 80037ae:	bf00      	nop
 80037b0:	200003b0 	.word	0x200003b0

080037b4 <uart_getc>:
  * @param  obj : pointer to serial_t structure
  * @retval last character received
  */
int uart_getc(serial_t *obj, unsigned char *c)
{
  if (obj == NULL) {
 80037b4:	b1a0      	cbz	r0, 80037e0 <uart_getc+0x2c>
{
 80037b6:	b538      	push	{r3, r4, r5, lr}
 80037b8:	460d      	mov	r5, r1
 80037ba:	4604      	mov	r4, r0
    return -1;
  }

  if (serial_rx_active(obj)) {
 80037bc:	f7ff ffd6 	bl	800376c <serial_rx_active>
 80037c0:	b988      	cbnz	r0, 80037e6 <uart_getc+0x32>
    return -1; /* Transaction ongoing */
  }

  *c = (unsigned char)(obj->recv);
 80037c2:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 80037c6:	702b      	strb	r3, [r5, #0]
  /* Restart RX irq */
  HAL_UART_Receive_IT(uart_handlers[obj->index], &(obj->recv), 1);
 80037c8:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 80037cc:	2201      	movs	r2, #1
 80037ce:	f104 015a 	add.w	r1, r4, #90	; 0x5a
 80037d2:	4b06      	ldr	r3, [pc, #24]	; (80037ec <uart_getc+0x38>)
 80037d4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80037d8:	f7fe fbb9 	bl	8001f4e <HAL_UART_Receive_IT>

  return 0;
 80037dc:	2000      	movs	r0, #0
}
 80037de:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 80037e0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80037e4:	4770      	bx	lr
    return -1; /* Transaction ongoing */
 80037e6:	f04f 30ff 	mov.w	r0, #4294967295
 80037ea:	e7f8      	b.n	80037de <uart_getc+0x2a>
 80037ec:	200003b0 	.word	0x200003b0

080037f0 <uart_attach_rx_callback>:
 * @param callback : function call at the end of reception
 * @retval none
 */
void uart_attach_rx_callback(serial_t *obj, void (*callback)(serial_t *))
{
  if (obj == NULL) {
 80037f0:	b1d0      	cbz	r0, 8003828 <uart_attach_rx_callback+0x38>
{
 80037f2:	b538      	push	{r3, r4, r5, lr}
 80037f4:	460d      	mov	r5, r1
 80037f6:	4604      	mov	r4, r0
    return;
  }

  /* Exit if a reception is already on-going */
  if (serial_rx_active(obj)) {
 80037f8:	f7ff ffb8 	bl	800376c <serial_rx_active>
 80037fc:	b100      	cbz	r0, 8003800 <uart_attach_rx_callback+0x10>

  HAL_UART_Receive_IT(uart_handlers[obj->index], &(obj->recv), 1);

  /* Enable interrupt */
  HAL_NVIC_EnableIRQ(obj->irq);
}
 80037fe:	bd38      	pop	{r3, r4, r5, pc}
  obj->rx_callback = callback;
 8003800:	64a5      	str	r5, [r4, #72]	; 0x48
  HAL_NVIC_DisableIRQ(obj->irq);
 8003802:	f994 0058 	ldrsb.w	r0, [r4, #88]	; 0x58
 8003806:	f7fc ffc3 	bl	8000790 <HAL_NVIC_DisableIRQ>
  HAL_UART_Receive_IT(uart_handlers[obj->index], &(obj->recv), 1);
 800380a:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 800380e:	2201      	movs	r2, #1
 8003810:	f104 015a 	add.w	r1, r4, #90	; 0x5a
 8003814:	4b05      	ldr	r3, [pc, #20]	; (800382c <uart_attach_rx_callback+0x3c>)
 8003816:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800381a:	f7fe fb98 	bl	8001f4e <HAL_UART_Receive_IT>
  HAL_NVIC_EnableIRQ(obj->irq);
 800381e:	f994 0058 	ldrsb.w	r0, [r4, #88]	; 0x58
 8003822:	f7fc ffa7 	bl	8000774 <HAL_NVIC_EnableIRQ>
 8003826:	e7ea      	b.n	80037fe <uart_attach_rx_callback+0xe>
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	200003b0 	.word	0x200003b0

08003830 <uart_attach_tx_callback>:
 * @param callback : function call at the end of transmission
 * @retval none
 */
void uart_attach_tx_callback(serial_t *obj, int (*callback)(serial_t *), size_t size)
{
  if (obj == NULL) {
 8003830:	b1c8      	cbz	r0, 8003866 <uart_attach_tx_callback+0x36>
{
 8003832:	b538      	push	{r3, r4, r5, lr}
 8003834:	4615      	mov	r5, r2
 8003836:	4604      	mov	r4, r0
    return;
  }
  obj->tx_callback = callback;
 8003838:	64c1      	str	r1, [r0, #76]	; 0x4c

  /* Must disable interrupt to prevent handle lock contention */
  HAL_NVIC_DisableIRQ(obj->irq);
 800383a:	f990 0058 	ldrsb.w	r0, [r0, #88]	; 0x58
 800383e:	f7fc ffa7 	bl	8000790 <HAL_NVIC_DisableIRQ>

  /* The following function will enable UART_IT_TXE and error interrupts */
  HAL_UART_Transmit_IT(uart_handlers[obj->index], &obj->tx_buff[obj->tx_tail], size);
 8003842:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8003846:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003848:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800384c:	b29b      	uxth	r3, r3
 800384e:	b2aa      	uxth	r2, r5
 8003850:	4419      	add	r1, r3
 8003852:	4b05      	ldr	r3, [pc, #20]	; (8003868 <uart_attach_tx_callback+0x38>)
 8003854:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003858:	f7fe f97b 	bl	8001b52 <HAL_UART_Transmit_IT>

  /* Enable interrupt */
  HAL_NVIC_EnableIRQ(obj->irq);
 800385c:	f994 0058 	ldrsb.w	r0, [r4, #88]	; 0x58
 8003860:	f7fc ff88 	bl	8000774 <HAL_NVIC_EnableIRQ>
}
 8003864:	bd38      	pop	{r3, r4, r5, pc}
 8003866:	4770      	bx	lr
 8003868:	200003b0 	.word	0x200003b0

0800386c <uart_enable_tx>:
 * @param obj : pointer to serial_t structure
 * @retval none
 */
void uart_enable_tx(serial_t *obj)
{
  if (obj != NULL && obj->pin_rx == NC) {
 800386c:	b168      	cbz	r0, 800388a <uart_enable_tx+0x1e>
{
 800386e:	b508      	push	{r3, lr}
  if (obj != NULL && obj->pin_rx == NC) {
 8003870:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8003872:	f1b2 3fff 	cmp.w	r2, #4294967295
 8003876:	d000      	beq.n	800387a <uart_enable_tx+0xe>
    HAL_HalfDuplex_EnableTransmitter(uart_handlers[obj->index]);
  }
}
 8003878:	bd08      	pop	{r3, pc}
    HAL_HalfDuplex_EnableTransmitter(uart_handlers[obj->index]);
 800387a:	f890 2059 	ldrb.w	r2, [r0, #89]	; 0x59
 800387e:	4b03      	ldr	r3, [pc, #12]	; (800388c <uart_enable_tx+0x20>)
 8003880:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003884:	f7fe fb0c 	bl	8001ea0 <HAL_HalfDuplex_EnableTransmitter>
}
 8003888:	e7f6      	b.n	8003878 <uart_enable_tx+0xc>
 800388a:	4770      	bx	lr
 800388c:	200003b0 	.word	0x200003b0

08003890 <uart_enable_rx>:
 * @param obj : pointer to serial_t structure
 * @retval none
 */
void uart_enable_rx(serial_t *obj)
{
  if (obj != NULL && obj->pin_rx == NC) {
 8003890:	b168      	cbz	r0, 80038ae <uart_enable_rx+0x1e>
{
 8003892:	b508      	push	{r3, lr}
  if (obj != NULL && obj->pin_rx == NC) {
 8003894:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8003896:	f1b2 3fff 	cmp.w	r2, #4294967295
 800389a:	d000      	beq.n	800389e <uart_enable_rx+0xe>
    HAL_HalfDuplex_EnableReceiver(uart_handlers[obj->index]);
  }
}
 800389c:	bd08      	pop	{r3, pc}
    HAL_HalfDuplex_EnableReceiver(uart_handlers[obj->index]);
 800389e:	f890 2059 	ldrb.w	r2, [r0, #89]	; 0x59
 80038a2:	4b03      	ldr	r3, [pc, #12]	; (80038b0 <uart_enable_rx+0x20>)
 80038a4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80038a8:	f7fe fb15 	bl	8001ed6 <HAL_HalfDuplex_EnableReceiver>
}
 80038ac:	e7f6      	b.n	800389c <uart_enable_rx+0xc>
 80038ae:	4770      	bx	lr
 80038b0:	200003b0 	.word	0x200003b0

080038b4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback
  * @param  UartHandle pointer on the uart reference
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80038b4:	b508      	push	{r3, lr}
  serial_t *obj = get_serial_obj(huart);
 80038b6:	f7ff fea1 	bl	80035fc <get_serial_obj>
  if (obj) {
 80038ba:	b108      	cbz	r0, 80038c0 <HAL_UART_RxCpltCallback+0xc>
    obj->rx_callback(obj);
 80038bc:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80038be:	4790      	blx	r2
  }
}
 80038c0:	bd08      	pop	{r3, pc}

080038c2 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  UartHandle pointer on the uart reference
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038c2:	b508      	push	{r3, lr}
  serial_t *obj = get_serial_obj(huart);
 80038c4:	f7ff fe9a 	bl	80035fc <get_serial_obj>
  if (obj) {
 80038c8:	b108      	cbz	r0, 80038ce <HAL_UART_TxCpltCallback+0xc>
    obj->tx_callback(obj);
 80038ca:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80038cc:	4790      	blx	r2
  }
}
 80038ce:	bd08      	pop	{r3, pc}

080038d0 <HAL_UART_ErrorCallback>:
  * @brief  error callback from UART
  * @param  UartHandle pointer on the uart reference
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038d0:	b530      	push	{r4, r5, lr}
 80038d2:	b085      	sub	sp, #20
 80038d4:	4604      	mov	r4, r0
#if defined(STM32F1xx) || defined(STM32F2xx) || defined(STM32F4xx) || defined(STM32L1xx)
  if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE) != RESET) {
 80038d6:	6803      	ldr	r3, [r0, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	f012 0f01 	tst.w	r2, #1
 80038de:	d010      	beq.n	8003902 <HAL_UART_ErrorCallback+0x32>
    __HAL_UART_CLEAR_PEFLAG(huart); /* Clear PE flag */
 80038e0:	2200      	movs	r2, #0
 80038e2:	9200      	str	r2, [sp, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	9200      	str	r2, [sp, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	9b00      	ldr	r3, [sp, #0]
  } else if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) != RESET) {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF); /* Clear ORE flag */
  }
#endif
  /* Restart receive interrupt after any error */
  serial_t *obj = get_serial_obj(huart);
 80038ee:	4620      	mov	r0, r4
 80038f0:	f7ff fe84 	bl	80035fc <get_serial_obj>
  if (obj && !serial_rx_active(obj)) {
 80038f4:	4605      	mov	r5, r0
 80038f6:	b110      	cbz	r0, 80038fe <HAL_UART_ErrorCallback+0x2e>
 80038f8:	f7ff ff38 	bl	800376c <serial_rx_active>
 80038fc:	b328      	cbz	r0, 800394a <HAL_UART_ErrorCallback+0x7a>
    HAL_UART_Receive_IT(huart, &(obj->recv), 1);
  }
}
 80038fe:	b005      	add	sp, #20
 8003900:	bd30      	pop	{r4, r5, pc}
  } else if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE) != RESET) {
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	f012 0f02 	tst.w	r2, #2
 8003908:	d007      	beq.n	800391a <HAL_UART_ErrorCallback+0x4a>
    __HAL_UART_CLEAR_FEFLAG(huart); /* Clear FE flag */
 800390a:	2200      	movs	r2, #0
 800390c:	9201      	str	r2, [sp, #4]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	9201      	str	r2, [sp, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	9301      	str	r3, [sp, #4]
 8003916:	9b01      	ldr	r3, [sp, #4]
 8003918:	e7e9      	b.n	80038ee <HAL_UART_ErrorCallback+0x1e>
  } else if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE) != RESET) {
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	f012 0f04 	tst.w	r2, #4
 8003920:	d007      	beq.n	8003932 <HAL_UART_ErrorCallback+0x62>
    __HAL_UART_CLEAR_NEFLAG(huart); /* Clear NE flag */
 8003922:	2200      	movs	r2, #0
 8003924:	9202      	str	r2, [sp, #8]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	9202      	str	r2, [sp, #8]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	9302      	str	r3, [sp, #8]
 800392e:	9b02      	ldr	r3, [sp, #8]
 8003930:	e7dd      	b.n	80038ee <HAL_UART_ErrorCallback+0x1e>
  } else if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) != RESET) {
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	f012 0f08 	tst.w	r2, #8
 8003938:	d0d9      	beq.n	80038ee <HAL_UART_ErrorCallback+0x1e>
    __HAL_UART_CLEAR_OREFLAG(huart); /* Clear ORE flag */
 800393a:	2200      	movs	r2, #0
 800393c:	9203      	str	r2, [sp, #12]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	9203      	str	r2, [sp, #12]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	9303      	str	r3, [sp, #12]
 8003946:	9b03      	ldr	r3, [sp, #12]
 8003948:	e7d1      	b.n	80038ee <HAL_UART_ErrorCallback+0x1e>
    HAL_UART_Receive_IT(huart, &(obj->recv), 1);
 800394a:	2201      	movs	r2, #1
 800394c:	f105 015a 	add.w	r1, r5, #90	; 0x5a
 8003950:	4620      	mov	r0, r4
 8003952:	f7fe fafc 	bl	8001f4e <HAL_UART_Receive_IT>
}
 8003956:	e7d2      	b.n	80038fe <HAL_UART_ErrorCallback+0x2e>

08003958 <USART1_IRQHandler>:
  * @param  None
  * @retval None
  */
#if defined(USART1_BASE)
void USART1_IRQHandler(void)
{
 8003958:	b508      	push	{r3, lr}
  HAL_NVIC_ClearPendingIRQ(USART1_IRQn);
 800395a:	2025      	movs	r0, #37	; 0x25
 800395c:	f7fc ff40 	bl	80007e0 <HAL_NVIC_ClearPendingIRQ>
  HAL_UART_IRQHandler(uart_handlers[UART1_INDEX]);
 8003960:	4b02      	ldr	r3, [pc, #8]	; (800396c <USART1_IRQHandler+0x14>)
 8003962:	6818      	ldr	r0, [r3, #0]
 8003964:	f7fe f99a 	bl	8001c9c <HAL_UART_IRQHandler>
}
 8003968:	bd08      	pop	{r3, pc}
 800396a:	bf00      	nop
 800396c:	200003b0 	.word	0x200003b0

08003970 <USART2_IRQHandler>:
  * @param  None
  * @retval None
  */
#if defined(USART2_BASE)
void USART2_IRQHandler(void)
{
 8003970:	b508      	push	{r3, lr}
  HAL_NVIC_ClearPendingIRQ(USART2_IRQn);
 8003972:	2026      	movs	r0, #38	; 0x26
 8003974:	f7fc ff34 	bl	80007e0 <HAL_NVIC_ClearPendingIRQ>
  if (uart_handlers[UART2_INDEX] != NULL) {
 8003978:	4b02      	ldr	r3, [pc, #8]	; (8003984 <USART2_IRQHandler+0x14>)
 800397a:	6858      	ldr	r0, [r3, #4]
 800397c:	b108      	cbz	r0, 8003982 <USART2_IRQHandler+0x12>
    HAL_UART_IRQHandler(uart_handlers[UART2_INDEX]);
 800397e:	f7fe f98d 	bl	8001c9c <HAL_UART_IRQHandler>
#if defined(STM32G0xx) && defined(LPUART2_BASE)
  if (uart_handlers[LPUART2_INDEX] != NULL) {
    HAL_UART_IRQHandler(uart_handlers[LPUART2_INDEX]);
  }
#endif
}
 8003982:	bd08      	pop	{r3, pc}
 8003984:	200003b0 	.word	0x200003b0

08003988 <USART3_IRQHandler>:
  * @param  None
  * @retval None
  */
#if defined(USART3_BASE)
void USART3_IRQHandler(void)
{
 8003988:	b508      	push	{r3, lr}
  HAL_NVIC_ClearPendingIRQ(USART3_IRQn);
 800398a:	2027      	movs	r0, #39	; 0x27
 800398c:	f7fc ff28 	bl	80007e0 <HAL_NVIC_ClearPendingIRQ>
  }
  if (__HAL_GET_PENDING_IT(HAL_ITLINE_USART8) != RESET) {
    HAL_UART_IRQHandler(uart_handlers[UART8_INDEX]);
  }
#else
  if (uart_handlers[UART3_INDEX] != NULL) {
 8003990:	4b02      	ldr	r3, [pc, #8]	; (800399c <USART3_IRQHandler+0x14>)
 8003992:	6898      	ldr	r0, [r3, #8]
 8003994:	b108      	cbz	r0, 800399a <USART3_IRQHandler+0x12>
    HAL_UART_IRQHandler(uart_handlers[UART3_INDEX]);
 8003996:	f7fe f981 	bl	8001c9c <HAL_UART_IRQHandler>
    HAL_UART_IRQHandler(uart_handlers[LPUART1_INDEX]);
  }
#endif /* STM32G0xx && LPUART1_BASE */
#endif /* STM32F0xx || STM32G0xx */
#endif /* STM32F091xC || STM32F098xx */
}
 800399a:	bd08      	pop	{r3, pc}
 800399c:	200003b0 	.word	0x200003b0

080039a0 <_ZSt25__throw_bad_function_callv>:
 80039a0:	b508      	push	{r3, lr}
 80039a2:	f000 f800 	bl	80039a6 <abort>

080039a6 <abort>:
 80039a6:	2006      	movs	r0, #6
 80039a8:	b508      	push	{r3, lr}
 80039aa:	f000 f863 	bl	8003a74 <raise>
 80039ae:	2001      	movs	r0, #1
 80039b0:	f7fc fe47 	bl	8000642 <_exit>

080039b4 <__errno>:
 80039b4:	4b01      	ldr	r3, [pc, #4]	; (80039bc <__errno+0x8>)
 80039b6:	6818      	ldr	r0, [r3, #0]
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	2000000c 	.word	0x2000000c

080039c0 <__libc_init_array>:
 80039c0:	b570      	push	{r4, r5, r6, lr}
 80039c2:	2600      	movs	r6, #0
 80039c4:	4d0c      	ldr	r5, [pc, #48]	; (80039f8 <__libc_init_array+0x38>)
 80039c6:	4c0d      	ldr	r4, [pc, #52]	; (80039fc <__libc_init_array+0x3c>)
 80039c8:	1b64      	subs	r4, r4, r5
 80039ca:	10a4      	asrs	r4, r4, #2
 80039cc:	42a6      	cmp	r6, r4
 80039ce:	d109      	bne.n	80039e4 <__libc_init_array+0x24>
 80039d0:	f000 f86c 	bl	8003aac <_init>
 80039d4:	2600      	movs	r6, #0
 80039d6:	4d0a      	ldr	r5, [pc, #40]	; (8003a00 <__libc_init_array+0x40>)
 80039d8:	4c0a      	ldr	r4, [pc, #40]	; (8003a04 <__libc_init_array+0x44>)
 80039da:	1b64      	subs	r4, r4, r5
 80039dc:	10a4      	asrs	r4, r4, #2
 80039de:	42a6      	cmp	r6, r4
 80039e0:	d105      	bne.n	80039ee <__libc_init_array+0x2e>
 80039e2:	bd70      	pop	{r4, r5, r6, pc}
 80039e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80039e8:	4798      	blx	r3
 80039ea:	3601      	adds	r6, #1
 80039ec:	e7ee      	b.n	80039cc <__libc_init_array+0xc>
 80039ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f2:	4798      	blx	r3
 80039f4:	3601      	adds	r6, #1
 80039f6:	e7f2      	b.n	80039de <__libc_init_array+0x1e>
 80039f8:	08003dbc 	.word	0x08003dbc
 80039fc:	08003dbc 	.word	0x08003dbc
 8003a00:	08003dbc 	.word	0x08003dbc
 8003a04:	08003dcc 	.word	0x08003dcc

08003a08 <memcpy>:
 8003a08:	440a      	add	r2, r1
 8003a0a:	4291      	cmp	r1, r2
 8003a0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a10:	d100      	bne.n	8003a14 <memcpy+0xc>
 8003a12:	4770      	bx	lr
 8003a14:	b510      	push	{r4, lr}
 8003a16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a1a:	4291      	cmp	r1, r2
 8003a1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a20:	d1f9      	bne.n	8003a16 <memcpy+0xe>
 8003a22:	bd10      	pop	{r4, pc}

08003a24 <_raise_r>:
 8003a24:	291f      	cmp	r1, #31
 8003a26:	b538      	push	{r3, r4, r5, lr}
 8003a28:	4604      	mov	r4, r0
 8003a2a:	460d      	mov	r5, r1
 8003a2c:	d904      	bls.n	8003a38 <_raise_r+0x14>
 8003a2e:	2316      	movs	r3, #22
 8003a30:	6003      	str	r3, [r0, #0]
 8003a32:	f04f 30ff 	mov.w	r0, #4294967295
 8003a36:	bd38      	pop	{r3, r4, r5, pc}
 8003a38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003a3a:	b112      	cbz	r2, 8003a42 <_raise_r+0x1e>
 8003a3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003a40:	b94b      	cbnz	r3, 8003a56 <_raise_r+0x32>
 8003a42:	4620      	mov	r0, r4
 8003a44:	f000 f830 	bl	8003aa8 <_getpid_r>
 8003a48:	462a      	mov	r2, r5
 8003a4a:	4601      	mov	r1, r0
 8003a4c:	4620      	mov	r0, r4
 8003a4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a52:	f000 b817 	b.w	8003a84 <_kill_r>
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d00a      	beq.n	8003a70 <_raise_r+0x4c>
 8003a5a:	1c59      	adds	r1, r3, #1
 8003a5c:	d103      	bne.n	8003a66 <_raise_r+0x42>
 8003a5e:	2316      	movs	r3, #22
 8003a60:	6003      	str	r3, [r0, #0]
 8003a62:	2001      	movs	r0, #1
 8003a64:	e7e7      	b.n	8003a36 <_raise_r+0x12>
 8003a66:	2400      	movs	r4, #0
 8003a68:	4628      	mov	r0, r5
 8003a6a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003a6e:	4798      	blx	r3
 8003a70:	2000      	movs	r0, #0
 8003a72:	e7e0      	b.n	8003a36 <_raise_r+0x12>

08003a74 <raise>:
 8003a74:	4b02      	ldr	r3, [pc, #8]	; (8003a80 <raise+0xc>)
 8003a76:	4601      	mov	r1, r0
 8003a78:	6818      	ldr	r0, [r3, #0]
 8003a7a:	f7ff bfd3 	b.w	8003a24 <_raise_r>
 8003a7e:	bf00      	nop
 8003a80:	2000000c 	.word	0x2000000c

08003a84 <_kill_r>:
 8003a84:	b538      	push	{r3, r4, r5, lr}
 8003a86:	2300      	movs	r3, #0
 8003a88:	4d06      	ldr	r5, [pc, #24]	; (8003aa4 <_kill_r+0x20>)
 8003a8a:	4604      	mov	r4, r0
 8003a8c:	4608      	mov	r0, r1
 8003a8e:	4611      	mov	r1, r2
 8003a90:	602b      	str	r3, [r5, #0]
 8003a92:	f7fc fdce 	bl	8000632 <_kill>
 8003a96:	1c43      	adds	r3, r0, #1
 8003a98:	d102      	bne.n	8003aa0 <_kill_r+0x1c>
 8003a9a:	682b      	ldr	r3, [r5, #0]
 8003a9c:	b103      	cbz	r3, 8003aa0 <_kill_r+0x1c>
 8003a9e:	6023      	str	r3, [r4, #0]
 8003aa0:	bd38      	pop	{r3, r4, r5, pc}
 8003aa2:	bf00      	nop
 8003aa4:	2000044c 	.word	0x2000044c

08003aa8 <_getpid_r>:
 8003aa8:	f7fc bdc1 	b.w	800062e <_getpid>

08003aac <_init>:
 8003aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aae:	bf00      	nop
 8003ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ab2:	bc08      	pop	{r3}
 8003ab4:	469e      	mov	lr, r3
 8003ab6:	4770      	bx	lr

08003ab8 <_fini>:
 8003ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aba:	bf00      	nop
 8003abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003abe:	bc08      	pop	{r3}
 8003ac0:	469e      	mov	lr, r3
 8003ac2:	4770      	bx	lr
