
RC_iBus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08004058  08004058  00014058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004348  08004348  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004348  08004348  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004348  08004348  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08004348  08004348  00014348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  08004358  08004358  00014358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  20000070  080043d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  080043d4  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00042f3f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007fd3  00000000  00000000  00062fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  0006afb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001560  00000000  00000000  0006c438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000248d3  00000000  00000000  0006d998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002606a  00000000  00000000  0009226b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3d3d  00000000  00000000  000b82d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c012  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aa8  00000000  00000000  0015c068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000123cf  00000000  00000000  0015fb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004040 	.word	0x08004040

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004040 	.word	0x08004040

0800014c <mainAppl_Init>:
/**
  * @brief Main application - initialization function.
  * @retval None
  */
void mainAppl_Init(void)
{
 800014c:	b508      	push	{r3, lr}
    mainCnt = 0u;
 800014e:	4b07      	ldr	r3, [pc, #28]	; (800016c <mainAppl_Init+0x20>)
 8000150:	2200      	movs	r2, #0
 8000152:	701a      	strb	r2, [r3, #0]

    /* Initialize Digital Outputs */
    DO_Init();
 8000154:	f000 f974 	bl	8000440 <DO_Init>

    /* Error Handler initialization */
    eh_Init();
 8000158:	f000 f95c 	bl	8000414 <eh_Init>

    /* UART configuration - initialization function */
    cfgUART_Init();
 800015c:	f000 f9e8 	bl	8000530 <cfgUART_Init>

    /* Timer for TSL Scheduler initialization function */
    tslstmr_Init();
 8000160:	f000 f924 	bl	80003ac <tslstmr_Init>

    /* IBus communication module - initialization function */
    ibcomm_Init();
 8000164:	f000 fa04 	bl	8000570 <ibcomm_Init>
}
 8000168:	bd08      	pop	{r3, pc}
 800016a:	bf00      	nop
 800016c:	2000008c 	.word	0x2000008c

08000170 <tsl_10ms_time_slot>:
// Atention!
// This time slot calls added with functions called from 5 ms slot time should
// not exceed the base time of 5 ms.
//******************************************************************************
void tsl_10ms_time_slot(void)
{
 8000170:	b508      	push	{r3, lr}
    /* Increment a variable for test */
    mainCnt++;
 8000172:	4a03      	ldr	r2, [pc, #12]	; (8000180 <tsl_10ms_time_slot+0x10>)
 8000174:	7813      	ldrb	r3, [r2, #0]
 8000176:	3301      	adds	r3, #1
 8000178:	7013      	strb	r3, [r2, #0]

    /* IBus Communication module - main function */
    ibcomm_MainRunnable();
 800017a:	f000 fa31 	bl	80005e0 <ibcomm_MainRunnable>
}
 800017e:	bd08      	pop	{r3, pc}
 8000180:	2000008c 	.word	0x2000008c

08000184 <tsl_20ms_time_slot>:
// not exceed the base time of 5 ms.
//******************************************************************************
void tsl_20ms_time_slot(void)
{

}
 8000184:	4770      	bx	lr

08000186 <tsl_40ms_time_slot>:
// not exceed the base time of 5 ms.
//******************************************************************************
void tsl_40ms_time_slot(void)
{

}
 8000186:	4770      	bx	lr

08000188 <tsl_80ms_time_slot>:
// Atention!
// This time slot calls added with functions called from 5 ms slot time should
// not exceed the base time of 5 ms.
//******************************************************************************
void tsl_80ms_time_slot(void)
{
 8000188:	b508      	push	{r3, lr}
    /* For test, toggle Green LED */
    DO_Toggle(LED_GREEN);
 800018a:	2000      	movs	r0, #0
 800018c:	f000 f98c 	bl	80004a8 <DO_Toggle>

    /* Send a string on serial port */
    //Serial1.print("Hello ");
}
 8000190:	bd08      	pop	{r3, pc}
	...

08000194 <ms_disable_irq>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000194:	b672      	cpsid	i
//******************************************************************************
void ms_disable_irq(void)
{
    __disable_irq();
    /* Increment interrupts disabled counter */
    i_cnt++;
 8000196:	4a02      	ldr	r2, [pc, #8]	; (80001a0 <ms_disable_irq+0xc>)
 8000198:	6813      	ldr	r3, [r2, #0]
 800019a:	3301      	adds	r3, #1
 800019c:	6013      	str	r3, [r2, #0]
}
 800019e:	4770      	bx	lr
 80001a0:	20000090 	.word	0x20000090

080001a4 <ms_enable_irq>:
// Enable all interrupts
//******************************************************************************
void ms_enable_irq(void)
{
    /* Decrement interrupts disable counter */
    if (i_cnt)
 80001a4:	4b05      	ldr	r3, [pc, #20]	; (80001bc <ms_enable_irq+0x18>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	b11b      	cbz	r3, 80001b2 <ms_enable_irq+0xe>
    {
        i_cnt--;
 80001aa:	4a04      	ldr	r2, [pc, #16]	; (80001bc <ms_enable_irq+0x18>)
 80001ac:	6813      	ldr	r3, [r2, #0]
 80001ae:	3b01      	subs	r3, #1
 80001b0:	6013      	str	r3, [r2, #0]
    }

    if (i_cnt == 0)
 80001b2:	4b02      	ldr	r3, [pc, #8]	; (80001bc <ms_enable_irq+0x18>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	b903      	cbnz	r3, 80001ba <ms_enable_irq+0x16>
  __ASM volatile ("cpsie i" : : : "memory");
 80001b8:	b662      	cpsie	i
    {
        __enable_irq();
    }
}
 80001ba:	4770      	bx	lr
 80001bc:	20000090 	.word	0x20000090

080001c0 <tsl_OnTickTimeEvent>:
// Function to be called from Timer ISR
// Just increment the tick counter in this function
//******************************************************************************
void tsl_OnTickTimeEvent(void)
{
	tslTickCnt++;
 80001c0:	4a02      	ldr	r2, [pc, #8]	; (80001cc <tsl_OnTickTimeEvent+0xc>)
 80001c2:	6813      	ldr	r3, [r2, #0]
 80001c4:	3301      	adds	r3, #1
 80001c6:	6013      	str	r3, [r2, #0]
}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	20000480 	.word	0x20000480

080001d0 <tsl_call_sequence_first>:
// Initial call sequence for time slot functions.
// This sequence is used only for fist calls. After initial sequece is passed,
// normal sequence is used. 
//******************************************************************************
static void tsl_call_sequence_first(uint32_t cnt)
{
 80001d0:	b508      	push	{r3, lr}
    switch (cnt)
 80001d2:	3802      	subs	r0, #2
 80001d4:	2807      	cmp	r0, #7
 80001d6:	d807      	bhi.n	80001e8 <tsl_call_sequence_first+0x18>
 80001d8:	e8df f000 	tbb	[pc, r0]
 80001dc:	0d0a0704 	.word	0x0d0a0704
 80001e0:	19161310 	.word	0x19161310
        case 1:
            // no call here
        break;

        case 2:
            tsl_10ms_time_slot();
 80001e4:	f7ff ffc4 	bl	8000170 <tsl_10ms_time_slot>

        default:
            //TODO: eh_Err_Set(ERR_TSL_CSF_OUT_OF_RANGE);
        break;
    }
}
 80001e8:	bd08      	pop	{r3, pc}
            tsl_20ms_time_slot();
 80001ea:	f7ff ffcb 	bl	8000184 <tsl_20ms_time_slot>
        break;
 80001ee:	e7fb      	b.n	80001e8 <tsl_call_sequence_first+0x18>
            tsl_10ms_time_slot();
 80001f0:	f7ff ffbe 	bl	8000170 <tsl_10ms_time_slot>
        break;
 80001f4:	e7f8      	b.n	80001e8 <tsl_call_sequence_first+0x18>
            tsl_40ms_time_slot();
 80001f6:	f7ff ffc6 	bl	8000186 <tsl_40ms_time_slot>
        break;
 80001fa:	e7f5      	b.n	80001e8 <tsl_call_sequence_first+0x18>
            tsl_10ms_time_slot();
 80001fc:	f7ff ffb8 	bl	8000170 <tsl_10ms_time_slot>
        break;
 8000200:	e7f2      	b.n	80001e8 <tsl_call_sequence_first+0x18>
            tsl_20ms_time_slot();
 8000202:	f7ff ffbf 	bl	8000184 <tsl_20ms_time_slot>
        break;
 8000206:	e7ef      	b.n	80001e8 <tsl_call_sequence_first+0x18>
            tsl_10ms_time_slot();
 8000208:	f7ff ffb2 	bl	8000170 <tsl_10ms_time_slot>
        break;
 800020c:	e7ec      	b.n	80001e8 <tsl_call_sequence_first+0x18>
            tsl_80ms_time_slot();
 800020e:	f7ff ffbb 	bl	8000188 <tsl_80ms_time_slot>
}
 8000212:	e7e9      	b.n	80001e8 <tsl_call_sequence_first+0x18>

08000214 <tsl_call_sequence_normal>:
//******************************************************************************
// Normal call sequence for time slot functions.
// After initial sequece is passed, normal sequence is used.
//******************************************************************************
static void tsl_call_sequence_normal(uint32_t *cnt)
{
 8000214:	b510      	push	{r4, lr}
 8000216:	4604      	mov	r4, r0
    switch (*cnt)
 8000218:	6803      	ldr	r3, [r0, #0]
 800021a:	3b01      	subs	r3, #1
 800021c:	2b0f      	cmp	r3, #15
 800021e:	d838      	bhi.n	8000292 <tsl_call_sequence_normal+0x7e>
 8000220:	e8df f003 	tbb	[pc, r3]
 8000224:	110e0b08 	.word	0x110e0b08
 8000228:	0a1a1714 	.word	0x0a1a1714
 800022c:	2623201d 	.word	0x2623201d
 8000230:	322f2c29 	.word	0x322f2c29
    {
        case 1:
            tsl_10ms_time_slot();
 8000234:	f7ff ff9c 	bl	8000170 <tsl_10ms_time_slot>
        default:
            //TODO: eh_Err_Set(ERR_TSL_CSN_OUT_OF_RANGE);
            *cnt = 0;
        break;
    }
}
 8000238:	bd10      	pop	{r4, pc}
            tsl_20ms_time_slot();
 800023a:	f7ff ffa3 	bl	8000184 <tsl_20ms_time_slot>
        break;
 800023e:	e7fb      	b.n	8000238 <tsl_call_sequence_normal+0x24>
            tsl_10ms_time_slot();
 8000240:	f7ff ff96 	bl	8000170 <tsl_10ms_time_slot>
        break;
 8000244:	e7f8      	b.n	8000238 <tsl_call_sequence_normal+0x24>
            tsl_40ms_time_slot();
 8000246:	f7ff ff9e 	bl	8000186 <tsl_40ms_time_slot>
        break;
 800024a:	e7f5      	b.n	8000238 <tsl_call_sequence_normal+0x24>
            tsl_10ms_time_slot();
 800024c:	f7ff ff90 	bl	8000170 <tsl_10ms_time_slot>
        break;
 8000250:	e7f2      	b.n	8000238 <tsl_call_sequence_normal+0x24>
            tsl_20ms_time_slot();
 8000252:	f7ff ff97 	bl	8000184 <tsl_20ms_time_slot>
        break;
 8000256:	e7ef      	b.n	8000238 <tsl_call_sequence_normal+0x24>
            tsl_10ms_time_slot();
 8000258:	f7ff ff8a 	bl	8000170 <tsl_10ms_time_slot>
        break;
 800025c:	e7ec      	b.n	8000238 <tsl_call_sequence_normal+0x24>
            tsl_10ms_time_slot();
 800025e:	f7ff ff87 	bl	8000170 <tsl_10ms_time_slot>
        break;
 8000262:	e7e9      	b.n	8000238 <tsl_call_sequence_normal+0x24>
            tsl_20ms_time_slot();
 8000264:	f7ff ff8e 	bl	8000184 <tsl_20ms_time_slot>
        break;
 8000268:	e7e6      	b.n	8000238 <tsl_call_sequence_normal+0x24>
            tsl_10ms_time_slot();
 800026a:	f7ff ff81 	bl	8000170 <tsl_10ms_time_slot>
        break;
 800026e:	e7e3      	b.n	8000238 <tsl_call_sequence_normal+0x24>
            tsl_40ms_time_slot();
 8000270:	f7ff ff89 	bl	8000186 <tsl_40ms_time_slot>
        break;
 8000274:	e7e0      	b.n	8000238 <tsl_call_sequence_normal+0x24>
            tsl_10ms_time_slot();
 8000276:	f7ff ff7b 	bl	8000170 <tsl_10ms_time_slot>
        break;
 800027a:	e7dd      	b.n	8000238 <tsl_call_sequence_normal+0x24>
            tsl_20ms_time_slot();
 800027c:	f7ff ff82 	bl	8000184 <tsl_20ms_time_slot>
        break;
 8000280:	e7da      	b.n	8000238 <tsl_call_sequence_normal+0x24>
            tsl_10ms_time_slot();
 8000282:	f7ff ff75 	bl	8000170 <tsl_10ms_time_slot>
        break;
 8000286:	e7d7      	b.n	8000238 <tsl_call_sequence_normal+0x24>
            tsl_80ms_time_slot();
 8000288:	f7ff ff7e 	bl	8000188 <tsl_80ms_time_slot>
            *cnt = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	6023      	str	r3, [r4, #0]
        break;
 8000290:	e7d2      	b.n	8000238 <tsl_call_sequence_normal+0x24>
            *cnt = 0;
 8000292:	2300      	movs	r3, #0
 8000294:	6003      	str	r3, [r0, #0]
}
 8000296:	e7cf      	b.n	8000238 <tsl_call_sequence_normal+0x24>

08000298 <tsl_Scheduler>:
{
 8000298:	b510      	push	{r4, lr}
    if (call_seq == INITIAL_CALL_SEQUENCE) // At the system initialization need to run this call sequence
 800029a:	4b0d      	ldr	r3, [pc, #52]	; (80002d0 <tsl_Scheduler+0x38>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	b113      	cbz	r3, 80002a6 <tsl_Scheduler+0xe>
    else if (call_seq == NORMAL_CALL_SEQUENCE) // Normal call sequence
 80002a0:	2b01      	cmp	r3, #1
 80002a2:	d00d      	beq.n	80002c0 <tsl_Scheduler+0x28>
}
 80002a4:	bd10      	pop	{r4, pc}
        call_cnt_seq_1++;
 80002a6:	4c0b      	ldr	r4, [pc, #44]	; (80002d4 <tsl_Scheduler+0x3c>)
 80002a8:	6820      	ldr	r0, [r4, #0]
 80002aa:	3001      	adds	r0, #1
 80002ac:	6020      	str	r0, [r4, #0]
        tsl_call_sequence_first(call_cnt_seq_1);
 80002ae:	f7ff ff8f 	bl	80001d0 <tsl_call_sequence_first>
        if(call_cnt_seq_1 >= NR_CALLS_INI_SEQ)
 80002b2:	6823      	ldr	r3, [r4, #0]
 80002b4:	2b08      	cmp	r3, #8
 80002b6:	d9f5      	bls.n	80002a4 <tsl_Scheduler+0xc>
            call_seq = NORMAL_CALL_SEQUENCE;
 80002b8:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <tsl_Scheduler+0x38>)
 80002ba:	2201      	movs	r2, #1
 80002bc:	701a      	strb	r2, [r3, #0]
 80002be:	e7f1      	b.n	80002a4 <tsl_Scheduler+0xc>
        call_cnt_seq_n++;
 80002c0:	4805      	ldr	r0, [pc, #20]	; (80002d8 <tsl_Scheduler+0x40>)
 80002c2:	6803      	ldr	r3, [r0, #0]
 80002c4:	3301      	adds	r3, #1
 80002c6:	6003      	str	r3, [r0, #0]
        tsl_call_sequence_normal(&call_cnt_seq_n);
 80002c8:	f7ff ffa4 	bl	8000214 <tsl_call_sequence_normal>
}
 80002cc:	e7ea      	b.n	80002a4 <tsl_Scheduler+0xc>
 80002ce:	bf00      	nop
 80002d0:	2000009c 	.word	0x2000009c
 80002d4:	20000094 	.word	0x20000094
 80002d8:	20000098 	.word	0x20000098

080002dc <tsl_Init>:
{
 80002dc:	b508      	push	{r3, lr}
	tslTickCnt = 0u;
 80002de:	4b04      	ldr	r3, [pc, #16]	; (80002f0 <tsl_Init+0x14>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
	tsl_mainAppl_Init();
 80002e4:	f7ff ff32 	bl	800014c <mainAppl_Init>
	tslstmr_RegisterTmrExpireCallback(tsl_OnTickTimeEvent);
 80002e8:	4802      	ldr	r0, [pc, #8]	; (80002f4 <tsl_Init+0x18>)
 80002ea:	f000 f84b 	bl	8000384 <tslstmr_RegisterTmrExpireCallback>
}
 80002ee:	bd08      	pop	{r3, pc}
 80002f0:	20000480 	.word	0x20000480
 80002f4:	080001c1 	.word	0x080001c1

080002f8 <tsl_SchedulerRun>:
{
 80002f8:	b510      	push	{r4, lr}
 80002fa:	e001      	b.n	8000300 <tsl_SchedulerRun+0x8>
            tsl_Scheduler();
 80002fc:	f7ff ffcc 	bl	8000298 <tsl_Scheduler>
        TSL_GLOBAL_DISABLE_ISR();
 8000300:	f7ff ff48 	bl	8000194 <ms_disable_irq>
        l_tickCnt = tslTickCnt;
 8000304:	4b04      	ldr	r3, [pc, #16]	; (8000318 <tsl_SchedulerRun+0x20>)
 8000306:	681c      	ldr	r4, [r3, #0]
        tslTickCnt = 0u;
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
        TSL_GLOBAL_ENABLE_ISR();
 800030c:	f7ff ff4a 	bl	80001a4 <ms_enable_irq>
        if (l_tickCnt)
 8000310:	2c00      	cmp	r4, #0
 8000312:	d0f5      	beq.n	8000300 <tsl_SchedulerRun+0x8>
 8000314:	e7f2      	b.n	80002fc <tsl_SchedulerRun+0x4>
 8000316:	bf00      	nop
 8000318:	20000480 	.word	0x20000480

0800031c <_ZL16OnTickTmrExpiredv>:
  * @brief  TickTimer interrupt callback - this function is called by Hardware Timer module
  * @param  None
  * @retval None
  */
static void OnTickTmrExpired()
{
 800031c:	b508      	push	{r3, lr}
    /* Call user function */
    if (pFncTmrExp != NULL)
 800031e:	4b02      	ldr	r3, [pc, #8]	; (8000328 <_ZL16OnTickTmrExpiredv+0xc>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	b103      	cbz	r3, 8000326 <_ZL16OnTickTmrExpiredv+0xa>
    {
        pFncTmrExp();
 8000324:	4798      	blx	r3
    }
}
 8000326:	bd08      	pop	{r3, pc}
 8000328:	20000150 	.word	0x20000150

0800032c <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800032c:	b508      	push	{r3, lr}
      {
	(*_Base::_M_get_pointer(__functor))(
 800032e:	6803      	ldr	r3, [r0, #0]
 8000330:	4798      	blx	r3
	    std::forward<_ArgTypes>(__args)...);
      }
 8000332:	bd08      	pop	{r3, pc}

08000334 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
 8000334:	2a01      	cmp	r2, #1
 8000336:	d003      	beq.n	8000340 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
 8000338:	2a02      	cmp	r2, #2
 800033a:	d003      	beq.n	8000344 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
 800033c:	2000      	movs	r0, #0
 800033e:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8000340:	6001      	str	r1, [r0, #0]
	      break;
 8000342:	e7fb      	b.n	800033c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8000344:	680b      	ldr	r3, [r1, #0]
 8000346:	6003      	str	r3, [r0, #0]
	      break;
 8000348:	e7f8      	b.n	800033c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	...

0800034c <_Z41__static_initialization_and_destruction_0ii>:
 800034c:	b538      	push	{r3, r4, r5, lr}
 800034e:	4604      	mov	r4, r0
 8000350:	460d      	mov	r5, r1
 8000352:	2801      	cmp	r0, #1
 8000354:	d005      	beq.n	8000362 <_Z41__static_initialization_and_destruction_0ii+0x16>
static HardwareTimer TickTmr(TIM4);
 8000356:	b91c      	cbnz	r4, 8000360 <_Z41__static_initialization_and_destruction_0ii+0x14>
 8000358:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800035c:	429d      	cmp	r5, r3
 800035e:	d009      	beq.n	8000374 <_Z41__static_initialization_and_destruction_0ii+0x28>
}
 8000360:	bd38      	pop	{r3, r4, r5, pc}
 8000362:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000366:	4299      	cmp	r1, r3
 8000368:	d1f5      	bne.n	8000356 <_Z41__static_initialization_and_destruction_0ii+0xa>
static HardwareTimer TickTmr(TIM4);
 800036a:	4904      	ldr	r1, [pc, #16]	; (800037c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800036c:	4804      	ldr	r0, [pc, #16]	; (8000380 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800036e:	f002 fbdf 	bl	8002b30 <_ZN13HardwareTimerC1EP11TIM_TypeDef>
 8000372:	e7f0      	b.n	8000356 <_Z41__static_initialization_and_destruction_0ii+0xa>
 8000374:	4802      	ldr	r0, [pc, #8]	; (8000380 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8000376:	f002 fb53 	bl	8002a20 <_ZN13HardwareTimerD1Ev>
}
 800037a:	e7f1      	b.n	8000360 <_Z41__static_initialization_and_destruction_0ii+0x14>
 800037c:	40000800 	.word	0x40000800
 8000380:	200000a0 	.word	0x200000a0

08000384 <tslstmr_RegisterTmrExpireCallback>:
    pFncTmrExp = pTmrExpiredCallback;
 8000384:	4b01      	ldr	r3, [pc, #4]	; (800038c <tslstmr_RegisterTmrExpireCallback+0x8>)
 8000386:	6018      	str	r0, [r3, #0]
}
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	20000150 	.word	0x20000150

08000390 <_ZNSt8functionIFvvEEC1IPS0_vvEET_>:
    _Function_base() : _M_manager(nullptr) { }
 8000390:	2300      	movs	r3, #0
 8000392:	6083      	str	r3, [r0, #8]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 8000394:	b121      	cbz	r1, 80003a0 <_ZNSt8functionIFvvEEC1IPS0_vvEET_+0x10>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8000396:	6001      	str	r1, [r0, #0]
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8000398:	4b02      	ldr	r3, [pc, #8]	; (80003a4 <_ZNSt8functionIFvvEEC1IPS0_vvEET_+0x14>)
 800039a:	60c3      	str	r3, [r0, #12]
	    _M_manager = &_My_handler::_M_manager;
 800039c:	4b02      	ldr	r3, [pc, #8]	; (80003a8 <_ZNSt8functionIFvvEEC1IPS0_vvEET_+0x18>)
 800039e:	6083      	str	r3, [r0, #8]
	  }
      }
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	0800032d 	.word	0x0800032d
 80003a8:	08000335 	.word	0x08000335

080003ac <tslstmr_Init>:
{
 80003ac:	b510      	push	{r4, lr}
 80003ae:	b084      	sub	sp, #16
    pFncTmrExp = NULL;
 80003b0:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <tslstmr_Init+0x40>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
    TickTmr.setOverflow(TSL_SCHEDULER_TIME_TICK, MICROSEC_FORMAT);
 80003b6:	4c0e      	ldr	r4, [pc, #56]	; (80003f0 <tslstmr_Init+0x44>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	f241 3188 	movw	r1, #5000	; 0x1388
 80003be:	4620      	mov	r0, r4
 80003c0:	f002 fc00 	bl	8002bc4 <_ZN13HardwareTimer11setOverflowEm13TimerFormat_t>
    TickTmr.attachInterrupt(OnTickTmrExpired);
 80003c4:	490b      	ldr	r1, [pc, #44]	; (80003f4 <tslstmr_Init+0x48>)
 80003c6:	4668      	mov	r0, sp
 80003c8:	f7ff ffe2 	bl	8000390 <_ZNSt8functionIFvvEEC1IPS0_vvEET_>
 80003cc:	4669      	mov	r1, sp
 80003ce:	4620      	mov	r0, r4
 80003d0:	f002 fc63 	bl	8002c9a <_ZN13HardwareTimer15attachInterruptESt8functionIFvvEE>
      if (_M_manager)
 80003d4:	9b02      	ldr	r3, [sp, #8]
 80003d6:	b11b      	cbz	r3, 80003e0 <tslstmr_Init+0x34>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80003d8:	2203      	movs	r2, #3
 80003da:	4669      	mov	r1, sp
 80003dc:	4668      	mov	r0, sp
 80003de:	4798      	blx	r3
    TickTmr.resume();
 80003e0:	4803      	ldr	r0, [pc, #12]	; (80003f0 <tslstmr_Init+0x44>)
 80003e2:	f002 fadd 	bl	80029a0 <_ZN13HardwareTimer6resumeEv>
}
 80003e6:	b004      	add	sp, #16
 80003e8:	bd10      	pop	{r4, pc}
 80003ea:	bf00      	nop
 80003ec:	20000150 	.word	0x20000150
 80003f0:	200000a0 	.word	0x200000a0
 80003f4:	0800031d 	.word	0x0800031d

080003f8 <_GLOBAL__sub_I_pFncTmrExp>:
}
 80003f8:	b508      	push	{r3, lr}
 80003fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80003fe:	2001      	movs	r0, #1
 8000400:	f7ff ffa4 	bl	800034c <_Z41__static_initialization_and_destruction_0ii>
 8000404:	bd08      	pop	{r3, pc}

08000406 <_GLOBAL__sub_D_pFncTmrExp>:
 8000406:	b508      	push	{r3, lr}
 8000408:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800040c:	2000      	movs	r0, #0
 800040e:	f7ff ff9d 	bl	800034c <_Z41__static_initialization_and_destruction_0ii>
 8000412:	bd08      	pop	{r3, pc}

08000414 <eh_Init>:
  * @retval None
  */
void eh_Init(void)
{
    ehMcuErrorCode = MCU_NO_ERROR;
}
 8000414:	4770      	bx	lr

08000416 <eh_SetMcuError>:
  __ASM volatile ("cpsid i" : : : "memory");
 8000416:	b672      	cpsid	i

    /* Stop interrupts */
    __disable_irq();

    /* Stop code execution */
    while (1)
 8000418:	e7fe      	b.n	8000418 <eh_SetMcuError+0x2>

0800041a <DO_Clear>:
  * @retval none.
  */
void DO_Clear(E_DO_PIN_LIST digitalOutput)
{
    /* Select digital output to be controlled */
    switch (digitalOutput)
 800041a:	b100      	cbz	r0, 800041e <DO_Clear+0x4>
 800041c:	4770      	bx	lr
{
 800041e:	b508      	push	{r3, lr}
    {
        /* Green LED */
        case LED_GREEN:
            HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000426:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800042a:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 800042e:	f000 fda3 	bl	8000f78 <HAL_GPIO_WritePin>

        default:
            /* TODO: Set an error */
            break;
    }
}
 8000432:	bd08      	pop	{r3, pc}

08000434 <_ZL30do_DigitalOutputs_DefaultStatev>:
/**
  * @brief PRIVATE FUNCTION: Set default state for digital outputs
  * @retval none.
  */
static void do_DigitalOutputs_DefaultState(void)
{
 8000434:	b508      	push	{r3, lr}
    /* Green LED output */
    DO_Clear(LED_GREEN);
 8000436:	2000      	movs	r0, #0
 8000438:	f7ff ffef 	bl	800041a <DO_Clear>
}
 800043c:	bd08      	pop	{r3, pc}
	...

08000440 <DO_Init>:
{
 8000440:	b500      	push	{lr}
 8000442:	b089      	sub	sp, #36	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000444:	4b16      	ldr	r3, [pc, #88]	; (80004a0 <DO_Init+0x60>)
 8000446:	699a      	ldr	r2, [r3, #24]
 8000448:	f042 0210 	orr.w	r2, r2, #16
 800044c:	619a      	str	r2, [r3, #24]
 800044e:	699a      	ldr	r2, [r3, #24]
 8000450:	f002 0210 	and.w	r2, r2, #16
 8000454:	9201      	str	r2, [sp, #4]
 8000456:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000458:	699a      	ldr	r2, [r3, #24]
 800045a:	f042 0220 	orr.w	r2, r2, #32
 800045e:	619a      	str	r2, [r3, #24]
 8000460:	699a      	ldr	r2, [r3, #24]
 8000462:	f002 0220 	and.w	r2, r2, #32
 8000466:	9202      	str	r2, [sp, #8]
 8000468:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800046a:	699a      	ldr	r2, [r3, #24]
 800046c:	f042 0204 	orr.w	r2, r2, #4
 8000470:	619a      	str	r2, [r3, #24]
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	f003 0304 	and.w	r3, r3, #4
 8000478:	9303      	str	r3, [sp, #12]
 800047a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = LED_GREEN_PIN;
 800047c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000480:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000482:	2301      	movs	r3, #1
 8000484:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000486:	2300      	movs	r3, #0
 8000488:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048a:	2302      	movs	r3, #2
 800048c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(LED_GREEN_PORT, &GPIO_InitStruct);
 800048e:	a904      	add	r1, sp, #16
 8000490:	4804      	ldr	r0, [pc, #16]	; (80004a4 <DO_Init+0x64>)
 8000492:	f000 fc61 	bl	8000d58 <HAL_GPIO_Init>
    do_DigitalOutputs_DefaultState();
 8000496:	f7ff ffcd 	bl	8000434 <_ZL30do_DigitalOutputs_DefaultStatev>
}
 800049a:	b009      	add	sp, #36	; 0x24
 800049c:	f85d fb04 	ldr.w	pc, [sp], #4
 80004a0:	40021000 	.word	0x40021000
 80004a4:	40011000 	.word	0x40011000

080004a8 <DO_Toggle>:
    switch (digitalOutput)
 80004a8:	b100      	cbz	r0, 80004ac <DO_Toggle+0x4>
 80004aa:	4770      	bx	lr
{
 80004ac:	b508      	push	{r3, lr}
            HAL_GPIO_TogglePin(LED_GREEN_PORT, LED_GREEN_PIN);
 80004ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004b2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80004b6:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 80004ba:	f000 fd63 	bl	8000f84 <HAL_GPIO_TogglePin>
}
 80004be:	bd08      	pop	{r3, pc}

080004c0 <cfgUART1_Init>:
  * @brief UART1 Initialization Function
  * @param None
  * @retval None
  */
static void cfgUART1_Init(void)
{
 80004c0:	b508      	push	{r3, lr}
    huart1.Instance = USART1;
 80004c2:	480b      	ldr	r0, [pc, #44]	; (80004f0 <cfgUART1_Init+0x30>)
 80004c4:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <cfgUART1_Init+0x34>)
 80004c6:	6003      	str	r3, [r0, #0]
    huart1.Init.BaudRate = 115200;
 80004c8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80004cc:	6043      	str	r3, [r0, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004ce:	2300      	movs	r3, #0
 80004d0:	6083      	str	r3, [r0, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80004d2:	60c3      	str	r3, [r0, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80004d4:	6103      	str	r3, [r0, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80004d6:	220c      	movs	r2, #12
 80004d8:	6142      	str	r2, [r0, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004da:	6183      	str	r3, [r0, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004dc:	61c3      	str	r3, [r0, #28]

    if (HAL_UART_Init(&huart1) != HAL_OK)
 80004de:	f001 fd14 	bl	8001f0a <HAL_UART_Init>
 80004e2:	b900      	cbnz	r0, 80004e6 <cfgUART1_Init+0x26>
    {
        eh_SetMcuError(MCU_ERR_CODE_100);
    }
}
 80004e4:	bd08      	pop	{r3, pc}
        eh_SetMcuError(MCU_ERR_CODE_100);
 80004e6:	2064      	movs	r0, #100	; 0x64
 80004e8:	f7ff ff95 	bl	8000416 <eh_SetMcuError>
}
 80004ec:	e7fa      	b.n	80004e4 <cfgUART1_Init+0x24>
 80004ee:	bf00      	nop
 80004f0:	20000484 	.word	0x20000484
 80004f4:	40013800 	.word	0x40013800

080004f8 <cfgUART2_Init>:
  * @brief UART2 Initialization Function
  * @param None
  * @retval None
  */
static void cfgUART2_Init(void)
{
 80004f8:	b508      	push	{r3, lr}
    huart2.Instance = USART2;
 80004fa:	480b      	ldr	r0, [pc, #44]	; (8000528 <cfgUART2_Init+0x30>)
 80004fc:	4b0b      	ldr	r3, [pc, #44]	; (800052c <cfgUART2_Init+0x34>)
 80004fe:	6003      	str	r3, [r0, #0]
    huart2.Init.BaudRate = 115200;
 8000500:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000504:	6043      	str	r3, [r0, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000506:	2300      	movs	r3, #0
 8000508:	6083      	str	r3, [r0, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 800050a:	60c3      	str	r3, [r0, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800050c:	6103      	str	r3, [r0, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 800050e:	220c      	movs	r2, #12
 8000510:	6142      	str	r2, [r0, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000512:	6183      	str	r3, [r0, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000514:	61c3      	str	r3, [r0, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8000516:	f001 fcf8 	bl	8001f0a <HAL_UART_Init>
 800051a:	b900      	cbnz	r0, 800051e <cfgUART2_Init+0x26>
    {
        eh_SetMcuError(MCU_ERR_CODE_101);
    }
}
 800051c:	bd08      	pop	{r3, pc}
        eh_SetMcuError(MCU_ERR_CODE_101);
 800051e:	2065      	movs	r0, #101	; 0x65
 8000520:	f7ff ff79 	bl	8000416 <eh_SetMcuError>
}
 8000524:	e7fa      	b.n	800051c <cfgUART2_Init+0x24>
 8000526:	bf00      	nop
 8000528:	200004c8 	.word	0x200004c8
 800052c:	40004400 	.word	0x40004400

08000530 <cfgUART_Init>:
{
 8000530:	b508      	push	{r3, lr}
    cfgUART1_Init();
 8000532:	f7ff ffc5 	bl	80004c0 <cfgUART1_Init>
    cfgUART2_Init();
 8000536:	f7ff ffdf 	bl	80004f8 <cfgUART2_Init>
}
 800053a:	bd08      	pop	{r3, pc}

0800053c <_Z41__static_initialization_and_destruction_0ii>:
    /* = Copy polling counters from IBusSensor object = */
    /* Number of polling for sensor existence */
    IBusSensor_cnt_poll = IBusSensor.cnt_poll;
    /* Number of polling for sensor value */
    IBusSensor_cnt_sensor = IBusSensor.cnt_sensor;
}
 800053c:	2801      	cmp	r0, #1
 800053e:	d000      	beq.n	8000542 <_Z41__static_initialization_and_destruction_0ii+0x6>
 8000540:	4770      	bx	lr
 8000542:	b508      	push	{r3, lr}
 8000544:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000548:	4299      	cmp	r1, r3
 800054a:	d000      	beq.n	800054e <_Z41__static_initialization_and_destruction_0ii+0x12>
 800054c:	bd08      	pop	{r3, pc}
static HardwareSerial IBusSensorSerial(PA_10, PA_9);
 800054e:	2209      	movs	r2, #9
 8000550:	210a      	movs	r1, #10
 8000552:	4805      	ldr	r0, [pc, #20]	; (8000568 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000554:	f002 f80a 	bl	800256c <_ZN14HardwareSerialC1E7PinNameS0_>
class HardwareSerial;
  #endif
#endif
class Stream;

class IBusBM {
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800055a:	2200      	movs	r2, #0
 800055c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8000560:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8000564:	e7f2      	b.n	800054c <_Z41__static_initialization_and_destruction_0ii+0x10>
 8000566:	bf00      	nop
 8000568:	20000200 	.word	0x20000200
 800056c:	20000154 	.word	0x20000154

08000570 <ibcomm_Init>:
{
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	b083      	sub	sp, #12
    HardwareSerial(void *peripheral, HalfDuplexMode_t halfDuplex = HALF_DUPLEX_DISABLED);
    HardwareSerial(uint32_t _rxtx);
    HardwareSerial(PinName _rxtx);
    void begin(unsigned long baud)
    {
      begin(baud, SERIAL_8N1);
 8000574:	4d13      	ldr	r5, [pc, #76]	; (80005c4 <ibcomm_Init+0x54>)
 8000576:	2206      	movs	r2, #6
 8000578:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800057c:	4628      	mov	r0, r5
 800057e:	f002 f8a3 	bl	80026c8 <_ZN14HardwareSerial5beginEmh>
    IBusSensor.begin(IBusSensorSerial, TIM1);
 8000582:	4c11      	ldr	r4, [pc, #68]	; (80005c8 <ibcomm_Init+0x58>)
 8000584:	f04f 33ff 	mov.w	r3, #4294967295
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	4a10      	ldr	r2, [pc, #64]	; (80005cc <ibcomm_Init+0x5c>)
 800058c:	4629      	mov	r1, r5
 800058e:	4620      	mov	r0, r4
 8000590:	f000 f9d4 	bl	800093c <_ZN6IBusBM5beginER14HardwareSerialP11TIM_TypeDefaa>
    IBusSensor.addSensor(IBUSS_RPM);
 8000594:	2202      	movs	r2, #2
 8000596:	4611      	mov	r1, r2
 8000598:	4620      	mov	r0, r4
 800059a:	f000 f9a7 	bl	80008ec <_ZN6IBusBM9addSensorEhh>
    IBusSensor.addSensor(IBUSS_TEMP);
 800059e:	2202      	movs	r2, #2
 80005a0:	2101      	movs	r1, #1
 80005a2:	4620      	mov	r0, r4
 80005a4:	f000 f9a2 	bl	80008ec <_ZN6IBusBM9addSensorEhh>
    dbgSensorSpeedVal = 1000;
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <ibcomm_Init+0x60>)
 80005aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005ae:	801a      	strh	r2, [r3, #0]
    dbgSensorTempVal = 25;
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <ibcomm_Init+0x64>)
 80005b2:	2219      	movs	r2, #25
 80005b4:	801a      	strh	r2, [r3, #0]
    IBusSensor_cnt_poll = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <ibcomm_Init+0x68>)
 80005ba:	7013      	strb	r3, [r2, #0]
    IBusSensor_cnt_sensor = 0;
 80005bc:	4a07      	ldr	r2, [pc, #28]	; (80005dc <ibcomm_Init+0x6c>)
 80005be:	7013      	strb	r3, [r2, #0]
}
 80005c0:	b003      	add	sp, #12
 80005c2:	bd30      	pop	{r4, r5, pc}
 80005c4:	20000200 	.word	0x20000200
 80005c8:	20000154 	.word	0x20000154
 80005cc:	40012c00 	.word	0x40012c00
 80005d0:	2000030c 	.word	0x2000030c
 80005d4:	2000030e 	.word	0x2000030e
 80005d8:	200001fc 	.word	0x200001fc
 80005dc:	200001fd 	.word	0x200001fd

080005e0 <ibcomm_MainRunnable>:
{
 80005e0:	b510      	push	{r4, lr}
    IBusSensor.setSensorMeasurement(IBUSS_RPM, dbgSensorSpeedVal);
 80005e2:	4c0c      	ldr	r4, [pc, #48]	; (8000614 <ibcomm_MainRunnable+0x34>)
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <ibcomm_MainRunnable+0x38>)
 80005e6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005ea:	2102      	movs	r1, #2
 80005ec:	4620      	mov	r0, r4
 80005ee:	f000 f99a 	bl	8000926 <_ZN6IBusBM20setSensorMeasurementEhl>
    IBusSensor.setSensorMeasurement(IBUSS_TEMP, dbgSensorTempVal);
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <ibcomm_MainRunnable+0x3c>)
 80005f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005f8:	2101      	movs	r1, #1
 80005fa:	4620      	mov	r0, r4
 80005fc:	f000 f993 	bl	8000926 <_ZN6IBusBM20setSensorMeasurementEhl>
    IBusSensor_cnt_poll = IBusSensor.cnt_poll;
 8000600:	7823      	ldrb	r3, [r4, #0]
 8000602:	b2db      	uxtb	r3, r3
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <ibcomm_MainRunnable+0x40>)
 8000606:	7013      	strb	r3, [r2, #0]
    IBusSensor_cnt_sensor = IBusSensor.cnt_sensor;
 8000608:	7863      	ldrb	r3, [r4, #1]
 800060a:	b2db      	uxtb	r3, r3
 800060c:	4a05      	ldr	r2, [pc, #20]	; (8000624 <ibcomm_MainRunnable+0x44>)
 800060e:	7013      	strb	r3, [r2, #0]
}
 8000610:	bd10      	pop	{r4, pc}
 8000612:	bf00      	nop
 8000614:	20000154 	.word	0x20000154
 8000618:	2000030c 	.word	0x2000030c
 800061c:	2000030e 	.word	0x2000030e
 8000620:	200001fc 	.word	0x200001fc
 8000624:	200001fd 	.word	0x200001fd

08000628 <_GLOBAL__sub_I_IBusSensor>:
 8000628:	b508      	push	{r3, lr}
 800062a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800062e:	2001      	movs	r0, #1
 8000630:	f7ff ff84 	bl	800053c <_Z41__static_initialization_and_destruction_0ii>
 8000634:	bd08      	pop	{r3, pc}
	...

08000638 <_ZN6IBusBM4loopEv>:
  }
  IBusBMfirst = this; 
}

// called from timer interrupt or mannually by user (if IBUSBM_NOTIMER set in begin())
void IBusBM::loop(void) {
 8000638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800063c:	4604      	mov	r4, r0

  // if we have multiple instances of IBusBM, we (recursively) call the other instances loop() function
  if (IBusBMnext) IBusBMnext->loop(); 
 800063e:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
 8000642:	b380      	cbz	r0, 80006a6 <_ZN6IBusBM4loopEv+0x6e>
 8000644:	f7ff fff8 	bl	8000638 <_ZN6IBusBM4loopEv>
 8000648:	e02d      	b.n	80006a6 <_ZN6IBusBM4loopEv+0x6e>
    last = now;
    
    uint8_t v = stream->read();
    switch (state) {
      case GET_LENGTH:
        if (v <= PROTOCOL_LENGTH && v > PROTOCOL_OVERHEAD) {
 800064a:	1f13      	subs	r3, r2, #4
 800064c:	b2db      	uxtb	r3, r3
 800064e:	2b1c      	cmp	r3, #28
 8000650:	d80e      	bhi.n	8000670 <_ZN6IBusBM4loopEv+0x38>
          ptr = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
          len = v - PROTOCOL_OVERHEAD;
 8000658:	1ed3      	subs	r3, r2, #3
 800065a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
          chksum = 0xFFFF - v;
 800065e:	f482 427f 	eor.w	r2, r2, #65280	; 0xff00
 8000662:	f082 02ff 	eor.w	r2, r2, #255	; 0xff
 8000666:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
          state = GET_DATA;
 800066a:	2301      	movs	r3, #1
 800066c:	70e3      	strb	r3, [r4, #3]
 800066e:	e01a      	b.n	80006a6 <_ZN6IBusBM4loopEv+0x6e>
        } else {
          state = DISCARD;
 8000670:	2304      	movs	r3, #4
 8000672:	70e3      	strb	r3, [r4, #3]
 8000674:	e017      	b.n	80006a6 <_ZN6IBusBM4loopEv+0x6e>
        }
        break;

      case GET_DATA:
        buffer[ptr++] = v;
 8000676:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800067a:	1c4b      	adds	r3, r1, #1
 800067c:	b2db      	uxtb	r3, r3
 800067e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8000682:	4421      	add	r1, r4
 8000684:	730a      	strb	r2, [r1, #12]
        chksum -= v;
 8000686:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800068a:	1a8a      	subs	r2, r1, r2
 800068c:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
        if (ptr == len) {
 8000690:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8000694:	4293      	cmp	r3, r2
 8000696:	d106      	bne.n	80006a6 <_ZN6IBusBM4loopEv+0x6e>
          state = GET_CHKSUML;
 8000698:	2302      	movs	r3, #2
 800069a:	70e3      	strb	r3, [r4, #3]
 800069c:	e003      	b.n	80006a6 <_ZN6IBusBM4loopEv+0x6e>
        }
        break;
        
      case GET_CHKSUML:
        lchksum = v;
 800069e:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
        state = GET_CHKSUMH;
 80006a2:	2303      	movs	r3, #3
 80006a4:	70e3      	strb	r3, [r4, #3]
  while (stream->available() > 0) {
 80006a6:	6860      	ldr	r0, [r4, #4]
 80006a8:	6803      	ldr	r3, [r0, #0]
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4798      	blx	r3
 80006ae:	2800      	cmp	r0, #0
 80006b0:	f340 810a 	ble.w	80008c8 <_ZN6IBusBM4loopEv+0x290>
    uint32_t now = millis();
 80006b4:	f002 fbdd 	bl	8002e72 <millis>
    if (now - last >= PROTOCOL_TIMEGAP){
 80006b8:	68a3      	ldr	r3, [r4, #8]
 80006ba:	1ac3      	subs	r3, r0, r3
 80006bc:	2b02      	cmp	r3, #2
 80006be:	d901      	bls.n	80006c4 <_ZN6IBusBM4loopEv+0x8c>
      state = GET_LENGTH;
 80006c0:	2300      	movs	r3, #0
 80006c2:	70e3      	strb	r3, [r4, #3]
    last = now;
 80006c4:	60a0      	str	r0, [r4, #8]
    uint8_t v = stream->read();
 80006c6:	6860      	ldr	r0, [r4, #4]
 80006c8:	6803      	ldr	r3, [r0, #0]
 80006ca:	695b      	ldr	r3, [r3, #20]
 80006cc:	4798      	blx	r3
 80006ce:	b2c2      	uxtb	r2, r0
    switch (state) {
 80006d0:	78e3      	ldrb	r3, [r4, #3]
 80006d2:	2b03      	cmp	r3, #3
 80006d4:	d8e7      	bhi.n	80006a6 <_ZN6IBusBM4loopEv+0x6e>
 80006d6:	a101      	add	r1, pc, #4	; (adr r1, 80006dc <_ZN6IBusBM4loopEv+0xa4>)
 80006d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80006dc:	0800064b 	.word	0x0800064b
 80006e0:	08000677 	.word	0x08000677
 80006e4:	0800069f 	.word	0x0800069f
 80006e8:	080006ed 	.word	0x080006ed
        break;

      case GET_CHKSUMH:
        // Validate checksum
        if (chksum == (v << 8) + lchksum) {
 80006ec:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 80006f0:	0200      	lsls	r0, r0, #8
 80006f2:	b280      	uxth	r0, r0
 80006f4:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 80006f8:	4410      	add	r0, r2
 80006fa:	4283      	cmp	r3, r0
 80006fc:	d002      	beq.n	8000704 <_ZN6IBusBM4loopEv+0xcc>
              stream->write(chksum & 0x0ff);
              stream->write(chksum >> 8);              
            }
          }
        }
        state = DISCARD;
 80006fe:	2304      	movs	r3, #4
 8000700:	70e3      	strb	r3, [r4, #3]
        break;
 8000702:	e7d0      	b.n	80006a6 <_ZN6IBusBM4loopEv+0x6e>
          uint8_t adr = buffer[0] & 0x0f;
 8000704:	7b23      	ldrb	r3, [r4, #12]
 8000706:	f003 050f 	and.w	r5, r3, #15
          if (buffer[0]==PROTOCOL_COMMAND40) {
 800070a:	2b40      	cmp	r3, #64	; 0x40
 800070c:	d044      	beq.n	8000798 <_ZN6IBusBM4loopEv+0x160>
          } else if (adr<=NumberSensors && adr>0 && len==1) {
 800070e:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
 8000712:	42aa      	cmp	r2, r5
 8000714:	d3f3      	bcc.n	80006fe <_ZN6IBusBM4loopEv+0xc6>
 8000716:	2d00      	cmp	r5, #0
 8000718:	d0f1      	beq.n	80006fe <_ZN6IBusBM4loopEv+0xc6>
 800071a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800071e:	2a01      	cmp	r2, #1
 8000720:	d1ed      	bne.n	80006fe <_ZN6IBusBM4loopEv+0xc6>
           sensorinfo *s = &sensors[adr-1];
 8000722:	1e6e      	subs	r6, r5, #1
  return (UINT32_MAX / (SystemCoreClock / 1000000));
};

static inline uint32_t dwt_getCycles(void)
{
  return (DWT->CYCCNT);
 8000724:	4a69      	ldr	r2, [pc, #420]	; (80008cc <_ZN6IBusBM4loopEv+0x294>)
 8000726:	6850      	ldr	r0, [r2, #4]
static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t us)
{
#if defined(DWT_BASE) && !defined(DWT_DELAY_DISABLED)
  int32_t start  = dwt_getCycles();
  int32_t cycles = us * (SystemCoreClock / 1000000);
 8000728:	4a69      	ldr	r2, [pc, #420]	; (80008d0 <_ZN6IBusBM4loopEv+0x298>)
 800072a:	6812      	ldr	r2, [r2, #0]
 800072c:	4969      	ldr	r1, [pc, #420]	; (80008d4 <_ZN6IBusBM4loopEv+0x29c>)
 800072e:	fba1 1202 	umull	r1, r2, r1, r2
 8000732:	0c92      	lsrs	r2, r2, #18
 8000734:	2164      	movs	r1, #100	; 0x64
 8000736:	fb01 f102 	mul.w	r1, r1, r2
 800073a:	4a64      	ldr	r2, [pc, #400]	; (80008cc <_ZN6IBusBM4loopEv+0x294>)
 800073c:	6852      	ldr	r2, [r2, #4]

  while ((int32_t)dwt_getCycles() - start < cycles);
 800073e:	1a12      	subs	r2, r2, r0
 8000740:	4291      	cmp	r1, r2
 8000742:	dcfa      	bgt.n	800073a <_ZN6IBusBM4loopEv+0x102>
            switch (buffer[0] & 0x0f0) {
 8000744:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000748:	2b90      	cmp	r3, #144	; 0x90
 800074a:	d03c      	beq.n	80007c6 <_ZN6IBusBM4loopEv+0x18e>
 800074c:	2ba0      	cmp	r3, #160	; 0xa0
 800074e:	d061      	beq.n	8000814 <_ZN6IBusBM4loopEv+0x1dc>
 8000750:	2b80      	cmp	r3, #128	; 0x80
 8000752:	d1d4      	bne.n	80006fe <_ZN6IBusBM4loopEv+0xc6>
                cnt_poll++;  
 8000754:	7823      	ldrb	r3, [r4, #0]
 8000756:	3301      	adds	r3, #1
 8000758:	b2db      	uxtb	r3, r3
 800075a:	7023      	strb	r3, [r4, #0]
                stream->write(0x04);
 800075c:	6860      	ldr	r0, [r4, #4]
    {
      return write((uint8_t)n);
    }
    inline size_t write(int n)
    {
      return write((uint8_t)n);
 800075e:	6803      	ldr	r3, [r0, #0]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2104      	movs	r1, #4
 8000764:	4798      	blx	r3
                stream->write(PROTOCOL_COMMAND_DISCOVER + adr);
 8000766:	6860      	ldr	r0, [r4, #4]
 8000768:	6803      	ldr	r3, [r0, #0]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 8000770:	4798      	blx	r3
                chksum = 0xFFFF - (0x04 + PROTOCOL_COMMAND_DISCOVER + adr);
 8000772:	f5c5 457f 	rsb	r5, r5, #65280	; 0xff00
 8000776:	357b      	adds	r5, #123	; 0x7b
 8000778:	f8a4 504a 	strh.w	r5, [r4, #74]	; 0x4a
              stream->write(chksum & 0x0ff);
 800077c:	6860      	ldr	r0, [r4, #4]
 800077e:	6803      	ldr	r3, [r0, #0]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f894 104a 	ldrb.w	r1, [r4, #74]	; 0x4a
 8000786:	4798      	blx	r3
              stream->write(chksum >> 8);              
 8000788:	6860      	ldr	r0, [r4, #4]
 800078a:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800078e:	6803      	ldr	r3, [r0, #0]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	0a09      	lsrs	r1, r1, #8
 8000794:	4798      	blx	r3
 8000796:	e7b2      	b.n	80006fe <_ZN6IBusBM4loopEv+0xc6>
            for (uint8_t i = 1; i < PROTOCOL_CHANNELS * 2 + 1; i += 2) {
 8000798:	2301      	movs	r3, #1
 800079a:	2b1c      	cmp	r3, #28
 800079c:	d80e      	bhi.n	80007bc <_ZN6IBusBM4loopEv+0x184>
              channel[i / 2] = buffer[i] | (buffer[i + 1] << 8);
 800079e:	18e2      	adds	r2, r4, r3
 80007a0:	7b11      	ldrb	r1, [r2, #12]
 80007a2:	1c5a      	adds	r2, r3, #1
 80007a4:	4422      	add	r2, r4
 80007a6:	7b10      	ldrb	r0, [r2, #12]
 80007a8:	085a      	lsrs	r2, r3, #1
 80007aa:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80007ae:	3214      	adds	r2, #20
 80007b0:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80007b4:	80d1      	strh	r1, [r2, #6]
            for (uint8_t i = 1; i < PROTOCOL_CHANNELS * 2 + 1; i += 2) {
 80007b6:	3302      	adds	r3, #2
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	e7ee      	b.n	800079a <_ZN6IBusBM4loopEv+0x162>
            cnt_rec++;
 80007bc:	78a3      	ldrb	r3, [r4, #2]
 80007be:	3301      	adds	r3, #1
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	70a3      	strb	r3, [r4, #2]
 80007c4:	e79b      	b.n	80006fe <_ZN6IBusBM4loopEv+0xc6>
                stream->write(0x06);
 80007c6:	6860      	ldr	r0, [r4, #4]
 80007c8:	6803      	ldr	r3, [r0, #0]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2106      	movs	r1, #6
 80007ce:	4798      	blx	r3
                stream->write(PROTOCOL_COMMAND_TYPE + adr);
 80007d0:	6860      	ldr	r0, [r4, #4]
 80007d2:	6803      	ldr	r3, [r0, #0]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f1a5 0170 	sub.w	r1, r5, #112	; 0x70
 80007da:	b2c9      	uxtb	r1, r1
 80007dc:	4798      	blx	r3
                stream->write(s->sensorType);
 80007de:	6860      	ldr	r0, [r4, #4]
 80007e0:	6803      	ldr	r3, [r0, #0]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	360a      	adds	r6, #10
 80007e6:	f814 1036 	ldrb.w	r1, [r4, r6, lsl #3]
 80007ea:	4798      	blx	r3
                stream->write(s->sensorLength);
 80007ec:	6860      	ldr	r0, [r4, #4]
 80007ee:	6803      	ldr	r3, [r0, #0]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	eb04 07c6 	add.w	r7, r4, r6, lsl #3
 80007f6:	7879      	ldrb	r1, [r7, #1]
 80007f8:	4798      	blx	r3
                chksum = 0xFFFF - (0x06 + PROTOCOL_COMMAND_TYPE + adr + s->sensorType + s->sensorLength);
 80007fa:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
 80007fe:	442b      	add	r3, r5
 8000800:	787a      	ldrb	r2, [r7, #1]
 8000802:	4413      	add	r3, r2
 8000804:	3396      	adds	r3, #150	; 0x96
 8000806:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 800080a:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 800080e:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
                break;
 8000812:	e7b3      	b.n	800077c <_ZN6IBusBM4loopEv+0x144>
                cnt_sensor++;
 8000814:	7863      	ldrb	r3, [r4, #1]
 8000816:	3301      	adds	r3, #1
 8000818:	b2db      	uxtb	r3, r3
 800081a:	7063      	strb	r3, [r4, #1]
                stream->write(t = 0x04 + s->sensorLength);
 800081c:	6860      	ldr	r0, [r4, #4]
 800081e:	6803      	ldr	r3, [r0, #0]
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	f106 080a 	add.w	r8, r6, #10
 8000826:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
 800082a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800082e:	3304      	adds	r3, #4
 8000830:	b2df      	uxtb	r7, r3
 8000832:	4639      	mov	r1, r7
 8000834:	4790      	blx	r2
                chksum = 0xFFFF - t;
 8000836:	f487 437f 	eor.w	r3, r7, #65280	; 0xff00
 800083a:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 800083e:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
                stream->write(t = PROTOCOL_COMMAND_VALUE + adr);
 8000842:	6860      	ldr	r0, [r4, #4]
 8000844:	6803      	ldr	r3, [r0, #0]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	3d60      	subs	r5, #96	; 0x60
 800084a:	b2ed      	uxtb	r5, r5
 800084c:	4629      	mov	r1, r5
 800084e:	4798      	blx	r3
                chksum -= t;
 8000850:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8000854:	1b5d      	subs	r5, r3, r5
 8000856:	f8a4 504a 	strh.w	r5, [r4, #74]	; 0x4a
                stream->write(t = s->sensorValue & 0x0ff);
 800085a:	6860      	ldr	r0, [r4, #4]
 800085c:	6803      	ldr	r3, [r0, #0]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f898 5004 	ldrb.w	r5, [r8, #4]
 8000864:	4629      	mov	r1, r5
 8000866:	4798      	blx	r3
                chksum -= t;
 8000868:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 800086c:	1b5b      	subs	r3, r3, r5
 800086e:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
                stream->write(t = (s->sensorValue >> 8) & 0x0ff); 
 8000872:	6860      	ldr	r0, [r4, #4]
 8000874:	6803      	ldr	r3, [r0, #0]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f898 5005 	ldrb.w	r5, [r8, #5]
 800087c:	4629      	mov	r1, r5
 800087e:	4798      	blx	r3
                chksum -= t;
 8000880:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8000884:	1b5b      	subs	r3, r3, r5
 8000886:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
                if (s->sensorLength==4) {
 800088a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800088e:	2b04      	cmp	r3, #4
 8000890:	f47f af74 	bne.w	800077c <_ZN6IBusBM4loopEv+0x144>
                  stream->write(t = (s->sensorValue >> 16) & 0x0ff); 
 8000894:	6860      	ldr	r0, [r4, #4]
 8000896:	6803      	ldr	r3, [r0, #0]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f9b8 6006 	ldrsh.w	r6, [r8, #6]
 800089e:	b2f6      	uxtb	r6, r6
 80008a0:	4631      	mov	r1, r6
 80008a2:	4798      	blx	r3
                  chksum -= t;
 80008a4:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 80008a8:	1b9e      	subs	r6, r3, r6
 80008aa:	f8a4 604a 	strh.w	r6, [r4, #74]	; 0x4a
                  stream->write(t = (s->sensorValue >> 24) & 0x0ff); 
 80008ae:	6860      	ldr	r0, [r4, #4]
 80008b0:	6803      	ldr	r3, [r0, #0]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f898 5007 	ldrb.w	r5, [r8, #7]
 80008b8:	4629      	mov	r1, r5
 80008ba:	4798      	blx	r3
                  chksum -= t;                  
 80008bc:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 80008c0:	1b5b      	subs	r3, r3, r5
 80008c2:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 80008c6:	e759      	b.n	800077c <_ZN6IBusBM4loopEv+0x144>
      case DISCARD:
      default:
        break;
    }
  }
}
 80008c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008cc:	e0001000 	.word	0xe0001000
 80008d0:	20000000 	.word	0x20000000
 80008d4:	431bde83 	.word	0x431bde83

080008d8 <_Z7onTimerv>:
void  onTimer() {
 80008d8:	b508      	push	{r3, lr}
  if (IBusBMfirst) IBusBMfirst->loop();  // gets new servo values if available and process any sensor data
 80008da:	4b03      	ldr	r3, [pc, #12]	; (80008e8 <_Z7onTimerv+0x10>)
 80008dc:	6818      	ldr	r0, [r3, #0]
 80008de:	b108      	cbz	r0, 80008e4 <_Z7onTimerv+0xc>
 80008e0:	f7ff feaa 	bl	8000638 <_ZN6IBusBM4loopEv>
}
 80008e4:	bd08      	pop	{r3, pc}
 80008e6:	bf00      	nop
 80008e8:	20000310 	.word	0x20000310

080008ec <_ZN6IBusBM9addSensorEhh>:
  }
}

uint8_t IBusBM::addSensor(uint8_t type, uint8_t len) {
  // add a sensor, return sensor number
  if (len!=2 && len!=4) len = 2;
 80008ec:	2a02      	cmp	r2, #2
 80008ee:	d002      	beq.n	80008f6 <_ZN6IBusBM9addSensorEhh+0xa>
 80008f0:	2a04      	cmp	r2, #4
 80008f2:	d000      	beq.n	80008f6 <_ZN6IBusBM9addSensorEhh+0xa>
 80008f4:	2202      	movs	r2, #2
  if (NumberSensors < SENSORMAX) {
 80008f6:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80008fa:	2b09      	cmp	r3, #9
 80008fc:	d810      	bhi.n	8000920 <_ZN6IBusBM9addSensorEhh+0x34>
uint8_t IBusBM::addSensor(uint8_t type, uint8_t len) {
 80008fe:	b410      	push	{r4}
    sensorinfo *s = &sensors[NumberSensors];
    s->sensorType = type;
 8000900:	f103 040a 	add.w	r4, r3, #10
 8000904:	f800 1034 	strb.w	r1, [r0, r4, lsl #3]
    s->sensorLength = len;
 8000908:	eb00 01c4 	add.w	r1, r0, r4, lsl #3
 800090c:	704a      	strb	r2, [r1, #1]
    s->sensorValue = 0;
 800090e:	2200      	movs	r2, #0
 8000910:	604a      	str	r2, [r1, #4]
    NumberSensors++;
 8000912:	3301      	adds	r3, #1
 8000914:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  }
  return NumberSensors;
}
 8000918:	f890 00a0 	ldrb.w	r0, [r0, #160]	; 0xa0
 800091c:	bc10      	pop	{r4}
 800091e:	4770      	bx	lr
 8000920:	f890 00a0 	ldrb.w	r0, [r0, #160]	; 0xa0
 8000924:	4770      	bx	lr

08000926 <_ZN6IBusBM20setSensorMeasurementEhl>:

void IBusBM::setSensorMeasurement(uint8_t adr, int32_t value) {
   if (adr<=NumberSensors && adr>0)
 8000926:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800092a:	428b      	cmp	r3, r1
 800092c:	d304      	bcc.n	8000938 <_ZN6IBusBM20setSensorMeasurementEhl+0x12>
 800092e:	b119      	cbz	r1, 8000938 <_ZN6IBusBM20setSensorMeasurementEhl+0x12>
     sensors[adr-1].sensorValue = value;
 8000930:	3109      	adds	r1, #9
 8000932:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8000936:	604a      	str	r2, [r1, #4]
}
 8000938:	4770      	bx	lr
	...

0800093c <_ZN6IBusBM5beginER14HardwareSerialP11TIM_TypeDefaa>:
void IBusBM::begin(HardwareSerial &serial, TIM_TypeDef * timerid, int8_t rxPin, int8_t txPin) {
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	4604      	mov	r4, r0
 8000942:	460d      	mov	r5, r1
 8000944:	4616      	mov	r6, r2
    serial.begin(115200, SERIAL_8N1);
 8000946:	2206      	movs	r2, #6
 8000948:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800094c:	4628      	mov	r0, r5
 800094e:	f001 febb 	bl	80026c8 <_ZN14HardwareSerial5beginEmh>
  this->stream = &serial;
 8000952:	6065      	str	r5, [r4, #4]
  this->state = DISCARD;
 8000954:	2304      	movs	r3, #4
 8000956:	70e3      	strb	r3, [r4, #3]
  this->last = millis();
 8000958:	f002 fa8b 	bl	8002e72 <millis>
 800095c:	60a0      	str	r0, [r4, #8]
  this->ptr = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  this->len = 0;
 8000964:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
  this->chksum = 0;
 8000968:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
  this->lchksum = 0;
 800096c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  this->IBusBMnext = IBusBMfirst;
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <_ZN6IBusBM5beginER14HardwareSerialP11TIM_TypeDefaa+0x88>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
  if (!IBusBMfirst && timerid != IBUSBM_NOTIMER) {
 8000978:	b11b      	cbz	r3, 8000982 <_ZN6IBusBM5beginER14HardwareSerialP11TIM_TypeDefaa+0x46>
  IBusBMfirst = this; 
 800097a:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <_ZN6IBusBM5beginER14HardwareSerialP11TIM_TypeDefaa+0x88>)
 800097c:	601c      	str	r4, [r3, #0]
}
 800097e:	b004      	add	sp, #16
 8000980:	bd70      	pop	{r4, r5, r6, pc}
  if (!IBusBMfirst && timerid != IBUSBM_NOTIMER) {
 8000982:	2e00      	cmp	r6, #0
 8000984:	d0f9      	beq.n	800097a <_ZN6IBusBM5beginER14HardwareSerialP11TIM_TypeDefaa+0x3e>
        HardwareTimer *stimer_t = new HardwareTimer(timerid);
 8000986:	20b0      	movs	r0, #176	; 0xb0
 8000988:	f003 fa3a 	bl	8003e00 <_Znwj>
 800098c:	4605      	mov	r5, r0
 800098e:	4631      	mov	r1, r6
 8000990:	f002 f8ce 	bl	8002b30 <_ZN13HardwareTimerC1EP11TIM_TypeDef>
        stimer_t->setOverflow(1000, HERTZ_FORMAT); // 1000 Hz
 8000994:	2202      	movs	r2, #2
 8000996:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800099a:	4628      	mov	r0, r5
 800099c:	f002 f912 	bl	8002bc4 <_ZN13HardwareTimer11setOverflowEm13TimerFormat_t>
        stimer_t->attachInterrupt(onTimer);
 80009a0:	4909      	ldr	r1, [pc, #36]	; (80009c8 <_ZN6IBusBM5beginER14HardwareSerialP11TIM_TypeDefaa+0x8c>)
 80009a2:	4668      	mov	r0, sp
 80009a4:	f7ff fcf4 	bl	8000390 <_ZNSt8functionIFvvEEC1IPS0_vvEET_>
 80009a8:	4669      	mov	r1, sp
 80009aa:	4628      	mov	r0, r5
 80009ac:	f002 f975 	bl	8002c9a <_ZN13HardwareTimer15attachInterruptESt8functionIFvvEE>
      if (_M_manager)
 80009b0:	9b02      	ldr	r3, [sp, #8]
 80009b2:	b11b      	cbz	r3, 80009bc <_ZN6IBusBM5beginER14HardwareSerialP11TIM_TypeDefaa+0x80>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80009b4:	2203      	movs	r2, #3
 80009b6:	4669      	mov	r1, sp
 80009b8:	4668      	mov	r0, sp
 80009ba:	4798      	blx	r3
        stimer_t->resume();
 80009bc:	4628      	mov	r0, r5
 80009be:	f001 ffef 	bl	80029a0 <_ZN13HardwareTimer6resumeEv>
 80009c2:	e7da      	b.n	800097a <_ZN6IBusBM5beginER14HardwareSerialP11TIM_TypeDefaa+0x3e>
 80009c4:	20000310 	.word	0x20000310
 80009c8:	080008d9 	.word	0x080008d9

080009cc <Error_Handler>:
 80009cc:	b672      	cpsid	i
  */
void Error_Handler(void)
{
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ce:	e7fe      	b.n	80009ce <Error_Handler+0x2>

080009d0 <_ZL18SystemClock_Configv>:
{
 80009d0:	b500      	push	{lr}
 80009d2:	b091      	sub	sp, #68	; 0x44
    RCC_OscInitTypeDef RCC_OscInitStruct = {0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u};
 80009d4:	2300      	movs	r3, #0
 80009d6:	9309      	str	r3, [sp, #36]	; 0x24
 80009d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80009da:	930c      	str	r3, [sp, #48]	; 0x30
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0u, 0u, 0u, 0u, 0u};
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	9302      	str	r3, [sp, #8]
 80009e0:	9303      	str	r3, [sp, #12]
 80009e2:	9304      	str	r3, [sp, #16]
 80009e4:	9305      	str	r3, [sp, #20]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009e6:	2101      	movs	r1, #1
 80009e8:	9106      	str	r1, [sp, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009ee:	9207      	str	r2, [sp, #28]
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009f0:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f2:	910a      	str	r1, [sp, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f4:	2302      	movs	r3, #2
 80009f6:	930d      	str	r3, [sp, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f8:	920e      	str	r2, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80009fa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80009fe:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a00:	a806      	add	r0, sp, #24
 8000a02:	f000 faed 	bl	8000fe0 <HAL_RCC_OscConfig>
 8000a06:	b988      	cbnz	r0, 8000a2c <_ZL18SystemClock_Configv+0x5c>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a08:	230f      	movs	r3, #15
 8000a0a:	9301      	str	r3, [sp, #4]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	9302      	str	r3, [sp, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	9303      	str	r3, [sp, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a14:	9304      	str	r3, [sp, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a16:	9305      	str	r3, [sp, #20]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a18:	2101      	movs	r1, #1
 8000a1a:	a801      	add	r0, sp, #4
 8000a1c:	f000 fd24 	bl	8001468 <HAL_RCC_ClockConfig>
 8000a20:	b930      	cbnz	r0, 8000a30 <_ZL18SystemClock_Configv+0x60>
    HAL_RCC_EnableCSS();
 8000a22:	f000 fce5 	bl	80013f0 <HAL_RCC_EnableCSS>
}
 8000a26:	b011      	add	sp, #68	; 0x44
 8000a28:	f85d fb04 	ldr.w	pc, [sp], #4
      Error_Handler();
 8000a2c:	f7ff ffce 	bl	80009cc <Error_Handler>
      Error_Handler();
 8000a30:	f7ff ffcc 	bl	80009cc <Error_Handler>

08000a34 <main>:
{
 8000a34:	b508      	push	{r3, lr}
  SystemClock_Config();
 8000a36:	f7ff ffcb 	bl	80009d0 <_ZL18SystemClock_Configv>
  tsl_Init();
 8000a3a:	f7ff fc4f 	bl	80002dc <tsl_Init>
    tsl_SchedulerRun();
 8000a3e:	f7ff fc5b 	bl	80002f8 <tsl_SchedulerRun>
  while (1)
 8000a42:	e7fc      	b.n	8000a3e <main+0xa>

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000a46:	f000 fe0b 	bl	8001660 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <NMI_Handler+0x6>

08000a4c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <HardFault_Handler>

08000a4e <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <MemManage_Handler>

08000a50 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <BusFault_Handler>

08000a52 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <UsageFault_Handler>

08000a54 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a54:	4770      	bx	lr

08000a56 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a56:	4770      	bx	lr

08000a58 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a58:	4770      	bx	lr

08000a5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5c:	f000 f884 	bl	8000b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a60:	bd08      	pop	{r3, pc}

08000a62 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000a62:	2001      	movs	r0, #1
 8000a64:	4770      	bx	lr

08000a66 <_kill>:

int _kill(int pid, int sig)
{
 8000a66:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000a68:	f003 f9ee 	bl	8003e48 <__errno>
 8000a6c:	2316      	movs	r3, #22
 8000a6e:	6003      	str	r3, [r0, #0]
	return -1;
}
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	bd08      	pop	{r3, pc}

08000a76 <_exit>:

void _exit (int status)
{
 8000a76:	b508      	push	{r3, lr}
	_kill(status, -1);
 8000a78:	f04f 31ff 	mov.w	r1, #4294967295
 8000a7c:	f7ff fff3 	bl	8000a66 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a80:	e7fe      	b.n	8000a80 <_exit+0xa>
	...

08000a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a84:	b510      	push	{r4, lr}
 8000a86:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a88:	4a0c      	ldr	r2, [pc, #48]	; (8000abc <_sbrk+0x38>)
 8000a8a:	490d      	ldr	r1, [pc, #52]	; (8000ac0 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a8c:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <_sbrk+0x40>)
 8000a8e:	6800      	ldr	r0, [r0, #0]
 8000a90:	b140      	cbz	r0, 8000aa4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a92:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <_sbrk+0x40>)
 8000a94:	6800      	ldr	r0, [r0, #0]
 8000a96:	4403      	add	r3, r0
 8000a98:	1a52      	subs	r2, r2, r1
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d806      	bhi.n	8000aac <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000a9e:	4a09      	ldr	r2, [pc, #36]	; (8000ac4 <_sbrk+0x40>)
 8000aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000aa2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000aa4:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <_sbrk+0x40>)
 8000aa6:	4c08      	ldr	r4, [pc, #32]	; (8000ac8 <_sbrk+0x44>)
 8000aa8:	6004      	str	r4, [r0, #0]
 8000aaa:	e7f2      	b.n	8000a92 <_sbrk+0xe>
    errno = ENOMEM;
 8000aac:	f003 f9cc 	bl	8003e48 <__errno>
 8000ab0:	230c      	movs	r3, #12
 8000ab2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab8:	e7f3      	b.n	8000aa2 <_sbrk+0x1e>
 8000aba:	bf00      	nop
 8000abc:	20005000 	.word	0x20005000
 8000ac0:	00000400 	.word	0x00000400
 8000ac4:	20000314 	.word	0x20000314
 8000ac8:	20000520 	.word	0x20000520

08000acc <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000acc:	4770      	bx	lr
	...

08000ad0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad0:	480c      	ldr	r0, [pc, #48]	; (8000b04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ad2:	490d      	ldr	r1, [pc, #52]	; (8000b08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	; (8000b0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad8:	e002      	b.n	8000ae0 <LoopCopyDataInit>

08000ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ade:	3304      	adds	r3, #4

08000ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae4:	d3f9      	bcc.n	8000ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ae8:	4c0a      	ldr	r4, [pc, #40]	; (8000b14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aec:	e001      	b.n	8000af2 <LoopFillZerobss>

08000aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af0:	3204      	adds	r2, #4

08000af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af4:	d3fb      	bcc.n	8000aee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000af6:	f7ff ffe9 	bl	8000acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000afa:	f003 f9ab 	bl	8003e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000afe:	f7ff ff99 	bl	8000a34 <main>
  bx lr
 8000b02:	4770      	bx	lr
  ldr r0, =_sdata
 8000b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b08:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b0c:	08004364 	.word	0x08004364
  ldr r2, =_sbss
 8000b10:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b14:	20000520 	.word	0x20000520

08000b18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC1_2_IRQHandler>
	...

08000b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b1c:	b510      	push	{r4, lr}
 8000b1e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b20:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <HAL_InitTick+0x40>)
 8000b22:	7818      	ldrb	r0, [r3, #0]
 8000b24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b28:	fbb3 f3f0 	udiv	r3, r3, r0
 8000b2c:	4a0c      	ldr	r2, [pc, #48]	; (8000b60 <HAL_InitTick+0x44>)
 8000b2e:	6810      	ldr	r0, [r2, #0]
 8000b30:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b34:	f000 f87e 	bl	8000c34 <HAL_SYSTICK_Config>
 8000b38:	b968      	cbnz	r0, 8000b56 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3a:	2c0f      	cmp	r4, #15
 8000b3c:	d901      	bls.n	8000b42 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000b3e:	2001      	movs	r0, #1
 8000b40:	e00a      	b.n	8000b58 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b42:	2200      	movs	r2, #0
 8000b44:	4621      	mov	r1, r4
 8000b46:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4a:	f000 f81f 	bl	8000b8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <HAL_InitTick+0x48>)
 8000b50:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000b52:	2000      	movs	r0, #0
 8000b54:	e000      	b.n	8000b58 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000b56:	2001      	movs	r0, #1
}
 8000b58:	bd10      	pop	{r4, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000004 	.word	0x20000004
 8000b60:	20000000 	.word	0x20000000
 8000b64:	20000008 	.word	0x20000008

08000b68 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b68:	4a03      	ldr	r2, [pc, #12]	; (8000b78 <HAL_IncTick+0x10>)
 8000b6a:	6811      	ldr	r1, [r2, #0]
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <HAL_IncTick+0x14>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	440b      	add	r3, r1
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	2000050c 	.word	0x2000050c
 8000b7c:	20000004 	.word	0x20000004

08000b80 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b80:	4b01      	ldr	r3, [pc, #4]	; (8000b88 <HAL_GetTick+0x8>)
 8000b82:	6818      	ldr	r0, [r3, #0]
}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	2000050c 	.word	0x2000050c

08000b8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b8c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b8e:	4b17      	ldr	r3, [pc, #92]	; (8000bec <HAL_NVIC_SetPriority+0x60>)
 8000b90:	68db      	ldr	r3, [r3, #12]
 8000b92:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b96:	f1c3 0407 	rsb	r4, r3, #7
 8000b9a:	2c04      	cmp	r4, #4
 8000b9c:	bf28      	it	cs
 8000b9e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba0:	1d1d      	adds	r5, r3, #4
 8000ba2:	2d06      	cmp	r5, #6
 8000ba4:	d918      	bls.n	8000bd8 <HAL_NVIC_SetPriority+0x4c>
 8000ba6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	f04f 35ff 	mov.w	r5, #4294967295
 8000bac:	fa05 f404 	lsl.w	r4, r5, r4
 8000bb0:	ea21 0104 	bic.w	r1, r1, r4
 8000bb4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb6:	fa05 f303 	lsl.w	r3, r5, r3
 8000bba:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbe:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000bc0:	2800      	cmp	r0, #0
 8000bc2:	db0b      	blt.n	8000bdc <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc4:	0109      	lsls	r1, r1, #4
 8000bc6:	b2c9      	uxtb	r1, r1
 8000bc8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000bcc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000bd0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000bd4:	bc30      	pop	{r4, r5}
 8000bd6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd8:	2300      	movs	r3, #0
 8000bda:	e7e5      	b.n	8000ba8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bdc:	f000 000f 	and.w	r0, r0, #15
 8000be0:	0109      	lsls	r1, r1, #4
 8000be2:	b2c9      	uxtb	r1, r1
 8000be4:	4b02      	ldr	r3, [pc, #8]	; (8000bf0 <HAL_NVIC_SetPriority+0x64>)
 8000be6:	5419      	strb	r1, [r3, r0]
 8000be8:	e7f4      	b.n	8000bd4 <HAL_NVIC_SetPriority+0x48>
 8000bea:	bf00      	nop
 8000bec:	e000ed00 	.word	0xe000ed00
 8000bf0:	e000ed14 	.word	0xe000ed14

08000bf4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000bf4:	2800      	cmp	r0, #0
 8000bf6:	db07      	blt.n	8000c08 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf8:	f000 021f 	and.w	r2, r0, #31
 8000bfc:	0940      	lsrs	r0, r0, #5
 8000bfe:	2301      	movs	r3, #1
 8000c00:	4093      	lsls	r3, r2
 8000c02:	4a02      	ldr	r2, [pc, #8]	; (8000c0c <HAL_NVIC_EnableIRQ+0x18>)
 8000c04:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000e100 	.word	0xe000e100

08000c10 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000c10:	2800      	cmp	r0, #0
 8000c12:	db0c      	blt.n	8000c2e <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c14:	f000 021f 	and.w	r2, r0, #31
 8000c18:	0940      	lsrs	r0, r0, #5
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	4093      	lsls	r3, r2
 8000c1e:	3020      	adds	r0, #32
 8000c20:	4a03      	ldr	r2, [pc, #12]	; (8000c30 <HAL_NVIC_DisableIRQ+0x20>)
 8000c22:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c26:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c2a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8000c2e:	4770      	bx	lr
 8000c30:	e000e100 	.word	0xe000e100

08000c34 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c34:	3801      	subs	r0, #1
 8000c36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c3a:	d20a      	bcs.n	8000c52 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_SYSTICK_Config+0x24>)
 8000c3e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c40:	4a06      	ldr	r2, [pc, #24]	; (8000c5c <HAL_SYSTICK_Config+0x28>)
 8000c42:	21f0      	movs	r1, #240	; 0xf0
 8000c44:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c48:	2000      	movs	r0, #0
 8000c4a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c4c:	2207      	movs	r2, #7
 8000c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c50:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c52:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000e010 	.word	0xe000e010
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000c60:	2800      	cmp	r0, #0
 8000c62:	db08      	blt.n	8000c76 <HAL_NVIC_ClearPendingIRQ+0x16>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c64:	f000 021f 	and.w	r2, r0, #31
 8000c68:	0940      	lsrs	r0, r0, #5
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	4093      	lsls	r3, r2
 8000c6e:	3060      	adds	r0, #96	; 0x60
 8000c70:	4a01      	ldr	r2, [pc, #4]	; (8000c78 <HAL_NVIC_ClearPendingIRQ+0x18>)
 8000c72:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8000c76:	4770      	bx	lr
 8000c78:	e000e100 	.word	0xe000e100

08000c7c <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c7c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d006      	beq.n	8000c92 <HAL_DMA_Abort+0x16>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c84:	2304      	movs	r3, #4
 8000c86:	6383      	str	r3, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f880 3020 	strb.w	r3, [r0, #32]
    
    return HAL_ERROR;
 8000c8e:	2001      	movs	r0, #1
 8000c90:	4770      	bx	lr
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c92:	6802      	ldr	r2, [r0, #0]
 8000c94:	6813      	ldr	r3, [r2, #0]
 8000c96:	f023 030e 	bic.w	r3, r3, #14
 8000c9a:	6013      	str	r3, [r2, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c9c:	6802      	ldr	r2, [r0, #0]
 8000c9e:	6813      	ldr	r3, [r2, #0]
 8000ca0:	f023 0301 	bic.w	r3, r3, #1
 8000ca4:	6013      	str	r3, [r2, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ca6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000ca8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000caa:	2201      	movs	r2, #1
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	604b      	str	r3, [r1, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000cb2:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f880 3020 	strb.w	r3, [r0, #32]
  
  return status; 
 8000cbc:	4618      	mov	r0, r3
}
 8000cbe:	4770      	bx	lr

08000cc0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000cc0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cc2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d003      	beq.n	8000cd2 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cca:	2304      	movs	r3, #4
 8000ccc:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000cce:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8000cd0:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cd2:	6802      	ldr	r2, [r0, #0]
 8000cd4:	6813      	ldr	r3, [r2, #0]
 8000cd6:	f023 030e 	bic.w	r3, r3, #14
 8000cda:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000cdc:	6802      	ldr	r2, [r0, #0]
 8000cde:	6813      	ldr	r3, [r2, #0]
 8000ce0:	f023 0301 	bic.w	r3, r3, #1
 8000ce4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ce6:	6803      	ldr	r3, [r0, #0]
 8000ce8:	4a19      	ldr	r2, [pc, #100]	; (8000d50 <HAL_DMA_Abort_IT+0x90>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d014      	beq.n	8000d18 <HAL_DMA_Abort_IT+0x58>
 8000cee:	3214      	adds	r2, #20
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d01f      	beq.n	8000d34 <HAL_DMA_Abort_IT+0x74>
 8000cf4:	3214      	adds	r2, #20
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d01e      	beq.n	8000d38 <HAL_DMA_Abort_IT+0x78>
 8000cfa:	3214      	adds	r2, #20
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d01e      	beq.n	8000d3e <HAL_DMA_Abort_IT+0x7e>
 8000d00:	3214      	adds	r2, #20
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d01e      	beq.n	8000d44 <HAL_DMA_Abort_IT+0x84>
 8000d06:	3214      	adds	r2, #20
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d002      	beq.n	8000d12 <HAL_DMA_Abort_IT+0x52>
 8000d0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d10:	e003      	b.n	8000d1a <HAL_DMA_Abort_IT+0x5a>
 8000d12:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d16:	e000      	b.n	8000d1a <HAL_DMA_Abort_IT+0x5a>
 8000d18:	2201      	movs	r2, #1
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_DMA_Abort_IT+0x94>)
 8000d1c:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000d24:	2300      	movs	r3, #0
 8000d26:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000d2a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000d2c:	b16b      	cbz	r3, 8000d4a <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8000d2e:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000d30:	2000      	movs	r0, #0
 8000d32:	e7cd      	b.n	8000cd0 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d34:	2210      	movs	r2, #16
 8000d36:	e7f0      	b.n	8000d1a <HAL_DMA_Abort_IT+0x5a>
 8000d38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d3c:	e7ed      	b.n	8000d1a <HAL_DMA_Abort_IT+0x5a>
 8000d3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d42:	e7ea      	b.n	8000d1a <HAL_DMA_Abort_IT+0x5a>
 8000d44:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d48:	e7e7      	b.n	8000d1a <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	e7c0      	b.n	8000cd0 <HAL_DMA_Abort_IT+0x10>
 8000d4e:	bf00      	nop
 8000d50:	40020008 	.word	0x40020008
 8000d54:	40020000 	.word	0x40020000

08000d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d58:	b4f0      	push	{r4, r5, r6, r7}
 8000d5a:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d5c:	2500      	movs	r5, #0
  uint32_t position = 0x00u;
 8000d5e:	462c      	mov	r4, r5
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d60:	e0a3      	b.n	8000eaa <HAL_GPIO_Init+0x152>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d62:	4f7f      	ldr	r7, [pc, #508]	; (8000f60 <HAL_GPIO_Init+0x208>)
 8000d64:	42bb      	cmp	r3, r7
 8000d66:	d010      	beq.n	8000d8a <HAL_GPIO_Init+0x32>
 8000d68:	d907      	bls.n	8000d7a <HAL_GPIO_Init+0x22>
 8000d6a:	4f7e      	ldr	r7, [pc, #504]	; (8000f64 <HAL_GPIO_Init+0x20c>)
 8000d6c:	42bb      	cmp	r3, r7
 8000d6e:	d00c      	beq.n	8000d8a <HAL_GPIO_Init+0x32>
 8000d70:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000d74:	42bb      	cmp	r3, r7
 8000d76:	d008      	beq.n	8000d8a <HAL_GPIO_Init+0x32>
 8000d78:	e013      	b.n	8000da2 <HAL_GPIO_Init+0x4a>
 8000d7a:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000d7e:	42bb      	cmp	r3, r7
 8000d80:	d003      	beq.n	8000d8a <HAL_GPIO_Init+0x32>
 8000d82:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 8000d86:	42bb      	cmp	r3, r7
 8000d88:	d107      	bne.n	8000d9a <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d8a:	688b      	ldr	r3, [r1, #8]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d058      	beq.n	8000e42 <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d051      	beq.n	8000e38 <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8000d94:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d96:	2508      	movs	r5, #8
 8000d98:	e003      	b.n	8000da2 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8000d9a:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000d9e:	42bb      	cmp	r3, r7
 8000da0:	d0f3      	beq.n	8000d8a <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000da2:	2eff      	cmp	r6, #255	; 0xff
 8000da4:	d84f      	bhi.n	8000e46 <HAL_GPIO_Init+0xee>
 8000da6:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000da8:	2eff      	cmp	r6, #255	; 0xff
 8000daa:	d84f      	bhi.n	8000e4c <HAL_GPIO_Init+0xf4>
 8000dac:	00a2      	lsls	r2, r4, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dae:	f8dc 3000 	ldr.w	r3, [ip]
 8000db2:	270f      	movs	r7, #15
 8000db4:	4097      	lsls	r7, r2
 8000db6:	ea23 0307 	bic.w	r3, r3, r7
 8000dba:	fa05 f202 	lsl.w	r2, r5, r2
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	f8cc 3000 	str.w	r3, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dc4:	684b      	ldr	r3, [r1, #4]
 8000dc6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000dca:	d06d      	beq.n	8000ea8 <HAL_GPIO_Init+0x150>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dcc:	4b66      	ldr	r3, [pc, #408]	; (8000f68 <HAL_GPIO_Init+0x210>)
 8000dce:	699a      	ldr	r2, [r3, #24]
 8000dd0:	f042 0201 	orr.w	r2, r2, #1
 8000dd4:	619a      	str	r2, [r3, #24]
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	9301      	str	r3, [sp, #4]
 8000dde:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000de0:	08a2      	lsrs	r2, r4, #2
 8000de2:	1c97      	adds	r7, r2, #2
 8000de4:	4b61      	ldr	r3, [pc, #388]	; (8000f6c <HAL_GPIO_Init+0x214>)
 8000de6:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dea:	f004 0703 	and.w	r7, r4, #3
 8000dee:	00bf      	lsls	r7, r7, #2
 8000df0:	f04f 0c0f 	mov.w	ip, #15
 8000df4:	fa0c fc07 	lsl.w	ip, ip, r7
 8000df8:	ea23 0c0c 	bic.w	ip, r3, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dfc:	4b5c      	ldr	r3, [pc, #368]	; (8000f70 <HAL_GPIO_Init+0x218>)
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d02a      	beq.n	8000e58 <HAL_GPIO_Init+0x100>
 8000e02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e06:	4298      	cmp	r0, r3
 8000e08:	f000 808a 	beq.w	8000f20 <HAL_GPIO_Init+0x1c8>
 8000e0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e10:	4298      	cmp	r0, r3
 8000e12:	f000 8087 	beq.w	8000f24 <HAL_GPIO_Init+0x1cc>
 8000e16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e1a:	4298      	cmp	r0, r3
 8000e1c:	d01a      	beq.n	8000e54 <HAL_GPIO_Init+0xfc>
 8000e1e:	2304      	movs	r3, #4
 8000e20:	e01b      	b.n	8000e5a <HAL_GPIO_Init+0x102>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e22:	68cd      	ldr	r5, [r1, #12]
          break;
 8000e24:	e7bd      	b.n	8000da2 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e26:	68cd      	ldr	r5, [r1, #12]
 8000e28:	3504      	adds	r5, #4
          break;
 8000e2a:	e7ba      	b.n	8000da2 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e2c:	68cd      	ldr	r5, [r1, #12]
 8000e2e:	3508      	adds	r5, #8
          break;
 8000e30:	e7b7      	b.n	8000da2 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e32:	68cd      	ldr	r5, [r1, #12]
 8000e34:	350c      	adds	r5, #12
          break;
 8000e36:	e7b4      	b.n	8000da2 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8000e38:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e3a:	2508      	movs	r5, #8
 8000e3c:	e7b1      	b.n	8000da2 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e3e:	2500      	movs	r5, #0
 8000e40:	e7af      	b.n	8000da2 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e42:	2504      	movs	r5, #4
 8000e44:	e7ad      	b.n	8000da2 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e46:	f100 0c04 	add.w	ip, r0, #4
 8000e4a:	e7ad      	b.n	8000da8 <HAL_GPIO_Init+0x50>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e4c:	f1a4 0208 	sub.w	r2, r4, #8
 8000e50:	0092      	lsls	r2, r2, #2
 8000e52:	e7ac      	b.n	8000dae <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e54:	2303      	movs	r3, #3
 8000e56:	e000      	b.n	8000e5a <HAL_GPIO_Init+0x102>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	40bb      	lsls	r3, r7
 8000e5c:	ea43 030c 	orr.w	r3, r3, ip
        AFIO->EXTICR[position >> 2u] = temp;
 8000e60:	3202      	adds	r2, #2
 8000e62:	4f42      	ldr	r7, [pc, #264]	; (8000f6c <HAL_GPIO_Init+0x214>)
 8000e64:	f847 3022 	str.w	r3, [r7, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e68:	684b      	ldr	r3, [r1, #4]
 8000e6a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000e6e:	d05b      	beq.n	8000f28 <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e70:	4a40      	ldr	r2, [pc, #256]	; (8000f74 <HAL_GPIO_Init+0x21c>)
 8000e72:	6813      	ldr	r3, [r2, #0]
 8000e74:	4333      	orrs	r3, r6
 8000e76:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e78:	684b      	ldr	r3, [r1, #4]
 8000e7a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e7e:	d059      	beq.n	8000f34 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e80:	4a3c      	ldr	r2, [pc, #240]	; (8000f74 <HAL_GPIO_Init+0x21c>)
 8000e82:	6853      	ldr	r3, [r2, #4]
 8000e84:	4333      	orrs	r3, r6
 8000e86:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e88:	684b      	ldr	r3, [r1, #4]
 8000e8a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000e8e:	d057      	beq.n	8000f40 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e90:	4a38      	ldr	r2, [pc, #224]	; (8000f74 <HAL_GPIO_Init+0x21c>)
 8000e92:	6893      	ldr	r3, [r2, #8]
 8000e94:	4333      	orrs	r3, r6
 8000e96:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e98:	684b      	ldr	r3, [r1, #4]
 8000e9a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8000e9e:	d055      	beq.n	8000f4c <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ea0:	4a34      	ldr	r2, [pc, #208]	; (8000f74 <HAL_GPIO_Init+0x21c>)
 8000ea2:	68d3      	ldr	r3, [r2, #12]
 8000ea4:	431e      	orrs	r6, r3
 8000ea6:	60d6      	str	r6, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8000ea8:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eaa:	680b      	ldr	r3, [r1, #0]
 8000eac:	fa33 f204 	lsrs.w	r2, r3, r4
 8000eb0:	d052      	beq.n	8000f58 <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eb6:	ea03 0602 	and.w	r6, r3, r2
    if (iocurrent == ioposition)
 8000eba:	ea32 0303 	bics.w	r3, r2, r3
 8000ebe:	d1f3      	bne.n	8000ea8 <HAL_GPIO_Init+0x150>
      switch (GPIO_Init->Mode)
 8000ec0:	684b      	ldr	r3, [r1, #4]
 8000ec2:	2b12      	cmp	r3, #18
 8000ec4:	f63f af4d 	bhi.w	8000d62 <HAL_GPIO_Init+0xa>
 8000ec8:	2b12      	cmp	r3, #18
 8000eca:	f63f af6a 	bhi.w	8000da2 <HAL_GPIO_Init+0x4a>
 8000ece:	a701      	add	r7, pc, #4	; (adr r7, 8000ed4 <HAL_GPIO_Init+0x17c>)
 8000ed0:	f857 f023 	ldr.w	pc, [r7, r3, lsl #2]
 8000ed4:	08000d8b 	.word	0x08000d8b
 8000ed8:	08000e23 	.word	0x08000e23
 8000edc:	08000e2d 	.word	0x08000e2d
 8000ee0:	08000e3f 	.word	0x08000e3f
 8000ee4:	08000da3 	.word	0x08000da3
 8000ee8:	08000da3 	.word	0x08000da3
 8000eec:	08000da3 	.word	0x08000da3
 8000ef0:	08000da3 	.word	0x08000da3
 8000ef4:	08000da3 	.word	0x08000da3
 8000ef8:	08000da3 	.word	0x08000da3
 8000efc:	08000da3 	.word	0x08000da3
 8000f00:	08000da3 	.word	0x08000da3
 8000f04:	08000da3 	.word	0x08000da3
 8000f08:	08000da3 	.word	0x08000da3
 8000f0c:	08000da3 	.word	0x08000da3
 8000f10:	08000da3 	.word	0x08000da3
 8000f14:	08000da3 	.word	0x08000da3
 8000f18:	08000e27 	.word	0x08000e27
 8000f1c:	08000e33 	.word	0x08000e33
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f20:	2301      	movs	r3, #1
 8000f22:	e79a      	b.n	8000e5a <HAL_GPIO_Init+0x102>
 8000f24:	2302      	movs	r3, #2
 8000f26:	e798      	b.n	8000e5a <HAL_GPIO_Init+0x102>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f28:	4a12      	ldr	r2, [pc, #72]	; (8000f74 <HAL_GPIO_Init+0x21c>)
 8000f2a:	6813      	ldr	r3, [r2, #0]
 8000f2c:	ea23 0306 	bic.w	r3, r3, r6
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	e7a1      	b.n	8000e78 <HAL_GPIO_Init+0x120>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f34:	4a0f      	ldr	r2, [pc, #60]	; (8000f74 <HAL_GPIO_Init+0x21c>)
 8000f36:	6853      	ldr	r3, [r2, #4]
 8000f38:	ea23 0306 	bic.w	r3, r3, r6
 8000f3c:	6053      	str	r3, [r2, #4]
 8000f3e:	e7a3      	b.n	8000e88 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f40:	4a0c      	ldr	r2, [pc, #48]	; (8000f74 <HAL_GPIO_Init+0x21c>)
 8000f42:	6893      	ldr	r3, [r2, #8]
 8000f44:	ea23 0306 	bic.w	r3, r3, r6
 8000f48:	6093      	str	r3, [r2, #8]
 8000f4a:	e7a5      	b.n	8000e98 <HAL_GPIO_Init+0x140>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f4c:	4a09      	ldr	r2, [pc, #36]	; (8000f74 <HAL_GPIO_Init+0x21c>)
 8000f4e:	68d3      	ldr	r3, [r2, #12]
 8000f50:	ea23 0606 	bic.w	r6, r3, r6
 8000f54:	60d6      	str	r6, [r2, #12]
 8000f56:	e7a7      	b.n	8000ea8 <HAL_GPIO_Init+0x150>
  }
}
 8000f58:	b002      	add	sp, #8
 8000f5a:	bcf0      	pop	{r4, r5, r6, r7}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	10220000 	.word	0x10220000
 8000f64:	10310000 	.word	0x10310000
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	40010000 	.word	0x40010000
 8000f70:	40010800 	.word	0x40010800
 8000f74:	40010400 	.word	0x40010400

08000f78 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f78:	b10a      	cbz	r2, 8000f7e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f7a:	6101      	str	r1, [r0, #16]
 8000f7c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f7e:	0409      	lsls	r1, r1, #16
 8000f80:	6101      	str	r1, [r0, #16]
  }
}
 8000f82:	4770      	bx	lr

08000f84 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f84:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f86:	ea01 0203 	and.w	r2, r1, r3
 8000f8a:	ea21 0103 	bic.w	r1, r1, r3
 8000f8e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000f92:	6101      	str	r1, [r0, #16]
}
 8000f94:	4770      	bx	lr
	...

08000f98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f98:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f9a:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	4203      	tst	r3, r0
 8000fa0:	d100      	bne.n	8000fa4 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8000fa2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fa4:	4b02      	ldr	r3, [pc, #8]	; (8000fb0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000fa6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fa8:	f002 f800 	bl	8002fac <HAL_GPIO_EXTI_Callback>
}
 8000fac:	e7f9      	b.n	8000fa2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000fae:	bf00      	nop
 8000fb0:	40010400 	.word	0x40010400

08000fb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000fb4:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <RCC_Delay+0x24>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <RCC_Delay+0x28>)
 8000fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc0:	0a5b      	lsrs	r3, r3, #9
 8000fc2:	fb00 f303 	mul.w	r3, r0, r3
 8000fc6:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000fc8:	bf00      	nop
  }
  while (Delay --);
 8000fca:	9b01      	ldr	r3, [sp, #4]
 8000fcc:	1e5a      	subs	r2, r3, #1
 8000fce:	9201      	str	r2, [sp, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1f9      	bne.n	8000fc8 <RCC_Delay+0x14>
}
 8000fd4:	b002      	add	sp, #8
 8000fd6:	4770      	bx	lr
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	10624dd3 	.word	0x10624dd3

08000fe0 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8000fe0:	2800      	cmp	r0, #0
 8000fe2:	f000 81f1 	beq.w	80013c8 <HAL_RCC_OscConfig+0x3e8>
{
 8000fe6:	b570      	push	{r4, r5, r6, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fec:	6803      	ldr	r3, [r0, #0]
 8000fee:	f013 0f01 	tst.w	r3, #1
 8000ff2:	d02c      	beq.n	800104e <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ff4:	4baa      	ldr	r3, [pc, #680]	; (80012a0 <HAL_RCC_OscConfig+0x2c0>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 030c 	and.w	r3, r3, #12
 8000ffc:	2b04      	cmp	r3, #4
 8000ffe:	d01d      	beq.n	800103c <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001000:	4ba7      	ldr	r3, [pc, #668]	; (80012a0 <HAL_RCC_OscConfig+0x2c0>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 030c 	and.w	r3, r3, #12
 8001008:	2b08      	cmp	r3, #8
 800100a:	d012      	beq.n	8001032 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800100c:	6863      	ldr	r3, [r4, #4]
 800100e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001012:	d041      	beq.n	8001098 <HAL_RCC_OscConfig+0xb8>
 8001014:	2b00      	cmp	r3, #0
 8001016:	d155      	bne.n	80010c4 <HAL_RCC_OscConfig+0xe4>
 8001018:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800101c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	e037      	b.n	80010a2 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001032:	4b9b      	ldr	r3, [pc, #620]	; (80012a0 <HAL_RCC_OscConfig+0x2c0>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800103a:	d0e7      	beq.n	800100c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800103c:	4b98      	ldr	r3, [pc, #608]	; (80012a0 <HAL_RCC_OscConfig+0x2c0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001044:	d003      	beq.n	800104e <HAL_RCC_OscConfig+0x6e>
 8001046:	6863      	ldr	r3, [r4, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	f000 81bf 	beq.w	80013cc <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800104e:	6823      	ldr	r3, [r4, #0]
 8001050:	f013 0f02 	tst.w	r3, #2
 8001054:	d075      	beq.n	8001142 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001056:	4b92      	ldr	r3, [pc, #584]	; (80012a0 <HAL_RCC_OscConfig+0x2c0>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f013 0f0c 	tst.w	r3, #12
 800105e:	d05f      	beq.n	8001120 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001060:	4b8f      	ldr	r3, [pc, #572]	; (80012a0 <HAL_RCC_OscConfig+0x2c0>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 030c 	and.w	r3, r3, #12
 8001068:	2b08      	cmp	r3, #8
 800106a:	d054      	beq.n	8001116 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800106c:	6923      	ldr	r3, [r4, #16]
 800106e:	2b00      	cmp	r3, #0
 8001070:	f000 8089 	beq.w	8001186 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_ENABLE();
 8001074:	4b8b      	ldr	r3, [pc, #556]	; (80012a4 <HAL_RCC_OscConfig+0x2c4>)
 8001076:	2201      	movs	r2, #1
 8001078:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800107a:	f7ff fd81 	bl	8000b80 <HAL_GetTick>
 800107e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001080:	4b87      	ldr	r3, [pc, #540]	; (80012a0 <HAL_RCC_OscConfig+0x2c0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f013 0f02 	tst.w	r3, #2
 8001088:	d174      	bne.n	8001174 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800108a:	f7ff fd79 	bl	8000b80 <HAL_GetTick>
 800108e:	1b40      	subs	r0, r0, r5
 8001090:	2802      	cmp	r0, #2
 8001092:	d9f5      	bls.n	8001080 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8001094:	2003      	movs	r0, #3
 8001096:	e19e      	b.n	80013d6 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001098:	4a81      	ldr	r2, [pc, #516]	; (80012a0 <HAL_RCC_OscConfig+0x2c0>)
 800109a:	6813      	ldr	r3, [r2, #0]
 800109c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a0:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010a2:	6863      	ldr	r3, [r4, #4]
 80010a4:	b343      	cbz	r3, 80010f8 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 80010a6:	f7ff fd6b 	bl	8000b80 <HAL_GetTick>
 80010aa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ac:	4b7c      	ldr	r3, [pc, #496]	; (80012a0 <HAL_RCC_OscConfig+0x2c0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80010b4:	d1cb      	bne.n	800104e <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010b6:	f7ff fd63 	bl	8000b80 <HAL_GetTick>
 80010ba:	1b40      	subs	r0, r0, r5
 80010bc:	2864      	cmp	r0, #100	; 0x64
 80010be:	d9f5      	bls.n	80010ac <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 80010c0:	2003      	movs	r0, #3
 80010c2:	e188      	b.n	80013d6 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010c8:	d009      	beq.n	80010de <HAL_RCC_OscConfig+0xfe>
 80010ca:	4b75      	ldr	r3, [pc, #468]	; (80012a0 <HAL_RCC_OscConfig+0x2c0>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	e7e1      	b.n	80010a2 <HAL_RCC_OscConfig+0xc2>
 80010de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80010e2:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	e7d4      	b.n	80010a2 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80010f8:	f7ff fd42 	bl	8000b80 <HAL_GetTick>
 80010fc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010fe:	4b68      	ldr	r3, [pc, #416]	; (80012a0 <HAL_RCC_OscConfig+0x2c0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001106:	d0a2      	beq.n	800104e <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001108:	f7ff fd3a 	bl	8000b80 <HAL_GetTick>
 800110c:	1b40      	subs	r0, r0, r5
 800110e:	2864      	cmp	r0, #100	; 0x64
 8001110:	d9f5      	bls.n	80010fe <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8001112:	2003      	movs	r0, #3
 8001114:	e15f      	b.n	80013d6 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001116:	4b62      	ldr	r3, [pc, #392]	; (80012a0 <HAL_RCC_OscConfig+0x2c0>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800111e:	d1a5      	bne.n	800106c <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001120:	4b5f      	ldr	r3, [pc, #380]	; (80012a0 <HAL_RCC_OscConfig+0x2c0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f013 0f02 	tst.w	r3, #2
 8001128:	d003      	beq.n	8001132 <HAL_RCC_OscConfig+0x152>
 800112a:	6923      	ldr	r3, [r4, #16]
 800112c:	2b01      	cmp	r3, #1
 800112e:	f040 814f 	bne.w	80013d0 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001132:	4a5b      	ldr	r2, [pc, #364]	; (80012a0 <HAL_RCC_OscConfig+0x2c0>)
 8001134:	6813      	ldr	r3, [r2, #0]
 8001136:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800113a:	6961      	ldr	r1, [r4, #20]
 800113c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001140:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001142:	6823      	ldr	r3, [r4, #0]
 8001144:	f013 0f08 	tst.w	r3, #8
 8001148:	d032      	beq.n	80011b0 <HAL_RCC_OscConfig+0x1d0>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800114a:	69a3      	ldr	r3, [r4, #24]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d045      	beq.n	80011dc <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8001150:	4b55      	ldr	r3, [pc, #340]	; (80012a8 <HAL_RCC_OscConfig+0x2c8>)
 8001152:	2201      	movs	r2, #1
 8001154:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001156:	f7ff fd13 	bl	8000b80 <HAL_GetTick>
 800115a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800115c:	4b50      	ldr	r3, [pc, #320]	; (80012a0 <HAL_RCC_OscConfig+0x2c0>)
 800115e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001160:	f013 0f02 	tst.w	r3, #2
 8001164:	d121      	bne.n	80011aa <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001166:	f7ff fd0b 	bl	8000b80 <HAL_GetTick>
 800116a:	1b40      	subs	r0, r0, r5
 800116c:	2802      	cmp	r0, #2
 800116e:	d9f5      	bls.n	800115c <HAL_RCC_OscConfig+0x17c>
          return HAL_TIMEOUT;
 8001170:	2003      	movs	r0, #3
 8001172:	e130      	b.n	80013d6 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001174:	4a4a      	ldr	r2, [pc, #296]	; (80012a0 <HAL_RCC_OscConfig+0x2c0>)
 8001176:	6813      	ldr	r3, [r2, #0]
 8001178:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800117c:	6961      	ldr	r1, [r4, #20]
 800117e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	e7dd      	b.n	8001142 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8001186:	4b47      	ldr	r3, [pc, #284]	; (80012a4 <HAL_RCC_OscConfig+0x2c4>)
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800118c:	f7ff fcf8 	bl	8000b80 <HAL_GetTick>
 8001190:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001192:	4b43      	ldr	r3, [pc, #268]	; (80012a0 <HAL_RCC_OscConfig+0x2c0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f013 0f02 	tst.w	r3, #2
 800119a:	d0d2      	beq.n	8001142 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800119c:	f7ff fcf0 	bl	8000b80 <HAL_GetTick>
 80011a0:	1b40      	subs	r0, r0, r5
 80011a2:	2802      	cmp	r0, #2
 80011a4:	d9f5      	bls.n	8001192 <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 80011a6:	2003      	movs	r0, #3
 80011a8:	e115      	b.n	80013d6 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 80011aa:	2001      	movs	r0, #1
 80011ac:	f7ff ff02 	bl	8000fb4 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011b0:	6823      	ldr	r3, [r4, #0]
 80011b2:	f013 0f04 	tst.w	r3, #4
 80011b6:	f000 8097 	beq.w	80012e8 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ba:	4b39      	ldr	r3, [pc, #228]	; (80012a0 <HAL_RCC_OscConfig+0x2c0>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80011c2:	d11d      	bne.n	8001200 <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_PWR_CLK_ENABLE();
 80011c4:	4b36      	ldr	r3, [pc, #216]	; (80012a0 <HAL_RCC_OscConfig+0x2c0>)
 80011c6:	69da      	ldr	r2, [r3, #28]
 80011c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011cc:	61da      	str	r2, [r3, #28]
 80011ce:	69db      	ldr	r3, [r3, #28]
 80011d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80011d8:	2501      	movs	r5, #1
 80011da:	e012      	b.n	8001202 <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_LSI_DISABLE();
 80011dc:	4b32      	ldr	r3, [pc, #200]	; (80012a8 <HAL_RCC_OscConfig+0x2c8>)
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80011e2:	f7ff fccd 	bl	8000b80 <HAL_GetTick>
 80011e6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e8:	4b2d      	ldr	r3, [pc, #180]	; (80012a0 <HAL_RCC_OscConfig+0x2c0>)
 80011ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ec:	f013 0f02 	tst.w	r3, #2
 80011f0:	d0de      	beq.n	80011b0 <HAL_RCC_OscConfig+0x1d0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011f2:	f7ff fcc5 	bl	8000b80 <HAL_GetTick>
 80011f6:	1b40      	subs	r0, r0, r5
 80011f8:	2802      	cmp	r0, #2
 80011fa:	d9f5      	bls.n	80011e8 <HAL_RCC_OscConfig+0x208>
          return HAL_TIMEOUT;
 80011fc:	2003      	movs	r0, #3
 80011fe:	e0ea      	b.n	80013d6 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8001200:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001202:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <HAL_RCC_OscConfig+0x2cc>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f413 7f80 	tst.w	r3, #256	; 0x100
 800120a:	d011      	beq.n	8001230 <HAL_RCC_OscConfig+0x250>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800120c:	68e3      	ldr	r3, [r4, #12]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d022      	beq.n	8001258 <HAL_RCC_OscConfig+0x278>
 8001212:	2b00      	cmp	r3, #0
 8001214:	d138      	bne.n	8001288 <HAL_RCC_OscConfig+0x2a8>
 8001216:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800121a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800121e:	6a1a      	ldr	r2, [r3, #32]
 8001220:	f022 0201 	bic.w	r2, r2, #1
 8001224:	621a      	str	r2, [r3, #32]
 8001226:	6a1a      	ldr	r2, [r3, #32]
 8001228:	f022 0204 	bic.w	r2, r2, #4
 800122c:	621a      	str	r2, [r3, #32]
 800122e:	e018      	b.n	8001262 <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001230:	4a1e      	ldr	r2, [pc, #120]	; (80012ac <HAL_RCC_OscConfig+0x2cc>)
 8001232:	6813      	ldr	r3, [r2, #0]
 8001234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001238:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800123a:	f7ff fca1 	bl	8000b80 <HAL_GetTick>
 800123e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <HAL_RCC_OscConfig+0x2cc>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001248:	d1e0      	bne.n	800120c <HAL_RCC_OscConfig+0x22c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800124a:	f7ff fc99 	bl	8000b80 <HAL_GetTick>
 800124e:	1b80      	subs	r0, r0, r6
 8001250:	2864      	cmp	r0, #100	; 0x64
 8001252:	d9f5      	bls.n	8001240 <HAL_RCC_OscConfig+0x260>
          return HAL_TIMEOUT;
 8001254:	2003      	movs	r0, #3
 8001256:	e0be      	b.n	80013d6 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001258:	4a11      	ldr	r2, [pc, #68]	; (80012a0 <HAL_RCC_OscConfig+0x2c0>)
 800125a:	6a13      	ldr	r3, [r2, #32]
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001262:	68e3      	ldr	r3, [r4, #12]
 8001264:	b373      	cbz	r3, 80012c4 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8001266:	f7ff fc8b 	bl	8000b80 <HAL_GetTick>
 800126a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <HAL_RCC_OscConfig+0x2c0>)
 800126e:	6a1b      	ldr	r3, [r3, #32]
 8001270:	f013 0f02 	tst.w	r3, #2
 8001274:	d137      	bne.n	80012e6 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001276:	f7ff fc83 	bl	8000b80 <HAL_GetTick>
 800127a:	1b80      	subs	r0, r0, r6
 800127c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001280:	4298      	cmp	r0, r3
 8001282:	d9f3      	bls.n	800126c <HAL_RCC_OscConfig+0x28c>
          return HAL_TIMEOUT;
 8001284:	2003      	movs	r0, #3
 8001286:	e0a6      	b.n	80013d6 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001288:	2b05      	cmp	r3, #5
 800128a:	d011      	beq.n	80012b0 <HAL_RCC_OscConfig+0x2d0>
 800128c:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <HAL_RCC_OscConfig+0x2c0>)
 800128e:	6a1a      	ldr	r2, [r3, #32]
 8001290:	f022 0201 	bic.w	r2, r2, #1
 8001294:	621a      	str	r2, [r3, #32]
 8001296:	6a1a      	ldr	r2, [r3, #32]
 8001298:	f022 0204 	bic.w	r2, r2, #4
 800129c:	621a      	str	r2, [r3, #32]
 800129e:	e7e0      	b.n	8001262 <HAL_RCC_OscConfig+0x282>
 80012a0:	40021000 	.word	0x40021000
 80012a4:	42420000 	.word	0x42420000
 80012a8:	42420480 	.word	0x42420480
 80012ac:	40007000 	.word	0x40007000
 80012b0:	4b4d      	ldr	r3, [pc, #308]	; (80013e8 <HAL_RCC_OscConfig+0x408>)
 80012b2:	6a1a      	ldr	r2, [r3, #32]
 80012b4:	f042 0204 	orr.w	r2, r2, #4
 80012b8:	621a      	str	r2, [r3, #32]
 80012ba:	6a1a      	ldr	r2, [r3, #32]
 80012bc:	f042 0201 	orr.w	r2, r2, #1
 80012c0:	621a      	str	r2, [r3, #32]
 80012c2:	e7ce      	b.n	8001262 <HAL_RCC_OscConfig+0x282>
      tickstart = HAL_GetTick();
 80012c4:	f7ff fc5c 	bl	8000b80 <HAL_GetTick>
 80012c8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ca:	4b47      	ldr	r3, [pc, #284]	; (80013e8 <HAL_RCC_OscConfig+0x408>)
 80012cc:	6a1b      	ldr	r3, [r3, #32]
 80012ce:	f013 0f02 	tst.w	r3, #2
 80012d2:	d008      	beq.n	80012e6 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012d4:	f7ff fc54 	bl	8000b80 <HAL_GetTick>
 80012d8:	1b80      	subs	r0, r0, r6
 80012da:	f241 3388 	movw	r3, #5000	; 0x1388
 80012de:	4298      	cmp	r0, r3
 80012e0:	d9f3      	bls.n	80012ca <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 80012e2:	2003      	movs	r0, #3
 80012e4:	e077      	b.n	80013d6 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 80012e6:	b9e5      	cbnz	r5, 8001322 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012e8:	69e3      	ldr	r3, [r4, #28]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d072      	beq.n	80013d4 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012ee:	4a3e      	ldr	r2, [pc, #248]	; (80013e8 <HAL_RCC_OscConfig+0x408>)
 80012f0:	6852      	ldr	r2, [r2, #4]
 80012f2:	f002 020c 	and.w	r2, r2, #12
 80012f6:	2a08      	cmp	r2, #8
 80012f8:	d056      	beq.n	80013a8 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d017      	beq.n	800132e <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 80012fe:	4b3b      	ldr	r3, [pc, #236]	; (80013ec <HAL_RCC_OscConfig+0x40c>)
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001304:	f7ff fc3c 	bl	8000b80 <HAL_GetTick>
 8001308:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800130a:	4b37      	ldr	r3, [pc, #220]	; (80013e8 <HAL_RCC_OscConfig+0x408>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001312:	d047      	beq.n	80013a4 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001314:	f7ff fc34 	bl	8000b80 <HAL_GetTick>
 8001318:	1b00      	subs	r0, r0, r4
 800131a:	2802      	cmp	r0, #2
 800131c:	d9f5      	bls.n	800130a <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 800131e:	2003      	movs	r0, #3
 8001320:	e059      	b.n	80013d6 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001322:	4a31      	ldr	r2, [pc, #196]	; (80013e8 <HAL_RCC_OscConfig+0x408>)
 8001324:	69d3      	ldr	r3, [r2, #28]
 8001326:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800132a:	61d3      	str	r3, [r2, #28]
 800132c:	e7dc      	b.n	80012e8 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 800132e:	4b2f      	ldr	r3, [pc, #188]	; (80013ec <HAL_RCC_OscConfig+0x40c>)
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001334:	f7ff fc24 	bl	8000b80 <HAL_GetTick>
 8001338:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800133a:	4b2b      	ldr	r3, [pc, #172]	; (80013e8 <HAL_RCC_OscConfig+0x408>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001342:	d006      	beq.n	8001352 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001344:	f7ff fc1c 	bl	8000b80 <HAL_GetTick>
 8001348:	1b40      	subs	r0, r0, r5
 800134a:	2802      	cmp	r0, #2
 800134c:	d9f5      	bls.n	800133a <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 800134e:	2003      	movs	r0, #3
 8001350:	e041      	b.n	80013d6 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001352:	6a23      	ldr	r3, [r4, #32]
 8001354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001358:	d01a      	beq.n	8001390 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800135a:	4923      	ldr	r1, [pc, #140]	; (80013e8 <HAL_RCC_OscConfig+0x408>)
 800135c:	684b      	ldr	r3, [r1, #4]
 800135e:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001362:	6a22      	ldr	r2, [r4, #32]
 8001364:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001366:	4302      	orrs	r2, r0
 8001368:	4313      	orrs	r3, r2
 800136a:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 800136c:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <HAL_RCC_OscConfig+0x40c>)
 800136e:	2201      	movs	r2, #1
 8001370:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001372:	f7ff fc05 	bl	8000b80 <HAL_GetTick>
 8001376:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <HAL_RCC_OscConfig+0x408>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001380:	d10e      	bne.n	80013a0 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001382:	f7ff fbfd 	bl	8000b80 <HAL_GetTick>
 8001386:	1b00      	subs	r0, r0, r4
 8001388:	2802      	cmp	r0, #2
 800138a:	d9f5      	bls.n	8001378 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 800138c:	2003      	movs	r0, #3
 800138e:	e022      	b.n	80013d6 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001390:	4a15      	ldr	r2, [pc, #84]	; (80013e8 <HAL_RCC_OscConfig+0x408>)
 8001392:	6853      	ldr	r3, [r2, #4]
 8001394:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001398:	68a1      	ldr	r1, [r4, #8]
 800139a:	430b      	orrs	r3, r1
 800139c:	6053      	str	r3, [r2, #4]
 800139e:	e7dc      	b.n	800135a <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 80013a0:	2000      	movs	r0, #0
 80013a2:	e018      	b.n	80013d6 <HAL_RCC_OscConfig+0x3f6>
 80013a4:	2000      	movs	r0, #0
 80013a6:	e016      	b.n	80013d6 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d016      	beq.n	80013da <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_RCC_OscConfig+0x408>)
 80013ae:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b0:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80013b4:	6a22      	ldr	r2, [r4, #32]
 80013b6:	4291      	cmp	r1, r2
 80013b8:	d111      	bne.n	80013de <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013ba:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80013be:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d10e      	bne.n	80013e2 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 80013c4:	2000      	movs	r0, #0
 80013c6:	e006      	b.n	80013d6 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 80013c8:	2001      	movs	r0, #1
}
 80013ca:	4770      	bx	lr
        return HAL_ERROR;
 80013cc:	2001      	movs	r0, #1
 80013ce:	e002      	b.n	80013d6 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 80013d0:	2001      	movs	r0, #1
 80013d2:	e000      	b.n	80013d6 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 80013d4:	2000      	movs	r0, #0
}
 80013d6:	b002      	add	sp, #8
 80013d8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80013da:	2001      	movs	r0, #1
 80013dc:	e7fb      	b.n	80013d6 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 80013de:	2001      	movs	r0, #1
 80013e0:	e7f9      	b.n	80013d6 <HAL_RCC_OscConfig+0x3f6>
 80013e2:	2001      	movs	r0, #1
 80013e4:	e7f7      	b.n	80013d6 <HAL_RCC_OscConfig+0x3f6>
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000
 80013ec:	42420060 	.word	0x42420060

080013f0 <HAL_RCC_EnableCSS>:
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80013f0:	4b01      	ldr	r3, [pc, #4]	; (80013f8 <HAL_RCC_EnableCSS+0x8>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	601a      	str	r2, [r3, #0]
}
 80013f6:	4770      	bx	lr
 80013f8:	4242004c 	.word	0x4242004c

080013fc <HAL_RCC_GetSysClockFreq>:
{
 80013fc:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013fe:	4b16      	ldr	r3, [pc, #88]	; (8001458 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001400:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001402:	f10d 0c18 	add.w	ip, sp, #24
 8001406:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800140a:	f240 2301 	movw	r3, #513	; 0x201
 800140e:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001412:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_RCC_GetSysClockFreq+0x60>)
 8001414:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001416:	f003 020c 	and.w	r2, r3, #12
 800141a:	2a08      	cmp	r2, #8
 800141c:	d002      	beq.n	8001424 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 800141e:	4810      	ldr	r0, [pc, #64]	; (8001460 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001420:	b006      	add	sp, #24
 8001422:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001424:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001428:	4462      	add	r2, ip
 800142a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800142e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001432:	d00c      	beq.n	800144e <HAL_RCC_GetSysClockFreq+0x52>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <HAL_RCC_GetSysClockFreq+0x60>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800143c:	4463      	add	r3, ip
 800143e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001442:	4807      	ldr	r0, [pc, #28]	; (8001460 <HAL_RCC_GetSysClockFreq+0x64>)
 8001444:	fb00 f002 	mul.w	r0, r0, r2
 8001448:	fbb0 f0f3 	udiv	r0, r0, r3
 800144c:	e7e8      	b.n	8001420 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800144e:	4805      	ldr	r0, [pc, #20]	; (8001464 <HAL_RCC_GetSysClockFreq+0x68>)
 8001450:	fb00 f002 	mul.w	r0, r0, r2
 8001454:	e7e4      	b.n	8001420 <HAL_RCC_GetSysClockFreq+0x24>
 8001456:	bf00      	nop
 8001458:	08004070 	.word	0x08004070
 800145c:	40021000 	.word	0x40021000
 8001460:	007a1200 	.word	0x007a1200
 8001464:	003d0900 	.word	0x003d0900

08001468 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001468:	2800      	cmp	r0, #0
 800146a:	f000 80a0 	beq.w	80015ae <HAL_RCC_ClockConfig+0x146>
{
 800146e:	b570      	push	{r4, r5, r6, lr}
 8001470:	460d      	mov	r5, r1
 8001472:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001474:	4b52      	ldr	r3, [pc, #328]	; (80015c0 <HAL_RCC_ClockConfig+0x158>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	428b      	cmp	r3, r1
 800147e:	d20b      	bcs.n	8001498 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001480:	4a4f      	ldr	r2, [pc, #316]	; (80015c0 <HAL_RCC_ClockConfig+0x158>)
 8001482:	6813      	ldr	r3, [r2, #0]
 8001484:	f023 0307 	bic.w	r3, r3, #7
 8001488:	430b      	orrs	r3, r1
 800148a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800148c:	6813      	ldr	r3, [r2, #0]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	428b      	cmp	r3, r1
 8001494:	f040 808d 	bne.w	80015b2 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001498:	6823      	ldr	r3, [r4, #0]
 800149a:	f013 0f02 	tst.w	r3, #2
 800149e:	d017      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a0:	f013 0f04 	tst.w	r3, #4
 80014a4:	d004      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014a6:	4a47      	ldr	r2, [pc, #284]	; (80015c4 <HAL_RCC_ClockConfig+0x15c>)
 80014a8:	6853      	ldr	r3, [r2, #4]
 80014aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014ae:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014b0:	6823      	ldr	r3, [r4, #0]
 80014b2:	f013 0f08 	tst.w	r3, #8
 80014b6:	d004      	beq.n	80014c2 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014b8:	4a42      	ldr	r2, [pc, #264]	; (80015c4 <HAL_RCC_ClockConfig+0x15c>)
 80014ba:	6853      	ldr	r3, [r2, #4]
 80014bc:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014c0:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014c2:	4a40      	ldr	r2, [pc, #256]	; (80015c4 <HAL_RCC_ClockConfig+0x15c>)
 80014c4:	6853      	ldr	r3, [r2, #4]
 80014c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014ca:	68a1      	ldr	r1, [r4, #8]
 80014cc:	430b      	orrs	r3, r1
 80014ce:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014d0:	6823      	ldr	r3, [r4, #0]
 80014d2:	f013 0f01 	tst.w	r3, #1
 80014d6:	d031      	beq.n	800153c <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014d8:	6863      	ldr	r3, [r4, #4]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d020      	beq.n	8001520 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d025      	beq.n	800152e <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e2:	4a38      	ldr	r2, [pc, #224]	; (80015c4 <HAL_RCC_ClockConfig+0x15c>)
 80014e4:	6812      	ldr	r2, [r2, #0]
 80014e6:	f012 0f02 	tst.w	r2, #2
 80014ea:	d064      	beq.n	80015b6 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ec:	4935      	ldr	r1, [pc, #212]	; (80015c4 <HAL_RCC_ClockConfig+0x15c>)
 80014ee:	684a      	ldr	r2, [r1, #4]
 80014f0:	f022 0203 	bic.w	r2, r2, #3
 80014f4:	4313      	orrs	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80014f8:	f7ff fb42 	bl	8000b80 <HAL_GetTick>
 80014fc:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014fe:	4b31      	ldr	r3, [pc, #196]	; (80015c4 <HAL_RCC_ClockConfig+0x15c>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 030c 	and.w	r3, r3, #12
 8001506:	6862      	ldr	r2, [r4, #4]
 8001508:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800150c:	d016      	beq.n	800153c <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800150e:	f7ff fb37 	bl	8000b80 <HAL_GetTick>
 8001512:	1b80      	subs	r0, r0, r6
 8001514:	f241 3388 	movw	r3, #5000	; 0x1388
 8001518:	4298      	cmp	r0, r3
 800151a:	d9f0      	bls.n	80014fe <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 800151c:	2003      	movs	r0, #3
 800151e:	e045      	b.n	80015ac <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001520:	4a28      	ldr	r2, [pc, #160]	; (80015c4 <HAL_RCC_ClockConfig+0x15c>)
 8001522:	6812      	ldr	r2, [r2, #0]
 8001524:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001528:	d1e0      	bne.n	80014ec <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800152a:	2001      	movs	r0, #1
 800152c:	e03e      	b.n	80015ac <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800152e:	4a25      	ldr	r2, [pc, #148]	; (80015c4 <HAL_RCC_ClockConfig+0x15c>)
 8001530:	6812      	ldr	r2, [r2, #0]
 8001532:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001536:	d1d9      	bne.n	80014ec <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001538:	2001      	movs	r0, #1
 800153a:	e037      	b.n	80015ac <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800153c:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <HAL_RCC_ClockConfig+0x158>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	42ab      	cmp	r3, r5
 8001546:	d90a      	bls.n	800155e <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001548:	4a1d      	ldr	r2, [pc, #116]	; (80015c0 <HAL_RCC_ClockConfig+0x158>)
 800154a:	6813      	ldr	r3, [r2, #0]
 800154c:	f023 0307 	bic.w	r3, r3, #7
 8001550:	432b      	orrs	r3, r5
 8001552:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001554:	6813      	ldr	r3, [r2, #0]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	42ab      	cmp	r3, r5
 800155c:	d12d      	bne.n	80015ba <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800155e:	6823      	ldr	r3, [r4, #0]
 8001560:	f013 0f04 	tst.w	r3, #4
 8001564:	d006      	beq.n	8001574 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001566:	4a17      	ldr	r2, [pc, #92]	; (80015c4 <HAL_RCC_ClockConfig+0x15c>)
 8001568:	6853      	ldr	r3, [r2, #4]
 800156a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800156e:	68e1      	ldr	r1, [r4, #12]
 8001570:	430b      	orrs	r3, r1
 8001572:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001574:	6823      	ldr	r3, [r4, #0]
 8001576:	f013 0f08 	tst.w	r3, #8
 800157a:	d007      	beq.n	800158c <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800157c:	4a11      	ldr	r2, [pc, #68]	; (80015c4 <HAL_RCC_ClockConfig+0x15c>)
 800157e:	6853      	ldr	r3, [r2, #4]
 8001580:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001584:	6921      	ldr	r1, [r4, #16]
 8001586:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800158a:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800158c:	f7ff ff36 	bl	80013fc <HAL_RCC_GetSysClockFreq>
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <HAL_RCC_ClockConfig+0x15c>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001598:	4a0b      	ldr	r2, [pc, #44]	; (80015c8 <HAL_RCC_ClockConfig+0x160>)
 800159a:	5cd3      	ldrb	r3, [r2, r3]
 800159c:	40d8      	lsrs	r0, r3
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_RCC_ClockConfig+0x164>)
 80015a0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <HAL_RCC_ClockConfig+0x168>)
 80015a4:	6818      	ldr	r0, [r3, #0]
 80015a6:	f7ff fab9 	bl	8000b1c <HAL_InitTick>
  return HAL_OK;
 80015aa:	2000      	movs	r0, #0
}
 80015ac:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80015ae:	2001      	movs	r0, #1
}
 80015b0:	4770      	bx	lr
    return HAL_ERROR;
 80015b2:	2001      	movs	r0, #1
 80015b4:	e7fa      	b.n	80015ac <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 80015b6:	2001      	movs	r0, #1
 80015b8:	e7f8      	b.n	80015ac <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 80015ba:	2001      	movs	r0, #1
 80015bc:	e7f6      	b.n	80015ac <HAL_RCC_ClockConfig+0x144>
 80015be:	bf00      	nop
 80015c0:	40022000 	.word	0x40022000
 80015c4:	40021000 	.word	0x40021000
 80015c8:	08004058 	.word	0x08004058
 80015cc:	20000000 	.word	0x20000000
 80015d0:	20000008 	.word	0x20000008

080015d4 <HAL_RCC_GetHCLKFreq>:
}
 80015d4:	4b01      	ldr	r3, [pc, #4]	; (80015dc <HAL_RCC_GetHCLKFreq+0x8>)
 80015d6:	6818      	ldr	r0, [r3, #0]
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	20000000 	.word	0x20000000

080015e0 <HAL_RCC_GetPCLK1Freq>:
{
 80015e0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015e2:	f7ff fff7 	bl	80015d4 <HAL_RCC_GetHCLKFreq>
 80015e6:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80015ee:	4a03      	ldr	r2, [pc, #12]	; (80015fc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80015f0:	5cd3      	ldrb	r3, [r2, r3]
}
 80015f2:	40d8      	lsrs	r0, r3
 80015f4:	bd08      	pop	{r3, pc}
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000
 80015fc:	08004068 	.word	0x08004068

08001600 <HAL_RCC_GetPCLK2Freq>:
{
 8001600:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001602:	f7ff ffe7 	bl	80015d4 <HAL_RCC_GetHCLKFreq>
 8001606:	4b04      	ldr	r3, [pc, #16]	; (8001618 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800160e:	4a03      	ldr	r2, [pc, #12]	; (800161c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001610:	5cd3      	ldrb	r3, [r2, r3]
}
 8001612:	40d8      	lsrs	r0, r3
 8001614:	bd08      	pop	{r3, pc}
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000
 800161c:	08004068 	.word	0x08004068

08001620 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001620:	230f      	movs	r3, #15
 8001622:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_RCC_GetClockConfig+0x34>)
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	f002 0203 	and.w	r2, r2, #3
 800162c:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001634:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800163c:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	08db      	lsrs	r3, r3, #3
 8001642:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001646:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001648:	4b03      	ldr	r3, [pc, #12]	; (8001658 <HAL_RCC_GetClockConfig+0x38>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0307 	and.w	r3, r3, #7
 8001650:	600b      	str	r3, [r1, #0]
}
 8001652:	4770      	bx	lr
 8001654:	40021000 	.word	0x40021000
 8001658:	40022000 	.word	0x40022000

0800165c <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 800165c:	4770      	bx	lr
	...

08001660 <HAL_RCC_NMI_IRQHandler>:
{
 8001660:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_RCC_NMI_IRQHandler+0x1c>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f013 0f80 	tst.w	r3, #128	; 0x80
 800166a:	d100      	bne.n	800166e <HAL_RCC_NMI_IRQHandler+0xe>
}
 800166c:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 800166e:	f7ff fff5 	bl	800165c <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001672:	4b03      	ldr	r3, [pc, #12]	; (8001680 <HAL_RCC_NMI_IRQHandler+0x20>)
 8001674:	2280      	movs	r2, #128	; 0x80
 8001676:	701a      	strb	r2, [r3, #0]
}
 8001678:	e7f8      	b.n	800166c <HAL_RCC_NMI_IRQHandler+0xc>
 800167a:	bf00      	nop
 800167c:	40021000 	.word	0x40021000
 8001680:	4002100a 	.word	0x4002100a

08001684 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001684:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b01      	cmp	r3, #1
 800168c:	d122      	bne.n	80016d4 <HAL_TIM_Base_Start+0x50>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800168e:	2302      	movs	r3, #2
 8001690:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001694:	6803      	ldr	r3, [r0, #0]
 8001696:	4a11      	ldr	r2, [pc, #68]	; (80016dc <HAL_TIM_Base_Start+0x58>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d010      	beq.n	80016be <HAL_TIM_Base_Start+0x3a>
 800169c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016a0:	d00d      	beq.n	80016be <HAL_TIM_Base_Start+0x3a>
 80016a2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d009      	beq.n	80016be <HAL_TIM_Base_Start+0x3a>
 80016aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d005      	beq.n	80016be <HAL_TIM_Base_Start+0x3a>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	f042 0201 	orr.w	r2, r2, #1
 80016b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016ba:	2000      	movs	r0, #0
 80016bc:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016c4:	2a06      	cmp	r2, #6
 80016c6:	d007      	beq.n	80016d8 <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	f042 0201 	orr.w	r2, r2, #1
 80016ce:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80016d0:	2000      	movs	r0, #0
 80016d2:	4770      	bx	lr
    return HAL_ERROR;
 80016d4:	2001      	movs	r0, #1
 80016d6:	4770      	bx	lr
  return HAL_OK;
 80016d8:	2000      	movs	r0, #0
}
 80016da:	4770      	bx	lr
 80016dc:	40012c00 	.word	0x40012c00

080016e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80016e0:	4770      	bx	lr

080016e2 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80016e2:	4770      	bx	lr

080016e4 <HAL_TIM_IRQHandler>:
{
 80016e4:	b510      	push	{r4, lr}
 80016e6:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016e8:	6803      	ldr	r3, [r0, #0]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	f012 0f02 	tst.w	r2, #2
 80016f0:	d011      	beq.n	8001716 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016f2:	68da      	ldr	r2, [r3, #12]
 80016f4:	f012 0f02 	tst.w	r2, #2
 80016f8:	d00d      	beq.n	8001716 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016fa:	f06f 0202 	mvn.w	r2, #2
 80016fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001700:	2301      	movs	r3, #1
 8001702:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001704:	6803      	ldr	r3, [r0, #0]
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	f013 0f03 	tst.w	r3, #3
 800170c:	d070      	beq.n	80017f0 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800170e:	f001 fb63 	bl	8002dd8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001712:	2300      	movs	r3, #0
 8001714:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001716:	6823      	ldr	r3, [r4, #0]
 8001718:	691a      	ldr	r2, [r3, #16]
 800171a:	f012 0f04 	tst.w	r2, #4
 800171e:	d012      	beq.n	8001746 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001720:	68da      	ldr	r2, [r3, #12]
 8001722:	f012 0f04 	tst.w	r2, #4
 8001726:	d00e      	beq.n	8001746 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001728:	f06f 0204 	mvn.w	r2, #4
 800172c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800172e:	2302      	movs	r3, #2
 8001730:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001732:	6823      	ldr	r3, [r4, #0]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	f413 7f40 	tst.w	r3, #768	; 0x300
 800173a:	d05f      	beq.n	80017fc <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800173c:	4620      	mov	r0, r4
 800173e:	f001 fb4b 	bl	8002dd8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001742:	2300      	movs	r3, #0
 8001744:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001746:	6823      	ldr	r3, [r4, #0]
 8001748:	691a      	ldr	r2, [r3, #16]
 800174a:	f012 0f08 	tst.w	r2, #8
 800174e:	d012      	beq.n	8001776 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001750:	68da      	ldr	r2, [r3, #12]
 8001752:	f012 0f08 	tst.w	r2, #8
 8001756:	d00e      	beq.n	8001776 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001758:	f06f 0208 	mvn.w	r2, #8
 800175c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800175e:	2304      	movs	r3, #4
 8001760:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001762:	6823      	ldr	r3, [r4, #0]
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	f013 0f03 	tst.w	r3, #3
 800176a:	d04e      	beq.n	800180a <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800176c:	4620      	mov	r0, r4
 800176e:	f001 fb33 	bl	8002dd8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001772:	2300      	movs	r3, #0
 8001774:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001776:	6823      	ldr	r3, [r4, #0]
 8001778:	691a      	ldr	r2, [r3, #16]
 800177a:	f012 0f10 	tst.w	r2, #16
 800177e:	d012      	beq.n	80017a6 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	f012 0f10 	tst.w	r2, #16
 8001786:	d00e      	beq.n	80017a6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001788:	f06f 0210 	mvn.w	r2, #16
 800178c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800178e:	2308      	movs	r3, #8
 8001790:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001792:	6823      	ldr	r3, [r4, #0]
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	f413 7f40 	tst.w	r3, #768	; 0x300
 800179a:	d03d      	beq.n	8001818 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 800179c:	4620      	mov	r0, r4
 800179e:	f001 fb1b 	bl	8002dd8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017a2:	2300      	movs	r3, #0
 80017a4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017a6:	6823      	ldr	r3, [r4, #0]
 80017a8:	691a      	ldr	r2, [r3, #16]
 80017aa:	f012 0f01 	tst.w	r2, #1
 80017ae:	d003      	beq.n	80017b8 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017b0:	68da      	ldr	r2, [r3, #12]
 80017b2:	f012 0f01 	tst.w	r2, #1
 80017b6:	d136      	bne.n	8001826 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80017b8:	6823      	ldr	r3, [r4, #0]
 80017ba:	691a      	ldr	r2, [r3, #16]
 80017bc:	f012 0f80 	tst.w	r2, #128	; 0x80
 80017c0:	d003      	beq.n	80017ca <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80017c8:	d134      	bne.n	8001834 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80017ca:	6823      	ldr	r3, [r4, #0]
 80017cc:	691a      	ldr	r2, [r3, #16]
 80017ce:	f012 0f40 	tst.w	r2, #64	; 0x40
 80017d2:	d003      	beq.n	80017dc <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80017d4:	68da      	ldr	r2, [r3, #12]
 80017d6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80017da:	d132      	bne.n	8001842 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80017dc:	6823      	ldr	r3, [r4, #0]
 80017de:	691a      	ldr	r2, [r3, #16]
 80017e0:	f012 0f20 	tst.w	r2, #32
 80017e4:	d003      	beq.n	80017ee <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80017e6:	68da      	ldr	r2, [r3, #12]
 80017e8:	f012 0f20 	tst.w	r2, #32
 80017ec:	d130      	bne.n	8001850 <HAL_TIM_IRQHandler+0x16c>
}
 80017ee:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017f0:	f001 faf6 	bl	8002de0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017f4:	4620      	mov	r0, r4
 80017f6:	f7ff ff73 	bl	80016e0 <HAL_TIM_PWM_PulseFinishedCallback>
 80017fa:	e78a      	b.n	8001712 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017fc:	4620      	mov	r0, r4
 80017fe:	f001 faef 	bl	8002de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001802:	4620      	mov	r0, r4
 8001804:	f7ff ff6c 	bl	80016e0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001808:	e79b      	b.n	8001742 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800180a:	4620      	mov	r0, r4
 800180c:	f001 fae8 	bl	8002de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001810:	4620      	mov	r0, r4
 8001812:	f7ff ff65 	bl	80016e0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001816:	e7ac      	b.n	8001772 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001818:	4620      	mov	r0, r4
 800181a:	f001 fae1 	bl	8002de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800181e:	4620      	mov	r0, r4
 8001820:	f7ff ff5e 	bl	80016e0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001824:	e7bd      	b.n	80017a2 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001826:	f06f 0201 	mvn.w	r2, #1
 800182a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800182c:	4620      	mov	r0, r4
 800182e:	f001 faa7 	bl	8002d80 <HAL_TIM_PeriodElapsedCallback>
 8001832:	e7c1      	b.n	80017b8 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001834:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001838:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800183a:	4620      	mov	r0, r4
 800183c:	f000 fad1 	bl	8001de2 <HAL_TIMEx_BreakCallback>
 8001840:	e7c3      	b.n	80017ca <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001842:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001846:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001848:	4620      	mov	r0, r4
 800184a:	f7ff ff4a 	bl	80016e2 <HAL_TIM_TriggerCallback>
 800184e:	e7c5      	b.n	80017dc <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001850:	f06f 0220 	mvn.w	r2, #32
 8001854:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001856:	4620      	mov	r0, r4
 8001858:	f000 fac2 	bl	8001de0 <HAL_TIMEx_CommutCallback>
}
 800185c:	e7c7      	b.n	80017ee <HAL_TIM_IRQHandler+0x10a>
	...

08001860 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001860:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001862:	4a1b      	ldr	r2, [pc, #108]	; (80018d0 <TIM_Base_SetConfig+0x70>)
 8001864:	4290      	cmp	r0, r2
 8001866:	d00a      	beq.n	800187e <TIM_Base_SetConfig+0x1e>
 8001868:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800186c:	d007      	beq.n	800187e <TIM_Base_SetConfig+0x1e>
 800186e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001872:	4290      	cmp	r0, r2
 8001874:	d003      	beq.n	800187e <TIM_Base_SetConfig+0x1e>
 8001876:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800187a:	4290      	cmp	r0, r2
 800187c:	d103      	bne.n	8001886 <TIM_Base_SetConfig+0x26>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800187e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001882:	684a      	ldr	r2, [r1, #4]
 8001884:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001886:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <TIM_Base_SetConfig+0x70>)
 8001888:	4290      	cmp	r0, r2
 800188a:	d00a      	beq.n	80018a2 <TIM_Base_SetConfig+0x42>
 800188c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001890:	d007      	beq.n	80018a2 <TIM_Base_SetConfig+0x42>
 8001892:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001896:	4290      	cmp	r0, r2
 8001898:	d003      	beq.n	80018a2 <TIM_Base_SetConfig+0x42>
 800189a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800189e:	4290      	cmp	r0, r2
 80018a0:	d103      	bne.n	80018aa <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80018a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018a6:	68ca      	ldr	r2, [r1, #12]
 80018a8:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018ae:	694a      	ldr	r2, [r1, #20]
 80018b0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80018b2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018b4:	688b      	ldr	r3, [r1, #8]
 80018b6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80018b8:	680b      	ldr	r3, [r1, #0]
 80018ba:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018bc:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <TIM_Base_SetConfig+0x70>)
 80018be:	4298      	cmp	r0, r3
 80018c0:	d002      	beq.n	80018c8 <TIM_Base_SetConfig+0x68>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80018c2:	2301      	movs	r3, #1
 80018c4:	6143      	str	r3, [r0, #20]
}
 80018c6:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80018c8:	690b      	ldr	r3, [r1, #16]
 80018ca:	6303      	str	r3, [r0, #48]	; 0x30
 80018cc:	e7f9      	b.n	80018c2 <TIM_Base_SetConfig+0x62>
 80018ce:	bf00      	nop
 80018d0:	40012c00 	.word	0x40012c00

080018d4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80018d4:	b340      	cbz	r0, 8001928 <HAL_TIM_Base_Init+0x54>
{
 80018d6:	b510      	push	{r4, lr}
 80018d8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80018da:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80018de:	b1f3      	cbz	r3, 800191e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80018e0:	2302      	movs	r3, #2
 80018e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018e6:	4621      	mov	r1, r4
 80018e8:	f851 0b04 	ldr.w	r0, [r1], #4
 80018ec:	f7ff ffb8 	bl	8001860 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018f0:	2301      	movs	r3, #1
 80018f2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018f6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80018fa:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80018fe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001902:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001906:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800190a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800190e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001912:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001916:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800191a:	2000      	movs	r0, #0
}
 800191c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800191e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001922:	f002 f847 	bl	80039b4 <HAL_TIM_Base_MspInit>
 8001926:	e7db      	b.n	80018e0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001928:	2001      	movs	r0, #1
}
 800192a:	4770      	bx	lr

0800192c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800192c:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800192e:	f001 011f 	and.w	r1, r1, #31
 8001932:	2301      	movs	r3, #1
 8001934:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001938:	6a03      	ldr	r3, [r0, #32]
 800193a:	ea23 0304 	bic.w	r3, r3, r4
 800193e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001940:	6a03      	ldr	r3, [r0, #32]
 8001942:	fa02 f101 	lsl.w	r1, r2, r1
 8001946:	430b      	orrs	r3, r1
 8001948:	6203      	str	r3, [r0, #32]
}
 800194a:	bc10      	pop	{r4}
 800194c:	4770      	bx	lr
	...

08001950 <HAL_TIM_OC_Start>:
{
 8001950:	b510      	push	{r4, lr}
 8001952:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001954:	4608      	mov	r0, r1
 8001956:	bb51      	cbnz	r1, 80019ae <HAL_TIM_OC_Start+0x5e>
 8001958:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800195c:	b2db      	uxtb	r3, r3
 800195e:	3b01      	subs	r3, #1
 8001960:	bf18      	it	ne
 8001962:	2301      	movne	r3, #1
 8001964:	2b00      	cmp	r3, #0
 8001966:	d15b      	bne.n	8001a20 <HAL_TIM_OC_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001968:	2800      	cmp	r0, #0
 800196a:	d139      	bne.n	80019e0 <HAL_TIM_OC_Start+0x90>
 800196c:	2302      	movs	r3, #2
 800196e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001972:	2201      	movs	r2, #1
 8001974:	4601      	mov	r1, r0
 8001976:	6820      	ldr	r0, [r4, #0]
 8001978:	f7ff ffd8 	bl	800192c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800197c:	6823      	ldr	r3, [r4, #0]
 800197e:	4a2a      	ldr	r2, [pc, #168]	; (8001a28 <HAL_TIM_OC_Start+0xd8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d03d      	beq.n	8001a00 <HAL_TIM_OC_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001984:	6823      	ldr	r3, [r4, #0]
 8001986:	4a28      	ldr	r2, [pc, #160]	; (8001a28 <HAL_TIM_OC_Start+0xd8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d03e      	beq.n	8001a0a <HAL_TIM_OC_Start+0xba>
 800198c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001990:	d03b      	beq.n	8001a0a <HAL_TIM_OC_Start+0xba>
 8001992:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001996:	4293      	cmp	r3, r2
 8001998:	d037      	beq.n	8001a0a <HAL_TIM_OC_Start+0xba>
 800199a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800199e:	4293      	cmp	r3, r2
 80019a0:	d033      	beq.n	8001a0a <HAL_TIM_OC_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	f042 0201 	orr.w	r2, r2, #1
 80019a8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80019aa:	2000      	movs	r0, #0
 80019ac:	e039      	b.n	8001a22 <HAL_TIM_OC_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80019ae:	2904      	cmp	r1, #4
 80019b0:	d008      	beq.n	80019c4 <HAL_TIM_OC_Start+0x74>
 80019b2:	2908      	cmp	r1, #8
 80019b4:	d00d      	beq.n	80019d2 <HAL_TIM_OC_Start+0x82>
 80019b6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	3b01      	subs	r3, #1
 80019be:	bf18      	it	ne
 80019c0:	2301      	movne	r3, #1
 80019c2:	e7cf      	b.n	8001964 <HAL_TIM_OC_Start+0x14>
 80019c4:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	3b01      	subs	r3, #1
 80019cc:	bf18      	it	ne
 80019ce:	2301      	movne	r3, #1
 80019d0:	e7c8      	b.n	8001964 <HAL_TIM_OC_Start+0x14>
 80019d2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	3b01      	subs	r3, #1
 80019da:	bf18      	it	ne
 80019dc:	2301      	movne	r3, #1
 80019de:	e7c1      	b.n	8001964 <HAL_TIM_OC_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80019e0:	2804      	cmp	r0, #4
 80019e2:	d005      	beq.n	80019f0 <HAL_TIM_OC_Start+0xa0>
 80019e4:	2808      	cmp	r0, #8
 80019e6:	d007      	beq.n	80019f8 <HAL_TIM_OC_Start+0xa8>
 80019e8:	2302      	movs	r3, #2
 80019ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80019ee:	e7c0      	b.n	8001972 <HAL_TIM_OC_Start+0x22>
 80019f0:	2302      	movs	r3, #2
 80019f2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80019f6:	e7bc      	b.n	8001972 <HAL_TIM_OC_Start+0x22>
 80019f8:	2302      	movs	r3, #2
 80019fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80019fe:	e7b8      	b.n	8001972 <HAL_TIM_OC_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 8001a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a06:	645a      	str	r2, [r3, #68]	; 0x44
 8001a08:	e7bc      	b.n	8001984 <HAL_TIM_OC_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a10:	2a06      	cmp	r2, #6
 8001a12:	d007      	beq.n	8001a24 <HAL_TIM_OC_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	f042 0201 	orr.w	r2, r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	e000      	b.n	8001a22 <HAL_TIM_OC_Start+0xd2>
    return HAL_ERROR;
 8001a20:	2001      	movs	r0, #1
}
 8001a22:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8001a24:	2000      	movs	r0, #0
 8001a26:	e7fc      	b.n	8001a22 <HAL_TIM_OC_Start+0xd2>
 8001a28:	40012c00 	.word	0x40012c00

08001a2c <HAL_TIM_PWM_Start>:
{
 8001a2c:	b510      	push	{r4, lr}
 8001a2e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a30:	4608      	mov	r0, r1
 8001a32:	bb51      	cbnz	r1, 8001a8a <HAL_TIM_PWM_Start+0x5e>
 8001a34:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	bf18      	it	ne
 8001a3e:	2301      	movne	r3, #1
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d15b      	bne.n	8001afc <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a44:	2800      	cmp	r0, #0
 8001a46:	d139      	bne.n	8001abc <HAL_TIM_PWM_Start+0x90>
 8001a48:	2302      	movs	r3, #2
 8001a4a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a4e:	2201      	movs	r2, #1
 8001a50:	4601      	mov	r1, r0
 8001a52:	6820      	ldr	r0, [r4, #0]
 8001a54:	f7ff ff6a 	bl	800192c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	4a2a      	ldr	r2, [pc, #168]	; (8001b04 <HAL_TIM_PWM_Start+0xd8>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d03d      	beq.n	8001adc <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a60:	6823      	ldr	r3, [r4, #0]
 8001a62:	4a28      	ldr	r2, [pc, #160]	; (8001b04 <HAL_TIM_PWM_Start+0xd8>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d03e      	beq.n	8001ae6 <HAL_TIM_PWM_Start+0xba>
 8001a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a6c:	d03b      	beq.n	8001ae6 <HAL_TIM_PWM_Start+0xba>
 8001a6e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d037      	beq.n	8001ae6 <HAL_TIM_PWM_Start+0xba>
 8001a76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d033      	beq.n	8001ae6 <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	f042 0201 	orr.w	r2, r2, #1
 8001a84:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001a86:	2000      	movs	r0, #0
 8001a88:	e039      	b.n	8001afe <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a8a:	2904      	cmp	r1, #4
 8001a8c:	d008      	beq.n	8001aa0 <HAL_TIM_PWM_Start+0x74>
 8001a8e:	2908      	cmp	r1, #8
 8001a90:	d00d      	beq.n	8001aae <HAL_TIM_PWM_Start+0x82>
 8001a92:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	bf18      	it	ne
 8001a9c:	2301      	movne	r3, #1
 8001a9e:	e7cf      	b.n	8001a40 <HAL_TIM_PWM_Start+0x14>
 8001aa0:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	bf18      	it	ne
 8001aaa:	2301      	movne	r3, #1
 8001aac:	e7c8      	b.n	8001a40 <HAL_TIM_PWM_Start+0x14>
 8001aae:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	bf18      	it	ne
 8001ab8:	2301      	movne	r3, #1
 8001aba:	e7c1      	b.n	8001a40 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001abc:	2804      	cmp	r0, #4
 8001abe:	d005      	beq.n	8001acc <HAL_TIM_PWM_Start+0xa0>
 8001ac0:	2808      	cmp	r0, #8
 8001ac2:	d007      	beq.n	8001ad4 <HAL_TIM_PWM_Start+0xa8>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8001aca:	e7c0      	b.n	8001a4e <HAL_TIM_PWM_Start+0x22>
 8001acc:	2302      	movs	r3, #2
 8001ace:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001ad2:	e7bc      	b.n	8001a4e <HAL_TIM_PWM_Start+0x22>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001ada:	e7b8      	b.n	8001a4e <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 8001adc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ade:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ae2:	645a      	str	r2, [r3, #68]	; 0x44
 8001ae4:	e7bc      	b.n	8001a60 <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aec:	2a06      	cmp	r2, #6
 8001aee:	d007      	beq.n	8001b00 <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	f042 0201 	orr.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001af8:	2000      	movs	r0, #0
 8001afa:	e000      	b.n	8001afe <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 8001afc:	2001      	movs	r0, #1
}
 8001afe:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8001b00:	2000      	movs	r0, #0
 8001b02:	e7fc      	b.n	8001afe <HAL_TIM_PWM_Start+0xd2>
 8001b04:	40012c00 	.word	0x40012c00

08001b08 <HAL_TIM_IC_Start>:
{
 8001b08:	b510      	push	{r4, lr}
 8001b0a:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	bb79      	cbnz	r1, 8001b70 <HAL_TIM_IC_Start+0x68>
 8001b10:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8001b14:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d13a      	bne.n	8001b90 <HAL_TIM_IC_Start+0x88>
 8001b1a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8001b1e:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001b20:	2801      	cmp	r0, #1
 8001b22:	d170      	bne.n	8001c06 <HAL_TIM_IC_Start+0xfe>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001b24:	2a01      	cmp	r2, #1
 8001b26:	d16f      	bne.n	8001c08 <HAL_TIM_IC_Start+0x100>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d141      	bne.n	8001bb0 <HAL_TIM_IC_Start+0xa8>
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d14c      	bne.n	8001bd0 <HAL_TIM_IC_Start+0xc8>
 8001b36:	2202      	movs	r2, #2
 8001b38:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	4619      	mov	r1, r3
 8001b40:	6820      	ldr	r0, [r4, #0]
 8001b42:	f7ff fef3 	bl	800192c <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b46:	6823      	ldr	r3, [r4, #0]
 8001b48:	4a31      	ldr	r2, [pc, #196]	; (8001c10 <HAL_TIM_IC_Start+0x108>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d050      	beq.n	8001bf0 <HAL_TIM_IC_Start+0xe8>
 8001b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b52:	d04d      	beq.n	8001bf0 <HAL_TIM_IC_Start+0xe8>
 8001b54:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d049      	beq.n	8001bf0 <HAL_TIM_IC_Start+0xe8>
 8001b5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d045      	beq.n	8001bf0 <HAL_TIM_IC_Start+0xe8>
    __HAL_TIM_ENABLE(htim);
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	f042 0201 	orr.w	r2, r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	e04b      	b.n	8001c08 <HAL_TIM_IC_Start+0x100>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001b70:	2904      	cmp	r1, #4
 8001b72:	d005      	beq.n	8001b80 <HAL_TIM_IC_Start+0x78>
 8001b74:	2908      	cmp	r1, #8
 8001b76:	d007      	beq.n	8001b88 <HAL_TIM_IC_Start+0x80>
 8001b78:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 8001b7c:	b2c0      	uxtb	r0, r0
 8001b7e:	e7ca      	b.n	8001b16 <HAL_TIM_IC_Start+0xe>
 8001b80:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8001b84:	b2c0      	uxtb	r0, r0
 8001b86:	e7c6      	b.n	8001b16 <HAL_TIM_IC_Start+0xe>
 8001b88:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8001b8c:	b2c0      	uxtb	r0, r0
 8001b8e:	e7c2      	b.n	8001b16 <HAL_TIM_IC_Start+0xe>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d005      	beq.n	8001ba0 <HAL_TIM_IC_Start+0x98>
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d007      	beq.n	8001ba8 <HAL_TIM_IC_Start+0xa0>
 8001b98:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	e7bf      	b.n	8001b20 <HAL_TIM_IC_Start+0x18>
 8001ba0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	e7bb      	b.n	8001b20 <HAL_TIM_IC_Start+0x18>
 8001ba8:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	e7b7      	b.n	8001b20 <HAL_TIM_IC_Start+0x18>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d005      	beq.n	8001bc0 <HAL_TIM_IC_Start+0xb8>
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d007      	beq.n	8001bc8 <HAL_TIM_IC_Start+0xc0>
 8001bb8:	2202      	movs	r2, #2
 8001bba:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
 8001bbe:	e7b8      	b.n	8001b32 <HAL_TIM_IC_Start+0x2a>
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
 8001bc6:	e7b4      	b.n	8001b32 <HAL_TIM_IC_Start+0x2a>
 8001bc8:	2202      	movs	r2, #2
 8001bca:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 8001bce:	e7b0      	b.n	8001b32 <HAL_TIM_IC_Start+0x2a>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d005      	beq.n	8001be0 <HAL_TIM_IC_Start+0xd8>
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d007      	beq.n	8001be8 <HAL_TIM_IC_Start+0xe0>
 8001bd8:	2202      	movs	r2, #2
 8001bda:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001bde:	e7ad      	b.n	8001b3c <HAL_TIM_IC_Start+0x34>
 8001be0:	2202      	movs	r2, #2
 8001be2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001be6:	e7a9      	b.n	8001b3c <HAL_TIM_IC_Start+0x34>
 8001be8:	2202      	movs	r2, #2
 8001bea:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8001bee:	e7a5      	b.n	8001b3c <HAL_TIM_IC_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bf6:	2a06      	cmp	r2, #6
 8001bf8:	d007      	beq.n	8001c0a <HAL_TIM_IC_Start+0x102>
      __HAL_TIM_ENABLE(htim);
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	f042 0201 	orr.w	r2, r2, #1
 8001c00:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001c02:	2000      	movs	r0, #0
 8001c04:	e000      	b.n	8001c08 <HAL_TIM_IC_Start+0x100>
    return HAL_ERROR;
 8001c06:	2001      	movs	r0, #1
}
 8001c08:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	e7fc      	b.n	8001c08 <HAL_TIM_IC_Start+0x100>
 8001c0e:	bf00      	nop
 8001c10:	40012c00 	.word	0x40012c00

08001c14 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8001c14:	b410      	push	{r4}
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001c16:	f001 011f 	and.w	r1, r1, #31
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8001c20:	6a03      	ldr	r3, [r0, #32]
 8001c22:	ea23 0304 	bic.w	r3, r3, r4
 8001c26:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001c28:	6a03      	ldr	r3, [r0, #32]
 8001c2a:	fa02 f101 	lsl.w	r1, r2, r1
 8001c2e:	430b      	orrs	r3, r1
 8001c30:	6203      	str	r3, [r0, #32]
}
 8001c32:	bc10      	pop	{r4}
 8001c34:	4770      	bx	lr
	...

08001c38 <HAL_TIMEx_OCN_Start>:
{
 8001c38:	b510      	push	{r4, lr}
 8001c3a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c3c:	4608      	mov	r0, r1
 8001c3e:	bb59      	cbnz	r1, 8001c98 <HAL_TIMEx_OCN_Start+0x60>
 8001c40:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	3b01      	subs	r3, #1
 8001c48:	bf18      	it	ne
 8001c4a:	2301      	movne	r3, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d157      	bne.n	8001d00 <HAL_TIMEx_OCN_Start+0xc8>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c50:	2800      	cmp	r0, #0
 8001c52:	d13a      	bne.n	8001cca <HAL_TIMEx_OCN_Start+0x92>
 8001c54:	2302      	movs	r3, #2
 8001c56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	4601      	mov	r1, r0
 8001c5e:	6820      	ldr	r0, [r4, #0]
 8001c60:	f7ff ffd8 	bl	8001c14 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8001c64:	6822      	ldr	r2, [r4, #0]
 8001c66:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8001c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c6c:	6453      	str	r3, [r2, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c6e:	6823      	ldr	r3, [r4, #0]
 8001c70:	4a25      	ldr	r2, [pc, #148]	; (8001d08 <HAL_TIMEx_OCN_Start+0xd0>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d039      	beq.n	8001cea <HAL_TIMEx_OCN_Start+0xb2>
 8001c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7a:	d036      	beq.n	8001cea <HAL_TIMEx_OCN_Start+0xb2>
 8001c7c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d032      	beq.n	8001cea <HAL_TIMEx_OCN_Start+0xb2>
 8001c84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d02e      	beq.n	8001cea <HAL_TIMEx_OCN_Start+0xb2>
    __HAL_TIM_ENABLE(htim);
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	f042 0201 	orr.w	r2, r2, #1
 8001c92:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001c94:	2000      	movs	r0, #0
 8001c96:	e034      	b.n	8001d02 <HAL_TIMEx_OCN_Start+0xca>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c98:	2904      	cmp	r1, #4
 8001c9a:	d008      	beq.n	8001cae <HAL_TIMEx_OCN_Start+0x76>
 8001c9c:	2908      	cmp	r1, #8
 8001c9e:	d00d      	beq.n	8001cbc <HAL_TIMEx_OCN_Start+0x84>
 8001ca0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	bf18      	it	ne
 8001caa:	2301      	movne	r3, #1
 8001cac:	e7ce      	b.n	8001c4c <HAL_TIMEx_OCN_Start+0x14>
 8001cae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	bf18      	it	ne
 8001cb8:	2301      	movne	r3, #1
 8001cba:	e7c7      	b.n	8001c4c <HAL_TIMEx_OCN_Start+0x14>
 8001cbc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	bf18      	it	ne
 8001cc6:	2301      	movne	r3, #1
 8001cc8:	e7c0      	b.n	8001c4c <HAL_TIMEx_OCN_Start+0x14>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001cca:	2804      	cmp	r0, #4
 8001ccc:	d005      	beq.n	8001cda <HAL_TIMEx_OCN_Start+0xa2>
 8001cce:	2808      	cmp	r0, #8
 8001cd0:	d007      	beq.n	8001ce2 <HAL_TIMEx_OCN_Start+0xaa>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001cd8:	e7bf      	b.n	8001c5a <HAL_TIMEx_OCN_Start+0x22>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ce0:	e7bb      	b.n	8001c5a <HAL_TIMEx_OCN_Start+0x22>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001ce8:	e7b7      	b.n	8001c5a <HAL_TIMEx_OCN_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cf0:	2a06      	cmp	r2, #6
 8001cf2:	d007      	beq.n	8001d04 <HAL_TIMEx_OCN_Start+0xcc>
      __HAL_TIM_ENABLE(htim);
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	f042 0201 	orr.w	r2, r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	e000      	b.n	8001d02 <HAL_TIMEx_OCN_Start+0xca>
    return HAL_ERROR;
 8001d00:	2001      	movs	r0, #1
}
 8001d02:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8001d04:	2000      	movs	r0, #0
 8001d06:	e7fc      	b.n	8001d02 <HAL_TIMEx_OCN_Start+0xca>
 8001d08:	40012c00 	.word	0x40012c00

08001d0c <HAL_TIMEx_PWMN_Start>:
{
 8001d0c:	b510      	push	{r4, lr}
 8001d0e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d10:	4608      	mov	r0, r1
 8001d12:	bb59      	cbnz	r1, 8001d6c <HAL_TIMEx_PWMN_Start+0x60>
 8001d14:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	bf18      	it	ne
 8001d1e:	2301      	movne	r3, #1
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d157      	bne.n	8001dd4 <HAL_TIMEx_PWMN_Start+0xc8>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d24:	2800      	cmp	r0, #0
 8001d26:	d13a      	bne.n	8001d9e <HAL_TIMEx_PWMN_Start+0x92>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8001d2e:	2204      	movs	r2, #4
 8001d30:	4601      	mov	r1, r0
 8001d32:	6820      	ldr	r0, [r4, #0]
 8001d34:	f7ff ff6e 	bl	8001c14 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8001d38:	6822      	ldr	r2, [r4, #0]
 8001d3a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8001d3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d40:	6453      	str	r3, [r2, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d42:	6823      	ldr	r3, [r4, #0]
 8001d44:	4a25      	ldr	r2, [pc, #148]	; (8001ddc <HAL_TIMEx_PWMN_Start+0xd0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d039      	beq.n	8001dbe <HAL_TIMEx_PWMN_Start+0xb2>
 8001d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d4e:	d036      	beq.n	8001dbe <HAL_TIMEx_PWMN_Start+0xb2>
 8001d50:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d032      	beq.n	8001dbe <HAL_TIMEx_PWMN_Start+0xb2>
 8001d58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d02e      	beq.n	8001dbe <HAL_TIMEx_PWMN_Start+0xb2>
    __HAL_TIM_ENABLE(htim);
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	f042 0201 	orr.w	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001d68:	2000      	movs	r0, #0
 8001d6a:	e034      	b.n	8001dd6 <HAL_TIMEx_PWMN_Start+0xca>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d6c:	2904      	cmp	r1, #4
 8001d6e:	d008      	beq.n	8001d82 <HAL_TIMEx_PWMN_Start+0x76>
 8001d70:	2908      	cmp	r1, #8
 8001d72:	d00d      	beq.n	8001d90 <HAL_TIMEx_PWMN_Start+0x84>
 8001d74:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	bf18      	it	ne
 8001d7e:	2301      	movne	r3, #1
 8001d80:	e7ce      	b.n	8001d20 <HAL_TIMEx_PWMN_Start+0x14>
 8001d82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	bf18      	it	ne
 8001d8c:	2301      	movne	r3, #1
 8001d8e:	e7c7      	b.n	8001d20 <HAL_TIMEx_PWMN_Start+0x14>
 8001d90:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	3b01      	subs	r3, #1
 8001d98:	bf18      	it	ne
 8001d9a:	2301      	movne	r3, #1
 8001d9c:	e7c0      	b.n	8001d20 <HAL_TIMEx_PWMN_Start+0x14>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d9e:	2804      	cmp	r0, #4
 8001da0:	d005      	beq.n	8001dae <HAL_TIMEx_PWMN_Start+0xa2>
 8001da2:	2808      	cmp	r0, #8
 8001da4:	d007      	beq.n	8001db6 <HAL_TIMEx_PWMN_Start+0xaa>
 8001da6:	2302      	movs	r3, #2
 8001da8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001dac:	e7bf      	b.n	8001d2e <HAL_TIMEx_PWMN_Start+0x22>
 8001dae:	2302      	movs	r3, #2
 8001db0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001db4:	e7bb      	b.n	8001d2e <HAL_TIMEx_PWMN_Start+0x22>
 8001db6:	2302      	movs	r3, #2
 8001db8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001dbc:	e7b7      	b.n	8001d2e <HAL_TIMEx_PWMN_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dc4:	2a06      	cmp	r2, #6
 8001dc6:	d007      	beq.n	8001dd8 <HAL_TIMEx_PWMN_Start+0xcc>
      __HAL_TIM_ENABLE(htim);
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	f042 0201 	orr.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	e000      	b.n	8001dd6 <HAL_TIMEx_PWMN_Start+0xca>
    return HAL_ERROR;
 8001dd4:	2001      	movs	r0, #1
}
 8001dd6:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8001dd8:	2000      	movs	r0, #0
 8001dda:	e7fc      	b.n	8001dd6 <HAL_TIMEx_PWMN_Start+0xca>
 8001ddc:	40012c00 	.word	0x40012c00

08001de0 <HAL_TIMEx_CommutCallback>:
}
 8001de0:	4770      	bx	lr

08001de2 <HAL_TIMEx_BreakCallback>:
}
 8001de2:	4770      	bx	lr

08001de4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001de4:	6802      	ldr	r2, [r0, #0]
 8001de6:	68d3      	ldr	r3, [r2, #12]
 8001de8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001dec:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dee:	6802      	ldr	r2, [r0, #0]
 8001df0:	6953      	ldr	r3, [r2, #20]
 8001df2:	f023 0301 	bic.w	r3, r3, #1
 8001df6:	6153      	str	r3, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001df8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d005      	beq.n	8001e0a <UART_EndRxTransfer+0x26>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001dfe:	2320      	movs	r3, #32
 8001e00:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e04:	2300      	movs	r3, #0
 8001e06:	6303      	str	r3, [r0, #48]	; 0x30
}
 8001e08:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e0a:	6802      	ldr	r2, [r0, #0]
 8001e0c:	68d3      	ldr	r3, [r2, #12]
 8001e0e:	f023 0310 	bic.w	r3, r3, #16
 8001e12:	60d3      	str	r3, [r2, #12]
 8001e14:	e7f3      	b.n	8001dfe <UART_EndRxTransfer+0x1a>

08001e16 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001e16:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b21      	cmp	r3, #33	; 0x21
 8001e1e:	d001      	beq.n	8001e24 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001e20:	2002      	movs	r0, #2
  }
}
 8001e22:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e24:	6883      	ldr	r3, [r0, #8]
 8001e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e2a:	d017      	beq.n	8001e5c <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001e2c:	6a03      	ldr	r3, [r0, #32]
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	6202      	str	r2, [r0, #32]
 8001e32:	781a      	ldrb	r2, [r3, #0]
 8001e34:	6803      	ldr	r3, [r0, #0]
 8001e36:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8001e38:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	84c3      	strh	r3, [r0, #38]	; 0x26
 8001e42:	b94b      	cbnz	r3, 8001e58 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001e44:	6802      	ldr	r2, [r0, #0]
 8001e46:	68d3      	ldr	r3, [r2, #12]
 8001e48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e4c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001e4e:	6802      	ldr	r2, [r0, #0]
 8001e50:	68d3      	ldr	r3, [r2, #12]
 8001e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e56:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8001e58:	2000      	movs	r0, #0
 8001e5a:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e5c:	6903      	ldr	r3, [r0, #16]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1e4      	bne.n	8001e2c <UART_Transmit_IT+0x16>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001e62:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	6802      	ldr	r2, [r0, #0]
 8001e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e6c:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8001e6e:	6a03      	ldr	r3, [r0, #32]
 8001e70:	3302      	adds	r3, #2
 8001e72:	6203      	str	r3, [r0, #32]
 8001e74:	e7e0      	b.n	8001e38 <UART_Transmit_IT+0x22>
	...

08001e78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e78:	b510      	push	{r4, lr}
 8001e7a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e7c:	6802      	ldr	r2, [r0, #0]
 8001e7e:	6913      	ldr	r3, [r2, #16]
 8001e80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e84:	68c1      	ldr	r1, [r0, #12]
 8001e86:	430b      	orrs	r3, r1
 8001e88:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e8a:	6883      	ldr	r3, [r0, #8]
 8001e8c:	6902      	ldr	r2, [r0, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	6942      	ldr	r2, [r0, #20]
 8001e92:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001e94:	6801      	ldr	r1, [r0, #0]
 8001e96:	68cb      	ldr	r3, [r1, #12]
 8001e98:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001e9c:	f023 030c 	bic.w	r3, r3, #12
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ea4:	6802      	ldr	r2, [r0, #0]
 8001ea6:	6953      	ldr	r3, [r2, #20]
 8001ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eac:	6981      	ldr	r1, [r0, #24]
 8001eae:	430b      	orrs	r3, r1
 8001eb0:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8001eb2:	6802      	ldr	r2, [r0, #0]
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <UART_SetConfig+0x88>)
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d01f      	beq.n	8001efa <UART_SetConfig+0x82>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001eba:	f7ff fb91 	bl	80015e0 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ebe:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8001ec2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ec6:	6862      	ldr	r2, [r4, #4]
 8001ec8:	0092      	lsls	r2, r2, #2
 8001eca:	fbb3 f2f2 	udiv	r2, r3, r2
 8001ece:	480d      	ldr	r0, [pc, #52]	; (8001f04 <UART_SetConfig+0x8c>)
 8001ed0:	fba0 3102 	umull	r3, r1, r0, r2
 8001ed4:	0949      	lsrs	r1, r1, #5
 8001ed6:	2364      	movs	r3, #100	; 0x64
 8001ed8:	fb03 2311 	mls	r3, r3, r1, r2
 8001edc:	011b      	lsls	r3, r3, #4
 8001ede:	3332      	adds	r3, #50	; 0x32
 8001ee0:	fba0 2303 	umull	r2, r3, r0, r3
 8001ee4:	095b      	lsrs	r3, r3, #5
 8001ee6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001eea:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	6821      	ldr	r1, [r4, #0]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8001ef8:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8001efa:	f7ff fb81 	bl	8001600 <HAL_RCC_GetPCLK2Freq>
 8001efe:	e7de      	b.n	8001ebe <UART_SetConfig+0x46>
 8001f00:	40013800 	.word	0x40013800
 8001f04:	51eb851f 	.word	0x51eb851f

08001f08 <HAL_UART_MspInit>:
}
 8001f08:	4770      	bx	lr

08001f0a <HAL_UART_Init>:
  if (huart == NULL)
 8001f0a:	b358      	cbz	r0, 8001f64 <HAL_UART_Init+0x5a>
{
 8001f0c:	b510      	push	{r4, lr}
 8001f0e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001f10:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001f14:	b30b      	cbz	r3, 8001f5a <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001f16:	2324      	movs	r3, #36	; 0x24
 8001f18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8001f1c:	6822      	ldr	r2, [r4, #0]
 8001f1e:	68d3      	ldr	r3, [r2, #12]
 8001f20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f24:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001f26:	4620      	mov	r0, r4
 8001f28:	f7ff ffa6 	bl	8001e78 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f2c:	6822      	ldr	r2, [r4, #0]
 8001f2e:	6913      	ldr	r3, [r2, #16]
 8001f30:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001f34:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f36:	6822      	ldr	r2, [r4, #0]
 8001f38:	6953      	ldr	r3, [r2, #20]
 8001f3a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001f3e:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001f40:	6822      	ldr	r2, [r4, #0]
 8001f42:	68d3      	ldr	r3, [r2, #12]
 8001f44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f48:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f4e:	2320      	movs	r3, #32
 8001f50:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f54:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8001f58:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001f5a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8001f5e:	f7ff ffd3 	bl	8001f08 <HAL_UART_MspInit>
 8001f62:	e7d8      	b.n	8001f16 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001f64:	2001      	movs	r0, #1
}
 8001f66:	4770      	bx	lr

08001f68 <HAL_HalfDuplex_Init>:
  if (huart == NULL)
 8001f68:	2800      	cmp	r0, #0
 8001f6a:	d030      	beq.n	8001fce <HAL_HalfDuplex_Init+0x66>
{
 8001f6c:	b510      	push	{r4, lr}
 8001f6e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001f70:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001f74:	b333      	cbz	r3, 8001fc4 <HAL_HalfDuplex_Init+0x5c>
  huart->gState = HAL_UART_STATE_BUSY;
 8001f76:	2324      	movs	r3, #36	; 0x24
 8001f78:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8001f7c:	6822      	ldr	r2, [r4, #0]
 8001f7e:	68d3      	ldr	r3, [r2, #12]
 8001f80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f84:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001f86:	4620      	mov	r0, r4
 8001f88:	f7ff ff76 	bl	8001e78 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f8c:	6822      	ldr	r2, [r4, #0]
 8001f8e:	6913      	ldr	r3, [r2, #16]
 8001f90:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001f94:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8001f96:	6822      	ldr	r2, [r4, #0]
 8001f98:	6953      	ldr	r3, [r2, #20]
 8001f9a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001f9e:	6153      	str	r3, [r2, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001fa0:	6822      	ldr	r2, [r4, #0]
 8001fa2:	6953      	ldr	r3, [r2, #20]
 8001fa4:	f043 0308 	orr.w	r3, r3, #8
 8001fa8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001faa:	6822      	ldr	r2, [r4, #0]
 8001fac:	68d3      	ldr	r3, [r2, #12]
 8001fae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fb2:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001fb8:	2320      	movs	r3, #32
 8001fba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001fbe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8001fc2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001fc4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8001fc8:	f7ff ff9e 	bl	8001f08 <HAL_UART_MspInit>
 8001fcc:	e7d3      	b.n	8001f76 <HAL_HalfDuplex_Init+0xe>
    return HAL_ERROR;
 8001fce:	2001      	movs	r0, #1
}
 8001fd0:	4770      	bx	lr

08001fd2 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8001fd2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b20      	cmp	r3, #32
 8001fda:	d116      	bne.n	800200a <HAL_UART_Transmit_IT+0x38>
    if ((pData == NULL) || (Size == 0U))
 8001fdc:	b1b9      	cbz	r1, 800200e <HAL_UART_Transmit_IT+0x3c>
 8001fde:	b1c2      	cbz	r2, 8002012 <HAL_UART_Transmit_IT+0x40>
    __HAL_LOCK(huart);
 8001fe0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d016      	beq.n	8002016 <HAL_UART_Transmit_IT+0x44>
    huart->pTxBuffPtr = pData;
 8001fe8:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8001fea:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fec:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ff2:	2221      	movs	r2, #33	; 0x21
 8001ff4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    __HAL_UNLOCK(huart);
 8001ff8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001ffc:	6801      	ldr	r1, [r0, #0]
 8001ffe:	68ca      	ldr	r2, [r1, #12]
 8002000:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002004:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8002006:	4618      	mov	r0, r3
 8002008:	4770      	bx	lr
    return HAL_BUSY;
 800200a:	2002      	movs	r0, #2
 800200c:	4770      	bx	lr
      return HAL_ERROR;
 800200e:	2001      	movs	r0, #1
 8002010:	4770      	bx	lr
 8002012:	2001      	movs	r0, #1
 8002014:	4770      	bx	lr
    __HAL_LOCK(huart);
 8002016:	2002      	movs	r0, #2
}
 8002018:	4770      	bx	lr

0800201a <UART_EndTransmit_IT>:
{
 800201a:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800201c:	6801      	ldr	r1, [r0, #0]
 800201e:	68ca      	ldr	r2, [r1, #12]
 8002020:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002024:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002026:	2220      	movs	r2, #32
 8002028:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 800202c:	f001 fe79 	bl	8003d22 <HAL_UART_TxCpltCallback>
}
 8002030:	2000      	movs	r0, #0
 8002032:	bd08      	pop	{r3, pc}

08002034 <UART_DMAAbortOnError>:
{
 8002034:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002036:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002038:	2300      	movs	r3, #0
 800203a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800203c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800203e:	f001 fe77 	bl	8003d30 <HAL_UART_ErrorCallback>
}
 8002042:	bd08      	pop	{r3, pc}

08002044 <HAL_UARTEx_RxEventCallback>:
}
 8002044:	4770      	bx	lr

08002046 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002046:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b22      	cmp	r3, #34	; 0x22
 800204e:	d160      	bne.n	8002112 <UART_Receive_IT+0xcc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002050:	6883      	ldr	r3, [r0, #8]
 8002052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002056:	d046      	beq.n	80020e6 <UART_Receive_IT+0xa0>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002058:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800205a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800205e:	d004      	beq.n	800206a <UART_Receive_IT+0x24>
 8002060:	2b00      	cmp	r3, #0
 8002062:	d14d      	bne.n	8002100 <UART_Receive_IT+0xba>
 8002064:	6903      	ldr	r3, [r0, #16]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d14a      	bne.n	8002100 <UART_Receive_IT+0xba>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800206a:	6803      	ldr	r3, [r0, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8002070:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002072:	3301      	adds	r3, #1
 8002074:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8002076:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8002078:	b29b      	uxth	r3, r3
 800207a:	3b01      	subs	r3, #1
 800207c:	b29b      	uxth	r3, r3
 800207e:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8002080:	2b00      	cmp	r3, #0
 8002082:	d148      	bne.n	8002116 <UART_Receive_IT+0xd0>
{
 8002084:	b500      	push	{lr}
 8002086:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002088:	6802      	ldr	r2, [r0, #0]
 800208a:	68d3      	ldr	r3, [r2, #12]
 800208c:	f023 0320 	bic.w	r3, r3, #32
 8002090:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002092:	6802      	ldr	r2, [r0, #0]
 8002094:	68d3      	ldr	r3, [r2, #12]
 8002096:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800209a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800209c:	6802      	ldr	r2, [r0, #0]
 800209e:	6953      	ldr	r3, [r2, #20]
 80020a0:	f023 0301 	bic.w	r3, r3, #1
 80020a4:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80020a6:	2320      	movs	r3, #32
 80020a8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d12c      	bne.n	800210c <UART_Receive_IT+0xc6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020b2:	2300      	movs	r3, #0
 80020b4:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020b6:	6802      	ldr	r2, [r0, #0]
 80020b8:	68d3      	ldr	r3, [r2, #12]
 80020ba:	f023 0310 	bic.w	r3, r3, #16
 80020be:	60d3      	str	r3, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80020c0:	6803      	ldr	r3, [r0, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	f012 0f10 	tst.w	r2, #16
 80020c8:	d006      	beq.n	80020d8 <UART_Receive_IT+0x92>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80020ca:	2200      	movs	r2, #0
 80020cc:	9201      	str	r2, [sp, #4]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	9201      	str	r2, [sp, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80020d8:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80020da:	f7ff ffb3 	bl	8002044 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 80020de:	2000      	movs	r0, #0
}
 80020e0:	b003      	add	sp, #12
 80020e2:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020e6:	6902      	ldr	r2, [r0, #16]
 80020e8:	2a00      	cmp	r2, #0
 80020ea:	d1b5      	bne.n	8002058 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80020ec:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80020ee:	6803      	ldr	r3, [r0, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020f6:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80020f8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80020fa:	3302      	adds	r3, #2
 80020fc:	6283      	str	r3, [r0, #40]	; 0x28
 80020fe:	e7ba      	b.n	8002076 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002100:	6803      	ldr	r3, [r0, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002108:	7013      	strb	r3, [r2, #0]
 800210a:	e7b1      	b.n	8002070 <UART_Receive_IT+0x2a>
       HAL_UART_RxCpltCallback(huart);
 800210c:	f001 fe02 	bl	8003d14 <HAL_UART_RxCpltCallback>
 8002110:	e7e5      	b.n	80020de <UART_Receive_IT+0x98>
    return HAL_BUSY;
 8002112:	2002      	movs	r0, #2
 8002114:	4770      	bx	lr
    return HAL_OK;
 8002116:	2000      	movs	r0, #0
}
 8002118:	4770      	bx	lr
	...

0800211c <HAL_UART_IRQHandler>:
{
 800211c:	b530      	push	{r4, r5, lr}
 800211e:	b083      	sub	sp, #12
 8002120:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002122:	6802      	ldr	r2, [r0, #0]
 8002124:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002126:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002128:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 800212a:	f013 050f 	ands.w	r5, r3, #15
 800212e:	d105      	bne.n	800213c <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002130:	f013 0f20 	tst.w	r3, #32
 8002134:	d002      	beq.n	800213c <HAL_UART_IRQHandler+0x20>
 8002136:	f010 0f20 	tst.w	r0, #32
 800213a:	d119      	bne.n	8002170 <HAL_UART_IRQHandler+0x54>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800213c:	b12d      	cbz	r5, 800214a <HAL_UART_IRQHandler+0x2e>
 800213e:	f011 0101 	ands.w	r1, r1, #1
 8002142:	d119      	bne.n	8002178 <HAL_UART_IRQHandler+0x5c>
 8002144:	f410 7f90 	tst.w	r0, #288	; 0x120
 8002148:	d116      	bne.n	8002178 <HAL_UART_IRQHandler+0x5c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800214a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800214c:	2901      	cmp	r1, #1
 800214e:	d075      	beq.n	800223c <HAL_UART_IRQHandler+0x120>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002150:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002154:	d003      	beq.n	800215e <HAL_UART_IRQHandler+0x42>
 8002156:	f010 0f80 	tst.w	r0, #128	; 0x80
 800215a:	f040 80d7 	bne.w	800230c <HAL_UART_IRQHandler+0x1f0>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800215e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002162:	d003      	beq.n	800216c <HAL_UART_IRQHandler+0x50>
 8002164:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002168:	f040 80d4 	bne.w	8002314 <HAL_UART_IRQHandler+0x1f8>
}
 800216c:	b003      	add	sp, #12
 800216e:	bd30      	pop	{r4, r5, pc}
      UART_Receive_IT(huart);
 8002170:	4620      	mov	r0, r4
 8002172:	f7ff ff68 	bl	8002046 <UART_Receive_IT>
      return;
 8002176:	e7f9      	b.n	800216c <HAL_UART_IRQHandler+0x50>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002178:	f013 0f01 	tst.w	r3, #1
 800217c:	d006      	beq.n	800218c <HAL_UART_IRQHandler+0x70>
 800217e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8002182:	d003      	beq.n	800218c <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002184:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002186:	f042 0201 	orr.w	r2, r2, #1
 800218a:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800218c:	f013 0f04 	tst.w	r3, #4
 8002190:	d004      	beq.n	800219c <HAL_UART_IRQHandler+0x80>
 8002192:	b119      	cbz	r1, 800219c <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002194:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002196:	f042 0202 	orr.w	r2, r2, #2
 800219a:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800219c:	f013 0f02 	tst.w	r3, #2
 80021a0:	d004      	beq.n	80021ac <HAL_UART_IRQHandler+0x90>
 80021a2:	b119      	cbz	r1, 80021ac <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80021a4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80021a6:	f042 0204 	orr.w	r2, r2, #4
 80021aa:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80021ac:	f013 0f08 	tst.w	r3, #8
 80021b0:	d007      	beq.n	80021c2 <HAL_UART_IRQHandler+0xa6>
 80021b2:	f010 0f20 	tst.w	r0, #32
 80021b6:	d100      	bne.n	80021ba <HAL_UART_IRQHandler+0x9e>
 80021b8:	b119      	cbz	r1, 80021c2 <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80021ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80021bc:	f042 0208 	orr.w	r2, r2, #8
 80021c0:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80021c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80021c4:	2a00      	cmp	r2, #0
 80021c6:	d0d1      	beq.n	800216c <HAL_UART_IRQHandler+0x50>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021c8:	f013 0f20 	tst.w	r3, #32
 80021cc:	d002      	beq.n	80021d4 <HAL_UART_IRQHandler+0xb8>
 80021ce:	f010 0f20 	tst.w	r0, #32
 80021d2:	d121      	bne.n	8002218 <HAL_UART_IRQHandler+0xfc>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80021d4:	6823      	ldr	r3, [r4, #0]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80021dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80021de:	f012 0f08 	tst.w	r2, #8
 80021e2:	d100      	bne.n	80021e6 <HAL_UART_IRQHandler+0xca>
 80021e4:	b323      	cbz	r3, 8002230 <HAL_UART_IRQHandler+0x114>
        UART_EndRxTransfer(huart);
 80021e6:	4620      	mov	r0, r4
 80021e8:	f7ff fdfc 	bl	8001de4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021ec:	6823      	ldr	r3, [r4, #0]
 80021ee:	695a      	ldr	r2, [r3, #20]
 80021f0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80021f4:	d018      	beq.n	8002228 <HAL_UART_IRQHandler+0x10c>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021f6:	695a      	ldr	r2, [r3, #20]
 80021f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021fc:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80021fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002200:	b173      	cbz	r3, 8002220 <HAL_UART_IRQHandler+0x104>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002202:	4a46      	ldr	r2, [pc, #280]	; (800231c <HAL_UART_IRQHandler+0x200>)
 8002204:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002206:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002208:	f7fe fd5a 	bl	8000cc0 <HAL_DMA_Abort_IT>
 800220c:	2800      	cmp	r0, #0
 800220e:	d0ad      	beq.n	800216c <HAL_UART_IRQHandler+0x50>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002210:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002212:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002214:	4798      	blx	r3
 8002216:	e7a9      	b.n	800216c <HAL_UART_IRQHandler+0x50>
        UART_Receive_IT(huart);
 8002218:	4620      	mov	r0, r4
 800221a:	f7ff ff14 	bl	8002046 <UART_Receive_IT>
 800221e:	e7d9      	b.n	80021d4 <HAL_UART_IRQHandler+0xb8>
            HAL_UART_ErrorCallback(huart);
 8002220:	4620      	mov	r0, r4
 8002222:	f001 fd85 	bl	8003d30 <HAL_UART_ErrorCallback>
 8002226:	e7a1      	b.n	800216c <HAL_UART_IRQHandler+0x50>
          HAL_UART_ErrorCallback(huart);
 8002228:	4620      	mov	r0, r4
 800222a:	f001 fd81 	bl	8003d30 <HAL_UART_ErrorCallback>
 800222e:	e79d      	b.n	800216c <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 8002230:	4620      	mov	r0, r4
 8002232:	f001 fd7d 	bl	8003d30 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002236:	2300      	movs	r3, #0
 8002238:	6423      	str	r3, [r4, #64]	; 0x40
    return;
 800223a:	e797      	b.n	800216c <HAL_UART_IRQHandler+0x50>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800223c:	f013 0f10 	tst.w	r3, #16
 8002240:	d086      	beq.n	8002150 <HAL_UART_IRQHandler+0x34>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002242:	f010 0f10 	tst.w	r0, #16
 8002246:	d083      	beq.n	8002150 <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002248:	2300      	movs	r3, #0
 800224a:	9301      	str	r3, [sp, #4]
 800224c:	6813      	ldr	r3, [r2, #0]
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	6853      	ldr	r3, [r2, #4]
 8002252:	9301      	str	r3, [sp, #4]
 8002254:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002256:	6953      	ldr	r3, [r2, #20]
 8002258:	f013 0f40 	tst.w	r3, #64	; 0x40
 800225c:	d032      	beq.n	80022c4 <HAL_UART_IRQHandler+0x1a8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800225e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002260:	680b      	ldr	r3, [r1, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8002266:	2b00      	cmp	r3, #0
 8002268:	d080      	beq.n	800216c <HAL_UART_IRQHandler+0x50>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800226a:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 800226c:	4298      	cmp	r0, r3
 800226e:	f67f af7d 	bls.w	800216c <HAL_UART_IRQHandler+0x50>
        huart->RxXferCount = nb_remaining_rx_data;
 8002272:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002274:	698b      	ldr	r3, [r1, #24]
 8002276:	2b20      	cmp	r3, #32
 8002278:	d108      	bne.n	800228c <HAL_UART_IRQHandler+0x170>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800227a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800227c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800227e:	b29b      	uxth	r3, r3
 8002280:	1ac9      	subs	r1, r1, r3
 8002282:	b289      	uxth	r1, r1
 8002284:	4620      	mov	r0, r4
 8002286:	f7ff fedd 	bl	8002044 <HAL_UARTEx_RxEventCallback>
      return;
 800228a:	e76f      	b.n	800216c <HAL_UART_IRQHandler+0x50>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800228c:	68d3      	ldr	r3, [r2, #12]
 800228e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002292:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002294:	6822      	ldr	r2, [r4, #0]
 8002296:	6953      	ldr	r3, [r2, #20]
 8002298:	f023 0301 	bic.w	r3, r3, #1
 800229c:	6153      	str	r3, [r2, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800229e:	6822      	ldr	r2, [r4, #0]
 80022a0:	6953      	ldr	r3, [r2, #20]
 80022a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022a6:	6153      	str	r3, [r2, #20]
          huart->RxState = HAL_UART_STATE_READY;
 80022a8:	2320      	movs	r3, #32
 80022aa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022ae:	2300      	movs	r3, #0
 80022b0:	6323      	str	r3, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022b2:	6822      	ldr	r2, [r4, #0]
 80022b4:	68d3      	ldr	r3, [r2, #12]
 80022b6:	f023 0310 	bic.w	r3, r3, #16
 80022ba:	60d3      	str	r3, [r2, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80022bc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80022be:	f7fe fcdd 	bl	8000c7c <HAL_DMA_Abort>
 80022c2:	e7da      	b.n	800227a <HAL_UART_IRQHandler+0x15e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80022c4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80022c6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	1ac9      	subs	r1, r1, r3
 80022cc:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 80022ce:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f43f af4a 	beq.w	800216c <HAL_UART_IRQHandler+0x50>
          &&(nb_rx_data > 0U) )
 80022d8:	2900      	cmp	r1, #0
 80022da:	f43f af47 	beq.w	800216c <HAL_UART_IRQHandler+0x50>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022de:	68d3      	ldr	r3, [r2, #12]
 80022e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80022e4:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022e6:	6822      	ldr	r2, [r4, #0]
 80022e8:	6953      	ldr	r3, [r2, #20]
 80022ea:	f023 0301 	bic.w	r3, r3, #1
 80022ee:	6153      	str	r3, [r2, #20]
        huart->RxState = HAL_UART_STATE_READY;
 80022f0:	2320      	movs	r3, #32
 80022f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022f6:	2300      	movs	r3, #0
 80022f8:	6323      	str	r3, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022fa:	6822      	ldr	r2, [r4, #0]
 80022fc:	68d3      	ldr	r3, [r2, #12]
 80022fe:	f023 0310 	bic.w	r3, r3, #16
 8002302:	60d3      	str	r3, [r2, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002304:	4620      	mov	r0, r4
 8002306:	f7ff fe9d 	bl	8002044 <HAL_UARTEx_RxEventCallback>
      return;
 800230a:	e72f      	b.n	800216c <HAL_UART_IRQHandler+0x50>
    UART_Transmit_IT(huart);
 800230c:	4620      	mov	r0, r4
 800230e:	f7ff fd82 	bl	8001e16 <UART_Transmit_IT>
    return;
 8002312:	e72b      	b.n	800216c <HAL_UART_IRQHandler+0x50>
    UART_EndTransmit_IT(huart);
 8002314:	4620      	mov	r0, r4
 8002316:	f7ff fe80 	bl	800201a <UART_EndTransmit_IT>
    return;
 800231a:	e727      	b.n	800216c <HAL_UART_IRQHandler+0x50>
 800231c:	08002035 	.word	0x08002035

08002320 <HAL_HalfDuplex_EnableTransmitter>:
  __HAL_LOCK(huart);
 8002320:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002324:	2b01      	cmp	r3, #1
 8002326:	d014      	beq.n	8002352 <HAL_HalfDuplex_EnableTransmitter+0x32>
 8002328:	2301      	movs	r3, #1
 800232a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_BUSY;
 800232e:	2324      	movs	r3, #36	; 0x24
 8002330:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpreg = huart->Instance->CR1;
 8002334:	6802      	ldr	r2, [r0, #0]
 8002336:	68d3      	ldr	r3, [r2, #12]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8002338:	f023 030c 	bic.w	r3, r3, #12
  tmpreg |= (uint32_t)USART_CR1_TE;
 800233c:	f043 0308 	orr.w	r3, r3, #8
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002340:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002342:	2320      	movs	r3, #32
 8002344:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(huart);
 8002348:	2300      	movs	r3, #0
 800234a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800234e:	4618      	mov	r0, r3
 8002350:	4770      	bx	lr
  __HAL_LOCK(huart);
 8002352:	2002      	movs	r0, #2
}
 8002354:	4770      	bx	lr

08002356 <HAL_HalfDuplex_EnableReceiver>:
  __HAL_LOCK(huart);
 8002356:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800235a:	2b01      	cmp	r3, #1
 800235c:	d014      	beq.n	8002388 <HAL_HalfDuplex_EnableReceiver+0x32>
 800235e:	2301      	movs	r3, #1
 8002360:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_BUSY;
 8002364:	2324      	movs	r3, #36	; 0x24
 8002366:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpreg = huart->Instance->CR1;
 800236a:	6802      	ldr	r2, [r0, #0]
 800236c:	68d3      	ldr	r3, [r2, #12]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800236e:	f023 030c 	bic.w	r3, r3, #12
  tmpreg |= (uint32_t)USART_CR1_RE;
 8002372:	f043 0304 	orr.w	r3, r3, #4
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002376:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002378:	2320      	movs	r3, #32
 800237a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(huart);
 800237e:	2300      	movs	r3, #0
 8002380:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002384:	4618      	mov	r0, r3
 8002386:	4770      	bx	lr
  __HAL_LOCK(huart);
 8002388:	2002      	movs	r0, #2
}
 800238a:	4770      	bx	lr

0800238c <HAL_UART_GetState>:
  temp1 = huart->gState;
 800238c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  temp2 = huart->RxState;
 8002390:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
}
 8002394:	4318      	orrs	r0, r3
 8002396:	4770      	bx	lr

08002398 <UART_Start_Receive_IT>:
{
 8002398:	4603      	mov	r3, r0
  huart->pRxBuffPtr = pData;
 800239a:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 800239c:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 800239e:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a0:	2000      	movs	r0, #0
 80023a2:	6418      	str	r0, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023a4:	2222      	movs	r2, #34	; 0x22
 80023a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  __HAL_UNLOCK(huart);
 80023aa:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80023ae:	6819      	ldr	r1, [r3, #0]
 80023b0:	68ca      	ldr	r2, [r1, #12]
 80023b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023b6:	60ca      	str	r2, [r1, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80023b8:	6819      	ldr	r1, [r3, #0]
 80023ba:	694a      	ldr	r2, [r1, #20]
 80023bc:	f042 0201 	orr.w	r2, r2, #1
 80023c0:	614a      	str	r2, [r1, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68d3      	ldr	r3, [r2, #12]
 80023c6:	f043 0320 	orr.w	r3, r3, #32
 80023ca:	60d3      	str	r3, [r2, #12]
}
 80023cc:	4770      	bx	lr

080023ce <HAL_UART_Receive_IT>:
{
 80023ce:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80023d0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b20      	cmp	r3, #32
 80023d8:	d10d      	bne.n	80023f6 <HAL_UART_Receive_IT+0x28>
    if ((pData == NULL) || (Size == 0U))
 80023da:	b171      	cbz	r1, 80023fa <HAL_UART_Receive_IT+0x2c>
 80023dc:	b17a      	cbz	r2, 80023fe <HAL_UART_Receive_IT+0x30>
    __HAL_LOCK(huart);
 80023de:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d00d      	beq.n	8002402 <HAL_UART_Receive_IT+0x34>
 80023e6:	2301      	movs	r3, #1
 80023e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023ec:	2300      	movs	r3, #0
 80023ee:	6303      	str	r3, [r0, #48]	; 0x30
    return(UART_Start_Receive_IT(huart, pData, Size));
 80023f0:	f7ff ffd2 	bl	8002398 <UART_Start_Receive_IT>
 80023f4:	e000      	b.n	80023f8 <HAL_UART_Receive_IT+0x2a>
    return HAL_BUSY;
 80023f6:	2002      	movs	r0, #2
}
 80023f8:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 80023fa:	2001      	movs	r0, #1
 80023fc:	e7fc      	b.n	80023f8 <HAL_UART_Receive_IT+0x2a>
 80023fe:	2001      	movs	r0, #1
 8002400:	e7fa      	b.n	80023f8 <HAL_UART_Receive_IT+0x2a>
    __HAL_LOCK(huart);
 8002402:	2002      	movs	r0, #2
 8002404:	e7f8      	b.n	80023f8 <HAL_UART_Receive_IT+0x2a>

08002406 <_ZN14HardwareSerial9availableEv>:
  _serial.rx_head = _serial.rx_tail;
}

int HardwareSerial::available(void)
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _serial.rx_head - _serial.rx_tail)) % SERIAL_RX_BUFFER_SIZE;
 8002406:	f8b0 30fc 	ldrh.w	r3, [r0, #252]	; 0xfc
 800240a:	b29b      	uxth	r3, r3
 800240c:	3340      	adds	r3, #64	; 0x40
 800240e:	f8b0 00f8 	ldrh.w	r0, [r0, #248]	; 0xf8
 8002412:	1a18      	subs	r0, r3, r0
}
 8002414:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8002418:	4770      	bx	lr

0800241a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_serial.rx_head == _serial.rx_tail) {
 800241a:	f8b0 30fc 	ldrh.w	r3, [r0, #252]	; 0xfc
 800241e:	b29b      	uxth	r3, r3
 8002420:	f8b0 20f8 	ldrh.w	r2, [r0, #248]	; 0xf8
 8002424:	4293      	cmp	r3, r2
 8002426:	d003      	beq.n	8002430 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _serial.rx_buff[_serial.rx_tail];
 8002428:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
 800242c:	5c98      	ldrb	r0, [r3, r2]
 800242e:	4770      	bx	lr
    return -1;
 8002430:	f04f 30ff 	mov.w	r0, #4294967295
  }
}
 8002434:	4770      	bx	lr

08002436 <_ZN14HardwareSerial17availableForWriteEv>:
  }
}

int HardwareSerial::availableForWrite(void)
{
  tx_buffer_index_t head = _serial.tx_head;
 8002436:	f890 30fa 	ldrb.w	r3, [r0, #250]	; 0xfa
  tx_buffer_index_t tail = _serial.tx_tail;
 800243a:	f8b0 00fe 	ldrh.w	r0, [r0, #254]	; 0xfe
 800243e:	b2c0      	uxtb	r0, r0

  if (head >= tail) {
 8002440:	4283      	cmp	r3, r0
 8002442:	d202      	bcs.n	800244a <_ZN14HardwareSerial17availableForWriteEv+0x14>
    return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  }
  return tail - head - 1;
 8002444:	1ac0      	subs	r0, r0, r3
 8002446:	3801      	subs	r0, #1
}
 8002448:	4770      	bx	lr
    return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 800244a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800244e:	4418      	add	r0, r3
 8002450:	4770      	bx	lr

08002452 <_ZN14HardwareSerial5flushEv>:
void HardwareSerial::flush()
{
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written) {
 8002452:	7c03      	ldrb	r3, [r0, #16]
 8002454:	b133      	cbz	r3, 8002464 <_ZN14HardwareSerial5flushEv+0x12>
    return;
  }

  while ((_serial.tx_head != _serial.tx_tail)) {
 8002456:	f8b0 20fa 	ldrh.w	r2, [r0, #250]	; 0xfa
 800245a:	f8b0 30fe 	ldrh.w	r3, [r0, #254]	; 0xfe
 800245e:	b29b      	uxth	r3, r3
 8002460:	429a      	cmp	r2, r3
 8002462:	d1f8      	bne.n	8002456 <_ZN14HardwareSerial5flushEv+0x4>
    // nop, the interrupt handler will free up space for us
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished transmission (TXC is set).
}
 8002464:	4770      	bx	lr

08002466 <_ZN14HardwareSerial5writeEh>:
  /* There is no real error management so just return transfer size requested*/
  return ret;
}

size_t HardwareSerial::write(uint8_t c)
{
 8002466:	b500      	push	{lr}
 8002468:	b083      	sub	sp, #12
  uint8_t buff = c;
 800246a:	f88d 1007 	strb.w	r1, [sp, #7]
  return write(&buff, 1);
 800246e:	6803      	ldr	r3, [r0, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f10d 0107 	add.w	r1, sp, #7
 8002478:	4798      	blx	r3
}
 800247a:	b003      	add	sp, #12
 800247c:	f85d fb04 	ldr.w	pc, [sp], #4

08002480 <_ZN14HardwareSerial16_rx_complete_irqEP8serial_s>:
{
 8002480:	b510      	push	{r4, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	4604      	mov	r4, r0
  if (uart_getc(obj, &c) == 0) {
 8002486:	f10d 0107 	add.w	r1, sp, #7
 800248a:	f001 fbc3 	bl	8003c14 <uart_getc>
 800248e:	b998      	cbnz	r0, 80024b8 <_ZN14HardwareSerial16_rx_complete_irqEP8serial_s+0x38>
    rx_buffer_index_t i = (unsigned int)(obj->rx_head + 1) % SERIAL_RX_BUFFER_SIZE;
 8002490:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8002494:	b29b      	uxth	r3, r3
 8002496:	3301      	adds	r3, #1
 8002498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    if (i != obj->rx_tail) {
 800249c:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d009      	beq.n	80024b8 <_ZN14HardwareSerial16_rx_complete_irqEP8serial_s+0x38>
      obj->rx_buff[obj->rx_head] = c;
 80024a4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80024a6:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80024aa:	b292      	uxth	r2, r2
 80024ac:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80024b0:	5488      	strb	r0, [r1, r2]
      obj->rx_head = i;
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 80024b8:	b002      	add	sp, #8
 80024ba:	bd10      	pop	{r4, pc}

080024bc <_ZN14HardwareSerial16_tx_complete_irqEP8serial_s>:
  obj->tx_tail = (obj->tx_tail + obj->tx_size) % SERIAL_TX_BUFFER_SIZE;
 80024bc:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80024c4:	4413      	add	r3, r2
 80024c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024ca:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  if (obj->tx_head != obj->tx_tail) {
 80024ce:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
 80024d2:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	429a      	cmp	r2, r3
 80024da:	d101      	bne.n	80024e0 <_ZN14HardwareSerial16_tx_complete_irqEP8serial_s+0x24>
  return 0;
 80024dc:	2000      	movs	r0, #0
}
 80024de:	4770      	bx	lr
{
 80024e0:	b500      	push	{lr}
 80024e2:	b083      	sub	sp, #12
    remaining_data = (SERIAL_TX_BUFFER_SIZE + obj->tx_head - obj->tx_tail)
 80024e4:	f102 0340 	add.w	r3, r2, #64	; 0x40
 80024e8:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 80024ec:	b292      	uxth	r2, r2
 80024ee:	1a9b      	subs	r3, r3, r2
                     % SERIAL_TX_BUFFER_SIZE;
 80024f0:	425a      	negs	r2, r3
 80024f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024f6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80024fa:	bf58      	it	pl
 80024fc:	4253      	negpl	r3, r2
    remaining_data = (SERIAL_TX_BUFFER_SIZE + obj->tx_head - obj->tx_tail)
 80024fe:	9300      	str	r3, [sp, #0]
                       (size_t)(SERIAL_TX_BUFFER_SIZE - obj->tx_tail));
 8002500:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 8002504:	b292      	uxth	r2, r2
 8002506:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
 800250a:	9201      	str	r2, [sp, #4]
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 800250c:	4293      	cmp	r3, r2
 800250e:	d80a      	bhi.n	8002526 <_ZN14HardwareSerial16_tx_complete_irqEP8serial_s+0x6a>
	return __b;
      return __a;
 8002510:	466b      	mov	r3, sp
    obj->tx_size = min(remaining_data,
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	66c2      	str	r2, [r0, #108]	; 0x6c
    uart_attach_tx_callback(obj, _tx_complete_irq, obj->tx_size);
 8002516:	4905      	ldr	r1, [pc, #20]	; (800252c <_ZN14HardwareSerial16_tx_complete_irqEP8serial_s+0x70>)
 8002518:	f001 fbba 	bl	8003c90 <uart_attach_tx_callback>
    return -1;
 800251c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002520:	b003      	add	sp, #12
 8002522:	f85d fb04 	ldr.w	pc, [sp], #4
	return __b;
 8002526:	ab01      	add	r3, sp, #4
 8002528:	e7f3      	b.n	8002512 <_ZN14HardwareSerial16_tx_complete_irqEP8serial_s+0x56>
 800252a:	bf00      	nop
 800252c:	080024bd 	.word	0x080024bd

08002530 <_ZN14HardwareSerial4initE7PinNameS0_>:
  if (_rx == _tx) {
 8002530:	4291      	cmp	r1, r2
 8002532:	d015      	beq.n	8002560 <_ZN14HardwareSerial4initE7PinNameS0_+0x30>
    _serial.pin_rx = _rx;
 8002534:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
  _serial.pin_tx = _tx;
 8002538:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
  _serial.rx_buff = _rx_buffer;
 800253c:	f100 0311 	add.w	r3, r0, #17
 8002540:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
  _serial.rx_head = 0;
 8002544:	2300      	movs	r3, #0
 8002546:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
  _serial.rx_tail = 0;
 800254a:	f8a0 30f8 	strh.w	r3, [r0, #248]	; 0xf8
  _serial.tx_buff = _tx_buffer;
 800254e:	f100 0251 	add.w	r2, r0, #81	; 0x51
 8002552:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4
  _serial.tx_head = 0;
 8002556:	f8a0 30fa 	strh.w	r3, [r0, #250]	; 0xfa
  _serial.tx_tail = 0;
 800255a:	f8a0 30fe 	strh.w	r3, [r0, #254]	; 0xfe
}
 800255e:	4770      	bx	lr
    _serial.pin_rx = NC;
 8002560:	f04f 33ff 	mov.w	r3, #4294967295
 8002564:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
 8002568:	e7e6      	b.n	8002538 <_ZN14HardwareSerial4initE7PinNameS0_+0x8>
	...

0800256c <_ZN14HardwareSerialC1E7PinNameS0_>:
HardwareSerial::HardwareSerial(PinName _rx, PinName _tx)
 800256c:	b510      	push	{r4, lr}
 800256e:	4604      	mov	r4, r0
    void setWriteError(int err = 1)
    {
      write_error = err;
    }
  public:
    Print() : write_error(0) {}
 8002570:	2300      	movs	r3, #0
 8002572:	6043      	str	r3, [r0, #4]
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream()
    {
      _timeout = 1000;
 8002574:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002578:	6083      	str	r3, [r0, #8]
 800257a:	4b03      	ldr	r3, [pc, #12]	; (8002588 <_ZN14HardwareSerialC1E7PinNameS0_+0x1c>)
 800257c:	6003      	str	r3, [r0, #0]
  init(_rx, _tx);
 800257e:	f7ff ffd7 	bl	8002530 <_ZN14HardwareSerial4initE7PinNameS0_>
}
 8002582:	4620      	mov	r0, r4
 8002584:	bd10      	pop	{r4, pc}
 8002586:	bf00      	nop
 8002588:	080040f8 	.word	0x080040f8

0800258c <_ZNK14HardwareSerial12isHalfDuplexEv>:
  _serial.pin_rx = NC;
}

bool HardwareSerial::isHalfDuplex(void) const
{
  return _serial.pin_rx == NC;
 800258c:	f8d0 00e8 	ldr.w	r0, [r0, #232]	; 0xe8
}
 8002590:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002594:	bf14      	ite	ne
 8002596:	2000      	movne	r0, #0
 8002598:	2001      	moveq	r0, #1
 800259a:	4770      	bx	lr

0800259c <_ZN14HardwareSerial5writeEPKhj>:
{
 800259c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	4604      	mov	r4, r0
 80025a4:	460f      	mov	r7, r1
 80025a6:	4690      	mov	r8, r2
  size_t available = availableForWrite();
 80025a8:	6803      	ldr	r3, [r0, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	4798      	blx	r3
 80025ae:	9001      	str	r0, [sp, #4]
  size_t available_till_buffer_end = SERIAL_TX_BUFFER_SIZE - _serial.tx_head;
 80025b0:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
 80025b4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80025b8:	9300      	str	r3, [sp, #0]
  _written = true;
 80025ba:	2301      	movs	r3, #1
 80025bc:	7423      	strb	r3, [r4, #16]
  if (isHalfDuplex()) {
 80025be:	4620      	mov	r0, r4
 80025c0:	f7ff ffe4 	bl	800258c <_ZNK14HardwareSerial12isHalfDuplexEv>
 80025c4:	b110      	cbz	r0, 80025cc <_ZN14HardwareSerial5writeEPKhj+0x30>
    if (_rx_enabled) {
 80025c6:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 80025ca:	b93b      	cbnz	r3, 80025dc <_ZN14HardwareSerial5writeEPKhj+0x40>
  while (!availableForWrite()) {
 80025cc:	6823      	ldr	r3, [r4, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	4620      	mov	r0, r4
 80025d2:	4798      	blx	r3
 80025d4:	2800      	cmp	r0, #0
 80025d6:	d0f9      	beq.n	80025cc <_ZN14HardwareSerial5writeEPKhj+0x30>
 80025d8:	4646      	mov	r6, r8
 80025da:	e01e      	b.n	800261a <_ZN14HardwareSerial5writeEPKhj+0x7e>
      _rx_enabled = false;
 80025dc:	2300      	movs	r3, #0
 80025de:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
      uart_enable_tx(&_serial);
 80025e2:	f104 0094 	add.w	r0, r4, #148	; 0x94
 80025e6:	f001 fb71 	bl	8003ccc <uart_enable_tx>
 80025ea:	e7ef      	b.n	80025cc <_ZN14HardwareSerial5writeEPKhj+0x30>
      if (__b < __a)
 80025ec:	9a01      	ldr	r2, [sp, #4]
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d337      	bcc.n	8002662 <_ZN14HardwareSerial5writeEPKhj+0xc6>
      return __a;
 80025f2:	ab01      	add	r3, sp, #4
    size_intermediate = min(available, available_till_buffer_end);
 80025f4:	681d      	ldr	r5, [r3, #0]
    write(buffer, size_intermediate);
 80025f6:	6823      	ldr	r3, [r4, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	462a      	mov	r2, r5
 80025fc:	4639      	mov	r1, r7
 80025fe:	4620      	mov	r0, r4
 8002600:	4798      	blx	r3
    size -= size_intermediate;
 8002602:	1b76      	subs	r6, r6, r5
    buffer += size_intermediate;
 8002604:	442f      	add	r7, r5
    available = availableForWrite();
 8002606:	6823      	ldr	r3, [r4, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	4620      	mov	r0, r4
 800260c:	4798      	blx	r3
 800260e:	9001      	str	r0, [sp, #4]
    available_till_buffer_end = SERIAL_TX_BUFFER_SIZE - _serial.tx_head;
 8002610:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
 8002614:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002618:	9300      	str	r3, [sp, #0]
  while ((size > available_till_buffer_end) || (size > available)) {
 800261a:	9b00      	ldr	r3, [sp, #0]
 800261c:	42b3      	cmp	r3, r6
 800261e:	d3e5      	bcc.n	80025ec <_ZN14HardwareSerial5writeEPKhj+0x50>
 8002620:	9a01      	ldr	r2, [sp, #4]
 8002622:	42b2      	cmp	r2, r6
 8002624:	d3e2      	bcc.n	80025ec <_ZN14HardwareSerial5writeEPKhj+0x50>
  if (_serial.tx_head + size <= SERIAL_TX_BUFFER_SIZE) {
 8002626:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
 800262a:	199a      	adds	r2, r3, r6
 800262c:	2a40      	cmp	r2, #64	; 0x40
 800262e:	d81a      	bhi.n	8002666 <_ZN14HardwareSerial5writeEPKhj+0xca>
    memcpy(&_serial.tx_buff[_serial.tx_head], buffer, size);
 8002630:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 8002634:	4632      	mov	r2, r6
 8002636:	4639      	mov	r1, r7
 8002638:	4418      	add	r0, r3
 800263a:	f001 fc37 	bl	8003eac <memcpy>
    size_intermediate = size;
 800263e:	4635      	mov	r5, r6
  _serial.tx_head = (_serial.tx_head + size) % SERIAL_TX_BUFFER_SIZE;
 8002640:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
 8002644:	441e      	add	r6, r3
 8002646:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 800264a:	f8a4 60fa 	strh.w	r6, [r4, #250]	; 0xfa
  if (!serial_tx_active(&_serial)) {
 800264e:	f104 0694 	add.w	r6, r4, #148	; 0x94
 8002652:	4630      	mov	r0, r6
 8002654:	f001 facc 	bl	8003bf0 <serial_tx_active>
 8002658:	b1a8      	cbz	r0, 8002686 <_ZN14HardwareSerial5writeEPKhj+0xea>
}
 800265a:	4640      	mov	r0, r8
 800265c:	b002      	add	sp, #8
 800265e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __b;
 8002662:	466b      	mov	r3, sp
 8002664:	e7c6      	b.n	80025f4 <_ZN14HardwareSerial5writeEPKhj+0x58>
    size_intermediate = SERIAL_TX_BUFFER_SIZE - _serial.tx_head;
 8002666:	f1c3 0540 	rsb	r5, r3, #64	; 0x40
    memcpy(&_serial.tx_buff[_serial.tx_head], buffer, size_intermediate);
 800266a:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 800266e:	462a      	mov	r2, r5
 8002670:	4639      	mov	r1, r7
 8002672:	4418      	add	r0, r3
 8002674:	f001 fc1a 	bl	8003eac <memcpy>
    memcpy(&_serial.tx_buff[0], buffer + size_intermediate,
 8002678:	1b72      	subs	r2, r6, r5
 800267a:	1979      	adds	r1, r7, r5
 800267c:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 8002680:	f001 fc14 	bl	8003eac <memcpy>
 8002684:	e7dc      	b.n	8002640 <_ZN14HardwareSerial5writeEPKhj+0xa4>
    _serial.tx_size = size_intermediate;
 8002686:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    uart_attach_tx_callback(&_serial, _tx_complete_irq, size_intermediate);
 800268a:	462a      	mov	r2, r5
 800268c:	4902      	ldr	r1, [pc, #8]	; (8002698 <_ZN14HardwareSerial5writeEPKhj+0xfc>)
 800268e:	4630      	mov	r0, r6
 8002690:	f001 fafe 	bl	8003c90 <uart_attach_tx_callback>
 8002694:	e7e1      	b.n	800265a <_ZN14HardwareSerial5writeEPKhj+0xbe>
 8002696:	bf00      	nop
 8002698:	080024bd 	.word	0x080024bd

0800269c <_ZN14HardwareSerial18enableHalfDuplexRxEv>:

void HardwareSerial::enableHalfDuplexRx(void)
{
 800269c:	b510      	push	{r4, lr}
 800269e:	4604      	mov	r4, r0
  if (isHalfDuplex()) {
 80026a0:	f7ff ff74 	bl	800258c <_ZNK14HardwareSerial12isHalfDuplexEv>
 80026a4:	b130      	cbz	r0, 80026b4 <_ZN14HardwareSerial18enableHalfDuplexRxEv+0x18>
    // In half-duplex mode we have to wait for all TX characters to
    // be transmitted before we can receive data.
    flush();
 80026a6:	6823      	ldr	r3, [r4, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	4620      	mov	r0, r4
 80026ac:	4798      	blx	r3
    if (!_rx_enabled) {
 80026ae:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 80026b2:	b103      	cbz	r3, 80026b6 <_ZN14HardwareSerial18enableHalfDuplexRxEv+0x1a>
      _rx_enabled = true;
      uart_enable_rx(&_serial);
    }
  }
}
 80026b4:	bd10      	pop	{r4, pc}
      _rx_enabled = true;
 80026b6:	2301      	movs	r3, #1
 80026b8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
      uart_enable_rx(&_serial);
 80026bc:	f104 0094 	add.w	r0, r4, #148	; 0x94
 80026c0:	f001 fb16 	bl	8003cf0 <uart_enable_rx>
}
 80026c4:	e7f6      	b.n	80026b4 <_ZN14HardwareSerial18enableHalfDuplexRxEv+0x18>
	...

080026c8 <_ZN14HardwareSerial5beginEmh>:
{
 80026c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026cc:	b083      	sub	sp, #12
 80026ce:	4604      	mov	r4, r0
 80026d0:	460e      	mov	r6, r1
  _baud = baud;
 80026d2:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
  _config = config;
 80026d6:	f880 2105 	strb.w	r2, [r0, #261]	; 0x105
  switch (config & 0x07) {
 80026da:	f002 0307 	and.w	r3, r2, #7
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d011      	beq.n	8002706 <_ZN14HardwareSerial5beginEmh+0x3e>
 80026e2:	2b06      	cmp	r3, #6
 80026e4:	d011      	beq.n	800270a <_ZN14HardwareSerial5beginEmh+0x42>
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d00b      	beq.n	8002702 <_ZN14HardwareSerial5beginEmh+0x3a>
      databits = 0;
 80026ea:	2500      	movs	r5, #0
  if ((config & 0x30) == 0x30) {
 80026ec:	f002 0330 	and.w	r3, r2, #48	; 0x30
 80026f0:	2b30      	cmp	r3, #48	; 0x30
 80026f2:	d00c      	beq.n	800270e <_ZN14HardwareSerial5beginEmh+0x46>
  } else if ((config & 0x20) == 0x20) {
 80026f4:	f012 0f20 	tst.w	r2, #32
 80026f8:	d01b      	beq.n	8002732 <_ZN14HardwareSerial5beginEmh+0x6a>
    databits++;
 80026fa:	3501      	adds	r5, #1
    parity = UART_PARITY_EVEN;
 80026fc:	f44f 6880 	mov.w	r8, #1024	; 0x400
 8002700:	e008      	b.n	8002714 <_ZN14HardwareSerial5beginEmh+0x4c>
  switch (config & 0x07) {
 8002702:	2506      	movs	r5, #6
 8002704:	e7f2      	b.n	80026ec <_ZN14HardwareSerial5beginEmh+0x24>
      databits = 7;
 8002706:	2507      	movs	r5, #7
 8002708:	e7f0      	b.n	80026ec <_ZN14HardwareSerial5beginEmh+0x24>
      databits = 8;
 800270a:	2508      	movs	r5, #8
 800270c:	e7ee      	b.n	80026ec <_ZN14HardwareSerial5beginEmh+0x24>
    databits++;
 800270e:	3501      	adds	r5, #1
    parity = UART_PARITY_ODD;
 8002710:	f44f 68c0 	mov.w	r8, #1536	; 0x600
  if ((config & 0x08) == 0x08) {
 8002714:	f012 0f08 	tst.w	r2, #8
 8002718:	d00e      	beq.n	8002738 <_ZN14HardwareSerial5beginEmh+0x70>
    stopbits = UART_STOPBITS_2;
 800271a:	f44f 5900 	mov.w	r9, #8192	; 0x2000
  switch (databits) {
 800271e:	2d08      	cmp	r5, #8
 8002720:	d00d      	beq.n	800273e <_ZN14HardwareSerial5beginEmh+0x76>
 8002722:	2d09      	cmp	r5, #9
 8002724:	d00d      	beq.n	8002742 <_ZN14HardwareSerial5beginEmh+0x7a>
      Error_Handler();
 8002726:	f240 11a1 	movw	r1, #417	; 0x1a1
 800272a:	4811      	ldr	r0, [pc, #68]	; (8002770 <_ZN14HardwareSerial5beginEmh+0xa8>)
 800272c:	f001 f86f 	bl	800380e <_Error_Handler>
      break;
 8002730:	e009      	b.n	8002746 <_ZN14HardwareSerial5beginEmh+0x7e>
    parity = UART_PARITY_NONE;
 8002732:	f04f 0800 	mov.w	r8, #0
 8002736:	e7ed      	b.n	8002714 <_ZN14HardwareSerial5beginEmh+0x4c>
    stopbits = UART_STOPBITS_1;
 8002738:	f04f 0900 	mov.w	r9, #0
 800273c:	e7ef      	b.n	800271e <_ZN14HardwareSerial5beginEmh+0x56>
  switch (databits) {
 800273e:	2500      	movs	r5, #0
 8002740:	e001      	b.n	8002746 <_ZN14HardwareSerial5beginEmh+0x7e>
      databits = UART_WORDLENGTH_9B;
 8002742:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  uart_init(&_serial, (uint32_t)baud, databits, parity, stopbits);
 8002746:	f104 0794 	add.w	r7, r4, #148	; 0x94
 800274a:	f8cd 9000 	str.w	r9, [sp]
 800274e:	4643      	mov	r3, r8
 8002750:	462a      	mov	r2, r5
 8002752:	4631      	mov	r1, r6
 8002754:	4638      	mov	r0, r7
 8002756:	f001 f983 	bl	8003a60 <uart_init>
  enableHalfDuplexRx();
 800275a:	4620      	mov	r0, r4
 800275c:	f7ff ff9e 	bl	800269c <_ZN14HardwareSerial18enableHalfDuplexRxEv>
  uart_attach_rx_callback(&_serial, _rx_complete_irq);
 8002760:	4904      	ldr	r1, [pc, #16]	; (8002774 <_ZN14HardwareSerial5beginEmh+0xac>)
 8002762:	4638      	mov	r0, r7
 8002764:	f001 fa74 	bl	8003c50 <uart_attach_rx_callback>
}
 8002768:	b003      	add	sp, #12
 800276a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800276e:	bf00      	nop
 8002770:	08004084 	.word	0x08004084
 8002774:	08002481 	.word	0x08002481

08002778 <_ZN14HardwareSerial4readEv>:
{
 8002778:	b510      	push	{r4, lr}
 800277a:	4604      	mov	r4, r0
  enableHalfDuplexRx();
 800277c:	f7ff ff8e 	bl	800269c <_ZN14HardwareSerial18enableHalfDuplexRxEv>
  if (_serial.rx_head == _serial.rx_tail) {
 8002780:	f8b4 20fc 	ldrh.w	r2, [r4, #252]	; 0xfc
 8002784:	b292      	uxth	r2, r2
 8002786:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800278a:	429a      	cmp	r2, r3
 800278c:	d008      	beq.n	80027a0 <_ZN14HardwareSerial4readEv+0x28>
    unsigned char c = _serial.rx_buff[_serial.rx_tail];
 800278e:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
 8002792:	5cd0      	ldrb	r0, [r2, r3]
    _serial.rx_tail = (rx_buffer_index_t)(_serial.rx_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 8002794:	3301      	adds	r3, #1
 8002796:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800279a:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
}
 800279e:	bd10      	pop	{r4, pc}
    return -1;
 80027a0:	f04f 30ff 	mov.w	r0, #4294967295
 80027a4:	e7fb      	b.n	800279e <_ZN14HardwareSerial4readEv+0x26>

080027a6 <_ZN13HardwareTimer10getChannelEm>:
  */
int HardwareTimer::getChannel(uint32_t channel)
{
  uint32_t return_value;

  switch (channel) {
 80027a6:	3901      	subs	r1, #1
 80027a8:	2903      	cmp	r1, #3
 80027aa:	d809      	bhi.n	80027c0 <_ZN13HardwareTimer10getChannelEm+0x1a>
 80027ac:	e8df f001 	tbb	[pc, r1]
 80027b0:	06040b02 	.word	0x06040b02
      break;
    case 3:
      return_value = TIM_CHANNEL_3;
      break;
    case 4:
      return_value = TIM_CHANNEL_4;
 80027b4:	2000      	movs	r0, #0
 80027b6:	4770      	bx	lr
      return_value = TIM_CHANNEL_3;
 80027b8:	2008      	movs	r0, #8
      break;
 80027ba:	4770      	bx	lr
      return_value = TIM_CHANNEL_4;
 80027bc:	200c      	movs	r0, #12
      break;
 80027be:	4770      	bx	lr
    default:
      return_value = -1;
 80027c0:	f04f 30ff 	mov.w	r0, #4294967295
 80027c4:	4770      	bx	lr
      return_value = TIM_CHANNEL_2;
 80027c6:	2004      	movs	r0, #4
  }
  return return_value;
}
 80027c8:	4770      	bx	lr
	...

080027cc <_ZN13HardwareTimer12getLLChannelEm>:
  */
int HardwareTimer::getLLChannel(uint32_t channel)
{
  uint32_t return_value;
#if defined(TIM_CCER_CC1NE)
  if (isComplementaryChannel[channel - 1]) {
 80027cc:	1e4b      	subs	r3, r1, #1
 80027ce:	5cc3      	ldrb	r3, [r0, r3]
 80027d0:	b15b      	cbz	r3, 80027ea <_ZN13HardwareTimer12getLLChannelEm+0x1e>
    // Complementary channel
    switch (channel) {
 80027d2:	2902      	cmp	r1, #2
 80027d4:	d021      	beq.n	800281a <_ZN13HardwareTimer12getLLChannelEm+0x4e>
 80027d6:	2903      	cmp	r1, #3
 80027d8:	d021      	beq.n	800281e <_ZN13HardwareTimer12getLLChannelEm+0x52>
 80027da:	2901      	cmp	r1, #1
 80027dc:	d003      	beq.n	80027e6 <_ZN13HardwareTimer12getLLChannelEm+0x1a>
      case 4:
        return_value = LL_TIM_CHANNEL_CH4N;
        break;
#endif
      default:
        return_value = -1;
 80027de:	f04f 31ff 	mov.w	r1, #4294967295
      default:
        return_value = -1;
    }
  }
  return return_value;
}
 80027e2:	4608      	mov	r0, r1
 80027e4:	4770      	bx	lr
    switch (channel) {
 80027e6:	2104      	movs	r1, #4
 80027e8:	e7fb      	b.n	80027e2 <_ZN13HardwareTimer12getLLChannelEm+0x16>
    switch (channel) {
 80027ea:	1e4b      	subs	r3, r1, #1
 80027ec:	2b03      	cmp	r3, #3
 80027ee:	d811      	bhi.n	8002814 <_ZN13HardwareTimer12getLLChannelEm+0x48>
 80027f0:	a201      	add	r2, pc, #4	; (adr r2, 80027f8 <_ZN13HardwareTimer12getLLChannelEm+0x2c>)
 80027f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f6:	bf00      	nop
 80027f8:	080027e3 	.word	0x080027e3
 80027fc:	08002825 	.word	0x08002825
 8002800:	08002809 	.word	0x08002809
 8002804:	0800280f 	.word	0x0800280f
        return_value = LL_TIM_CHANNEL_CH3;
 8002808:	f44f 7180 	mov.w	r1, #256	; 0x100
        break;
 800280c:	e7e9      	b.n	80027e2 <_ZN13HardwareTimer12getLLChannelEm+0x16>
        return_value = LL_TIM_CHANNEL_CH4;
 800280e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
        break;
 8002812:	e7e6      	b.n	80027e2 <_ZN13HardwareTimer12getLLChannelEm+0x16>
        return_value = -1;
 8002814:	f04f 31ff 	mov.w	r1, #4294967295
 8002818:	e7e3      	b.n	80027e2 <_ZN13HardwareTimer12getLLChannelEm+0x16>
        return_value = LL_TIM_CHANNEL_CH2N;
 800281a:	2140      	movs	r1, #64	; 0x40
 800281c:	e7e1      	b.n	80027e2 <_ZN13HardwareTimer12getLLChannelEm+0x16>
        return_value = LL_TIM_CHANNEL_CH3N;
 800281e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002822:	e7de      	b.n	80027e2 <_ZN13HardwareTimer12getLLChannelEm+0x16>
        return_value = LL_TIM_CHANNEL_CH2;
 8002824:	2110      	movs	r1, #16
 8002826:	e7dc      	b.n	80027e2 <_ZN13HardwareTimer12getLLChannelEm+0x16>

08002828 <_ZN13HardwareTimer5getITEm>:
  */
int HardwareTimer::getIT(uint32_t channel)
{
  uint32_t return_value;

  switch (channel) {
 8002828:	3901      	subs	r1, #1
 800282a:	2903      	cmp	r1, #3
 800282c:	d809      	bhi.n	8002842 <_ZN13HardwareTimer5getITEm+0x1a>
 800282e:	e8df f001 	tbb	[pc, r1]
 8002832:	0b02      	.short	0x0b02
 8002834:	0604      	.short	0x0604
      break;
    case 3:
      return_value = TIM_IT_CC3;
      break;
    case 4:
      return_value = TIM_IT_CC4;
 8002836:	2002      	movs	r0, #2
 8002838:	4770      	bx	lr
      return_value = TIM_IT_CC3;
 800283a:	2008      	movs	r0, #8
      break;
 800283c:	4770      	bx	lr
      return_value = TIM_IT_CC4;
 800283e:	2010      	movs	r0, #16
      break;
 8002840:	4770      	bx	lr
    default:
      return_value = -1;
 8002842:	f04f 30ff 	mov.w	r0, #4294967295
 8002846:	4770      	bx	lr
      return_value = TIM_IT_CC2;
 8002848:	2004      	movs	r0, #4
  }
  return return_value;
}
 800284a:	4770      	bx	lr

0800284c <_ZN13HardwareTimer20getAssociatedChannelEm>:
  * @retval HAL channel. return -1 if arduino channel is invalid
  */
int HardwareTimer::getAssociatedChannel(uint32_t channel)
{
  int timAssociatedInputChannel = -1;
  switch (channel) {
 800284c:	3901      	subs	r1, #1
 800284e:	2903      	cmp	r1, #3
 8002850:	d803      	bhi.n	800285a <_ZN13HardwareTimer20getAssociatedChannelEm+0xe>
 8002852:	e8df f001 	tbb	[pc, r1]
 8002856:	050b      	.short	0x050b
 8002858:	0907      	.short	0x0907
      break;
    case 3:
      timAssociatedInputChannel = 4;
      break;
    case 4:
      timAssociatedInputChannel = 3;
 800285a:	f04f 30ff 	mov.w	r0, #4294967295
 800285e:	4770      	bx	lr
      timAssociatedInputChannel = 1;
 8002860:	2001      	movs	r0, #1
      break;
 8002862:	4770      	bx	lr
      timAssociatedInputChannel = 4;
 8002864:	2004      	movs	r0, #4
      break;
 8002866:	4770      	bx	lr
      timAssociatedInputChannel = 3;
 8002868:	2003      	movs	r0, #3
      break;
 800286a:	4770      	bx	lr
      timAssociatedInputChannel = 2;
 800286c:	2002      	movs	r0, #2
    default:
      break;
  }
  return timAssociatedInputChannel;
}
 800286e:	4770      	bx	lr

08002870 <_ZN13HardwareTimer13resumeChannelEm>:
  * @brief  Configure specified channel and resume/start timer
  * @param  Arduino channel [1..4]
  * @retval None
  */
void HardwareTimer::resumeChannel(uint32_t channel)
{
 8002870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002874:	4604      	mov	r4, r0
 8002876:	460d      	mov	r5, r1
  int timChannel = getChannel(channel);
 8002878:	f7ff ff95 	bl	80027a6 <_ZN13HardwareTimer10getChannelEm>
 800287c:	4607      	mov	r7, r0
  int timAssociatedInputChannel;
  if (timChannel == -1) {
 800287e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002882:	d02b      	beq.n	80028dc <_ZN13HardwareTimer13resumeChannelEm+0x6c>
    Error_Handler();
  }

  int interrupt = getIT(channel);
 8002884:	4629      	mov	r1, r5
 8002886:	4620      	mov	r0, r4
 8002888:	f7ff ffce 	bl	8002828 <_ZN13HardwareTimer5getITEm>
 800288c:	4606      	mov	r6, r0
  if (interrupt == -1) {
 800288e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002892:	d029      	beq.n	80028e8 <_ZN13HardwareTimer13resumeChannelEm+0x78>
    Error_Handler();
  }

  int LLChannel = getLLChannel(channel);
 8002894:	4629      	mov	r1, r5
 8002896:	4620      	mov	r0, r4
 8002898:	f7ff ff98 	bl	80027cc <_ZN13HardwareTimer12getLLChannelEm>
  if (LLChannel == -1) {
 800289c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80028a0:	d028      	beq.n	80028f4 <_ZN13HardwareTimer13resumeChannelEm+0x84>
    Error_Handler();
  }

  // Clear flag and enable IT
  if (callbacks[channel]) {
 80028a2:	f105 0806 	add.w	r8, r5, #6
 80028a6:	eb04 1808 	add.w	r8, r4, r8, lsl #4
    bool _M_empty() const { return !_M_manager; }
 80028aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80028ae:	b133      	cbz	r3, 80028be <_ZN13HardwareTimer13resumeChannelEm+0x4e>
    __HAL_TIM_CLEAR_FLAG(&(_timerObj.handle), interrupt);
 80028b0:	6923      	ldr	r3, [r4, #16]
 80028b2:	43f2      	mvns	r2, r6
 80028b4:	611a      	str	r2, [r3, #16]
    __HAL_TIM_ENABLE_IT(&(_timerObj.handle), interrupt);
 80028b6:	6923      	ldr	r3, [r4, #16]
 80028b8:	68d8      	ldr	r0, [r3, #12]
 80028ba:	4306      	orrs	r6, r0
 80028bc:	60de      	str	r6, [r3, #12]
  }

  switch (_ChannelMode[channel - 1]) {
 80028be:	1e6a      	subs	r2, r5, #1
 80028c0:	eb04 0342 	add.w	r3, r4, r2, lsl #1
 80028c4:	889b      	ldrh	r3, [r3, #4]
 80028c6:	2b0c      	cmp	r3, #12
 80028c8:	d85c      	bhi.n	8002984 <_ZN13HardwareTimer13resumeChannelEm+0x114>
 80028ca:	e8df f003 	tbb	[pc, r3]
 80028ce:	5d5d      	.short	0x5d5d
 80028d0:	19272727 	.word	0x19272727
 80028d4:	56272719 	.word	0x56272719
 80028d8:	5656      	.short	0x5656
 80028da:	35          	.byte	0x35
 80028db:	00          	.byte	0x00
    Error_Handler();
 80028dc:	f240 1179 	movw	r1, #377	; 0x179
 80028e0:	482e      	ldr	r0, [pc, #184]	; (800299c <_ZN13HardwareTimer13resumeChannelEm+0x12c>)
 80028e2:	f000 ff94 	bl	800380e <_Error_Handler>
 80028e6:	e7cd      	b.n	8002884 <_ZN13HardwareTimer13resumeChannelEm+0x14>
    Error_Handler();
 80028e8:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 80028ec:	482b      	ldr	r0, [pc, #172]	; (800299c <_ZN13HardwareTimer13resumeChannelEm+0x12c>)
 80028ee:	f000 ff8e 	bl	800380e <_Error_Handler>
 80028f2:	e7cf      	b.n	8002894 <_ZN13HardwareTimer13resumeChannelEm+0x24>
    Error_Handler();
 80028f4:	f240 1183 	movw	r1, #387	; 0x183
 80028f8:	4828      	ldr	r0, [pc, #160]	; (800299c <_ZN13HardwareTimer13resumeChannelEm+0x12c>)
 80028fa:	f000 ff88 	bl	800380e <_Error_Handler>
 80028fe:	e7d0      	b.n	80028a2 <_ZN13HardwareTimer13resumeChannelEm+0x32>
    case TIMER_OUTPUT_COMPARE_PWM1:
    case TIMER_OUTPUT_COMPARE_PWM2: {
#if defined(TIM_CCER_CC1NE)
        if (isComplementaryChannel[channel - 1]) {
 8002900:	5ca3      	ldrb	r3, [r4, r2]
 8002902:	b12b      	cbz	r3, 8002910 <_ZN13HardwareTimer13resumeChannelEm+0xa0>
          HAL_TIMEx_PWMN_Start(&(_timerObj.handle), timChannel);
 8002904:	4639      	mov	r1, r7
 8002906:	f104 0010 	add.w	r0, r4, #16
 800290a:	f7ff f9ff 	bl	8001d0c <HAL_TIMEx_PWMN_Start>
 800290e:	e039      	b.n	8002984 <_ZN13HardwareTimer13resumeChannelEm+0x114>
        } else
#endif
        {
          HAL_TIM_PWM_Start(&(_timerObj.handle), timChannel);
 8002910:	4639      	mov	r1, r7
 8002912:	f104 0010 	add.w	r0, r4, #16
 8002916:	f7ff f889 	bl	8001a2c <HAL_TIM_PWM_Start>
 800291a:	e033      	b.n	8002984 <_ZN13HardwareTimer13resumeChannelEm+0x114>
    case TIMER_OUTPUT_COMPARE_INACTIVE:
    case TIMER_OUTPUT_COMPARE_TOGGLE:
    case TIMER_OUTPUT_COMPARE_FORCED_ACTIVE:
    case TIMER_OUTPUT_COMPARE_FORCED_INACTIVE: {
#if defined(TIM_CCER_CC1NE)
        if (isComplementaryChannel[channel - 1]) {
 800291c:	5ca3      	ldrb	r3, [r4, r2]
 800291e:	b12b      	cbz	r3, 800292c <_ZN13HardwareTimer13resumeChannelEm+0xbc>
          HAL_TIMEx_OCN_Start(&(_timerObj.handle), timChannel);
 8002920:	4639      	mov	r1, r7
 8002922:	f104 0010 	add.w	r0, r4, #16
 8002926:	f7ff f987 	bl	8001c38 <HAL_TIMEx_OCN_Start>
 800292a:	e02b      	b.n	8002984 <_ZN13HardwareTimer13resumeChannelEm+0x114>
        } else
#endif
        {
          HAL_TIM_OC_Start(&(_timerObj.handle), timChannel);
 800292c:	4639      	mov	r1, r7
 800292e:	f104 0010 	add.w	r0, r4, #16
 8002932:	f7ff f80d 	bl	8001950 <HAL_TIM_OC_Start>
 8002936:	e025      	b.n	8002984 <_ZN13HardwareTimer13resumeChannelEm+0x114>
        }
      }
      break;
    case TIMER_INPUT_FREQ_DUTY_MEASUREMENT: {
        HAL_TIM_IC_Start(&(_timerObj.handle), timChannel);
 8002938:	4639      	mov	r1, r7
 800293a:	f104 0010 	add.w	r0, r4, #16
 800293e:	f7ff f8e3 	bl	8001b08 <HAL_TIM_IC_Start>

        // Enable 2nd associated channel
        timAssociatedInputChannel = getAssociatedChannel(channel);
 8002942:	4629      	mov	r1, r5
 8002944:	4620      	mov	r0, r4
 8002946:	f7ff ff81 	bl	800284c <_ZN13HardwareTimer20getAssociatedChannelEm>
 800294a:	4605      	mov	r5, r0
        LL_TIM_CC_EnableChannel(_timerObj.handle.Instance, getLLChannel(timAssociatedInputChannel));
 800294c:	6926      	ldr	r6, [r4, #16]
 800294e:	4601      	mov	r1, r0
 8002950:	4620      	mov	r0, r4
 8002952:	f7ff ff3b 	bl	80027cc <_ZN13HardwareTimer12getLLChannelEm>
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  SET_BIT(TIMx->CCER, Channels);
 8002956:	6a33      	ldr	r3, [r6, #32]
 8002958:	4318      	orrs	r0, r3
 800295a:	6230      	str	r0, [r6, #32]
 800295c:	f8d8 3008 	ldr.w	r3, [r8, #8]
        if (callbacks[channel]) {
 8002960:	b183      	cbz	r3, 8002984 <_ZN13HardwareTimer13resumeChannelEm+0x114>
          __HAL_TIM_CLEAR_FLAG(&(_timerObj.handle), getIT(timAssociatedInputChannel));
 8002962:	4629      	mov	r1, r5
 8002964:	4620      	mov	r0, r4
 8002966:	f7ff ff5f 	bl	8002828 <_ZN13HardwareTimer5getITEm>
 800296a:	6923      	ldr	r3, [r4, #16]
 800296c:	43c2      	mvns	r2, r0
 800296e:	611a      	str	r2, [r3, #16]
          __HAL_TIM_ENABLE_IT(&(_timerObj.handle), getIT(timAssociatedInputChannel));
 8002970:	6923      	ldr	r3, [r4, #16]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	4310      	orrs	r0, r2
 8002976:	60d8      	str	r0, [r3, #12]
 8002978:	e004      	b.n	8002984 <_ZN13HardwareTimer13resumeChannelEm+0x114>
      }
      break;
    case TIMER_INPUT_CAPTURE_RISING:
    case TIMER_INPUT_CAPTURE_FALLING:
    case TIMER_INPUT_CAPTURE_BOTHEDGE: {
        HAL_TIM_IC_Start(&(_timerObj.handle), timChannel);
 800297a:	4639      	mov	r1, r7
 800297c:	f104 0010 	add.w	r0, r4, #16
 8002980:	f7ff f8c2 	bl	8001b08 <HAL_TIM_IC_Start>
      break;
    case TIMER_NOT_USED:
    default :
      break;
  }
}
 8002984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!LL_TIM_IsEnabledCounter(_timerObj.handle.Instance)) {
 8002988:	6923      	ldr	r3, [r4, #16]
  return ((READ_BIT(TIMx->CR1, TIM_CR1_CEN) == (TIM_CR1_CEN)) ? 1UL : 0UL);
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f013 0f01 	tst.w	r3, #1
 8002990:	d1f8      	bne.n	8002984 <_ZN13HardwareTimer13resumeChannelEm+0x114>
        HAL_TIM_Base_Start(&(_timerObj.handle));
 8002992:	f104 0010 	add.w	r0, r4, #16
 8002996:	f7fe fe75 	bl	8001684 <HAL_TIM_Base_Start>
}
 800299a:	e7f3      	b.n	8002984 <_ZN13HardwareTimer13resumeChannelEm+0x114>
 800299c:	0800411c 	.word	0x0800411c

080029a0 <_ZN13HardwareTimer6resumeEv>:
{
 80029a0:	b510      	push	{r4, lr}
 80029a2:	4604      	mov	r4, r0
 80029a4:	6e83      	ldr	r3, [r0, #104]	; 0x68
  if (callbacks[0]) {
 80029a6:	b15b      	cbz	r3, 80029c0 <_ZN13HardwareTimer6resumeEv+0x20>
    __HAL_TIM_CLEAR_FLAG(&(_timerObj.handle), TIM_FLAG_UPDATE);
 80029a8:	6903      	ldr	r3, [r0, #16]
 80029aa:	f06f 0201 	mvn.w	r2, #1
 80029ae:	611a      	str	r2, [r3, #16]
    __HAL_TIM_ENABLE_IT(&(_timerObj.handle), TIM_IT_UPDATE);
 80029b0:	f850 2f10 	ldr.w	r2, [r0, #16]!
 80029b4:	68d3      	ldr	r3, [r2, #12]
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	60d3      	str	r3, [r2, #12]
    HAL_TIM_Base_Start(&(_timerObj.handle));
 80029bc:	f7fe fe62 	bl	8001684 <HAL_TIM_Base_Start>
  resumeChannel(1);
 80029c0:	2101      	movs	r1, #1
 80029c2:	4620      	mov	r0, r4
 80029c4:	f7ff ff54 	bl	8002870 <_ZN13HardwareTimer13resumeChannelEm>
  resumeChannel(2);
 80029c8:	2102      	movs	r1, #2
 80029ca:	4620      	mov	r0, r4
 80029cc:	f7ff ff50 	bl	8002870 <_ZN13HardwareTimer13resumeChannelEm>
  resumeChannel(3);
 80029d0:	2103      	movs	r1, #3
 80029d2:	4620      	mov	r0, r4
 80029d4:	f7ff ff4c 	bl	8002870 <_ZN13HardwareTimer13resumeChannelEm>
  resumeChannel(4);
 80029d8:	2104      	movs	r1, #4
 80029da:	4620      	mov	r0, r4
 80029dc:	f7ff ff48 	bl	8002870 <_ZN13HardwareTimer13resumeChannelEm>
}
 80029e0:	bd10      	pop	{r4, pc}
	...

080029e4 <_Z15get_timer_indexP11TIM_TypeDef>:
  * @brief  return timer index from timer handle
  * @param  htim : one of the defined timer
  * @retval timer index
  */
timer_index_t get_timer_index(TIM_TypeDef *instance)
{
 80029e4:	4603      	mov	r3, r0
  timer_index_t index = UNKNOWN_TIMER;

#if defined(TIM1_BASE)
  if (instance == TIM1) {
 80029e6:	4a0b      	ldr	r2, [pc, #44]	; (8002a14 <_Z15get_timer_indexP11TIM_TypeDef+0x30>)
 80029e8:	4290      	cmp	r0, r2
 80029ea:	d00b      	beq.n	8002a04 <_Z15get_timer_indexP11TIM_TypeDef+0x20>
  timer_index_t index = UNKNOWN_TIMER;
 80029ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
    index = TIMER1_INDEX;
  }
#endif
#if defined(TIM2_BASE)
  if (instance == TIM2) {
 80029f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f4:	d008      	beq.n	8002a08 <_Z15get_timer_indexP11TIM_TypeDef+0x24>
    index = TIMER2_INDEX;
  }
#endif
#if defined(TIM3_BASE)
  if (instance == TIM3) {
 80029f6:	4a08      	ldr	r2, [pc, #32]	; (8002a18 <_Z15get_timer_indexP11TIM_TypeDef+0x34>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d007      	beq.n	8002a0c <_Z15get_timer_indexP11TIM_TypeDef+0x28>
    index = TIMER3_INDEX;
  }
#endif
#if defined(TIM4_BASE)
  if (instance == TIM4) {
 80029fc:	4a07      	ldr	r2, [pc, #28]	; (8002a1c <_Z15get_timer_indexP11TIM_TypeDef+0x38>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d006      	beq.n	8002a10 <_Z15get_timer_indexP11TIM_TypeDef+0x2c>
  if (instance == TIM22) {
    index = TIMER22_INDEX;
  }
#endif
  return index;
}
 8002a02:	4770      	bx	lr
    index = TIMER1_INDEX;
 8002a04:	2000      	movs	r0, #0
 8002a06:	e7f3      	b.n	80029f0 <_Z15get_timer_indexP11TIM_TypeDef+0xc>
    index = TIMER2_INDEX;
 8002a08:	2001      	movs	r0, #1
 8002a0a:	e7f4      	b.n	80029f6 <_Z15get_timer_indexP11TIM_TypeDef+0x12>
    index = TIMER3_INDEX;
 8002a0c:	2002      	movs	r0, #2
 8002a0e:	e7f5      	b.n	80029fc <_Z15get_timer_indexP11TIM_TypeDef+0x18>
    index = TIMER4_INDEX;
 8002a10:	2003      	movs	r0, #3
 8002a12:	e7f6      	b.n	8002a02 <_Z15get_timer_indexP11TIM_TypeDef+0x1e>
 8002a14:	40012c00 	.word	0x40012c00
 8002a18:	40000400 	.word	0x40000400
 8002a1c:	40000800 	.word	0x40000800

08002a20 <_ZN13HardwareTimerD1Ev>:
HardwareTimer::~HardwareTimer()
 8002a20:	b570      	push	{r4, r5, r6, lr}
 8002a22:	4605      	mov	r5, r0
  uint32_t index = get_timer_index(_timerObj.handle.Instance);
 8002a24:	4606      	mov	r6, r0
 8002a26:	f856 0f10 	ldr.w	r0, [r6, #16]!
 8002a2a:	f7ff ffdb 	bl	80029e4 <_Z15get_timer_indexP11TIM_TypeDef>
 8002a2e:	4604      	mov	r4, r0
  disableTimerClock(&(_timerObj.handle));
 8002a30:	4630      	mov	r0, r6
 8002a32:	f000 ff39 	bl	80038a8 <disableTimerClock>
  HardwareTimer_Handle[index] = NULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	4a0a      	ldr	r2, [pc, #40]	; (8002a64 <_ZN13HardwareTimerD1Ev+0x44>)
 8002a3a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  _timerObj.__this = NULL;
 8002a3e:	60eb      	str	r3, [r5, #12]
HardwareTimer::~HardwareTimer()
 8002a40:	f115 0660 	adds.w	r6, r5, #96	; 0x60
 8002a44:	d00c      	beq.n	8002a60 <_ZN13HardwareTimerD1Ev+0x40>
 8002a46:	f105 04b0 	add.w	r4, r5, #176	; 0xb0
 8002a4a:	42a6      	cmp	r6, r4
 8002a4c:	d008      	beq.n	8002a60 <_ZN13HardwareTimerD1Ev+0x40>
 8002a4e:	3c10      	subs	r4, #16
      if (_M_manager)
 8002a50:	68a3      	ldr	r3, [r4, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0f9      	beq.n	8002a4a <_ZN13HardwareTimerD1Ev+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8002a56:	2203      	movs	r2, #3
 8002a58:	4621      	mov	r1, r4
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	4798      	blx	r3
    class function<_Res(_ArgTypes...)>
 8002a5e:	e7f4      	b.n	8002a4a <_ZN13HardwareTimerD1Ev+0x2a>
}
 8002a60:	4628      	mov	r0, r5
 8002a62:	bd70      	pop	{r4, r5, r6, pc}
 8002a64:	20000318 	.word	0x20000318

08002a68 <_ZN13HardwareTimer5setupEP11TIM_TypeDef>:
{
 8002a68:	b570      	push	{r4, r5, r6, lr}
 8002a6a:	4604      	mov	r4, r0
 8002a6c:	460d      	mov	r5, r1
  uint32_t index = get_timer_index(instance);
 8002a6e:	4608      	mov	r0, r1
 8002a70:	f7ff ffb8 	bl	80029e4 <_Z15get_timer_indexP11TIM_TypeDef>
 8002a74:	4606      	mov	r6, r0
  if (index == UNKNOWN_TIMER) {
 8002a76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a7a:	4298      	cmp	r0, r3
 8002a7c:	d023      	beq.n	8002ac6 <_ZN13HardwareTimer5setupEP11TIM_TypeDef+0x5e>
  if (_timerObj.handle.Instance) {
 8002a7e:	6923      	ldr	r3, [r4, #16]
 8002a80:	b11b      	cbz	r3, 8002a8a <_ZN13HardwareTimer5setupEP11TIM_TypeDef+0x22>
    Error_Handler();
 8002a82:	2152      	movs	r1, #82	; 0x52
 8002a84:	4828      	ldr	r0, [pc, #160]	; (8002b28 <_ZN13HardwareTimer5setupEP11TIM_TypeDef+0xc0>)
 8002a86:	f000 fec2 	bl	800380e <_Error_Handler>
  HardwareTimer_Handle[index] = &_timerObj;
 8002a8a:	f104 030c 	add.w	r3, r4, #12
 8002a8e:	4a27      	ldr	r2, [pc, #156]	; (8002b2c <_ZN13HardwareTimer5setupEP11TIM_TypeDef+0xc4>)
 8002a90:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  _timerObj.handle.Instance = instance;
 8002a94:	6125      	str	r5, [r4, #16]
  _timerObj.handle.Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a96:	2500      	movs	r5, #0
 8002a98:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
  _timerObj.handle.hdma[0] = NULL;
 8002a9c:	6325      	str	r5, [r4, #48]	; 0x30
  _timerObj.handle.hdma[1] = NULL;
 8002a9e:	6365      	str	r5, [r4, #52]	; 0x34
  _timerObj.handle.hdma[2] = NULL;
 8002aa0:	63a5      	str	r5, [r4, #56]	; 0x38
  _timerObj.handle.hdma[3] = NULL;
 8002aa2:	63e5      	str	r5, [r4, #60]	; 0x3c
  _timerObj.handle.hdma[4] = NULL;
 8002aa4:	6425      	str	r5, [r4, #64]	; 0x40
  _timerObj.handle.hdma[5] = NULL;
 8002aa6:	6465      	str	r5, [r4, #68]	; 0x44
  _timerObj.handle.hdma[6] = NULL;
 8002aa8:	64a5      	str	r5, [r4, #72]	; 0x48
  _timerObj.handle.Lock = HAL_UNLOCKED;
 8002aaa:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
  _timerObj.handle.State = HAL_TIM_STATE_RESET;
 8002aae:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
  _timerObj.__this = (void *)this;
 8002ab2:	60e4      	str	r4, [r4, #12]
  _timerObj.preemptPriority = TIM_IRQ_PRIO;
 8002ab4:	230e      	movs	r3, #14
 8002ab6:	65a3      	str	r3, [r4, #88]	; 0x58
  _timerObj.subPriority = TIM_IRQ_SUBPRIO;
 8002ab8:	65e5      	str	r5, [r4, #92]	; 0x5c
  enableTimerClock(&(_timerObj.handle));
 8002aba:	f104 0610 	add.w	r6, r4, #16
 8002abe:	4630      	mov	r0, r6
 8002ac0:	f000 fea8 	bl	8003814 <enableTimerClock>
  for (int i = 0; i < TIMER_CHANNELS + 1 ; i++) {
 8002ac4:	e005      	b.n	8002ad2 <_ZN13HardwareTimer5setupEP11TIM_TypeDef+0x6a>
    Error_Handler();
 8002ac6:	214d      	movs	r1, #77	; 0x4d
 8002ac8:	4817      	ldr	r0, [pc, #92]	; (8002b28 <_ZN13HardwareTimer5setupEP11TIM_TypeDef+0xc0>)
 8002aca:	f000 fea0 	bl	800380e <_Error_Handler>
 8002ace:	e7d6      	b.n	8002a7e <_ZN13HardwareTimer5setupEP11TIM_TypeDef+0x16>
  for (int i = 0; i < TIMER_CHANNELS + 1 ; i++) {
 8002ad0:	3501      	adds	r5, #1
 8002ad2:	2d04      	cmp	r5, #4
 8002ad4:	dc10      	bgt.n	8002af8 <_ZN13HardwareTimer5setupEP11TIM_TypeDef+0x90>
	if (_M_manager)
 8002ad6:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 8002ada:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f7      	beq.n	8002ad0 <_ZN13HardwareTimer5setupEP11TIM_TypeDef+0x68>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 8002ae0:	1da8      	adds	r0, r5, #6
 8002ae2:	eb04 1000 	add.w	r0, r4, r0, lsl #4
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	4601      	mov	r1, r0
 8002aea:	4798      	blx	r3
	    _M_manager = nullptr;
 8002aec:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 8002af0:	2200      	movs	r2, #0
 8002af2:	669a      	str	r2, [r3, #104]	; 0x68
	    _M_invoker = nullptr;
 8002af4:	66da      	str	r2, [r3, #108]	; 0x6c
 8002af6:	e7eb      	b.n	8002ad0 <_ZN13HardwareTimer5setupEP11TIM_TypeDef+0x68>
  for (int i = 0; i < TIMER_CHANNELS; i++) {
 8002af8:	2300      	movs	r3, #0
 8002afa:	e005      	b.n	8002b08 <_ZN13HardwareTimer5setupEP11TIM_TypeDef+0xa0>
    isComplementaryChannel[i] = false;
 8002afc:	2200      	movs	r2, #0
 8002afe:	54e2      	strb	r2, [r4, r3]
    _ChannelMode[i] = TIMER_DISABLED;
 8002b00:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 8002b04:	808a      	strh	r2, [r1, #4]
  for (int i = 0; i < TIMER_CHANNELS; i++) {
 8002b06:	3301      	adds	r3, #1
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	ddf7      	ble.n	8002afc <_ZN13HardwareTimer5setupEP11TIM_TypeDef+0x94>
  _timerObj.handle.Init.Prescaler = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	6163      	str	r3, [r4, #20]
  _timerObj.handle.Init.Period = MAX_RELOAD;
 8002b10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b14:	61e2      	str	r2, [r4, #28]
  _timerObj.handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b16:	61a3      	str	r3, [r4, #24]
  _timerObj.handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b18:	6223      	str	r3, [r4, #32]
  _timerObj.handle.Init.RepetitionCounter = 0;
 8002b1a:	6263      	str	r3, [r4, #36]	; 0x24
  _timerObj.handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	62a3      	str	r3, [r4, #40]	; 0x28
  HAL_TIM_Base_Init(&(_timerObj.handle));
 8002b20:	4630      	mov	r0, r6
 8002b22:	f7fe fed7 	bl	80018d4 <HAL_TIM_Base_Init>
}
 8002b26:	bd70      	pop	{r4, r5, r6, pc}
 8002b28:	0800411c 	.word	0x0800411c
 8002b2c:	20000318 	.word	0x20000318

08002b30 <_ZN13HardwareTimerC1EP11TIM_TypeDef>:
HardwareTimer::HardwareTimer(TIM_TypeDef *instance)
 8002b30:	b538      	push	{r3, r4, r5, lr}
 8002b32:	4605      	mov	r5, r0
 8002b34:	f100 0260 	add.w	r2, r0, #96	; 0x60
 8002b38:	2304      	movs	r3, #4
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	db04      	blt.n	8002b48 <_ZN13HardwareTimerC1EP11TIM_TypeDef+0x18>
    _Function_base() : _M_manager(nullptr) { }
 8002b3e:	2400      	movs	r4, #0
 8002b40:	6094      	str	r4, [r2, #8]
 8002b42:	3210      	adds	r2, #16
 8002b44:	3b01      	subs	r3, #1
 8002b46:	e7f8      	b.n	8002b3a <_ZN13HardwareTimerC1EP11TIM_TypeDef+0xa>
  _timerObj.handle.Instance = nullptr;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	612b      	str	r3, [r5, #16]
  setup(instance);
 8002b4c:	4628      	mov	r0, r5
 8002b4e:	f7ff ff8b 	bl	8002a68 <_ZN13HardwareTimer5setupEP11TIM_TypeDef>
}
 8002b52:	4628      	mov	r0, r5
 8002b54:	bd38      	pop	{r3, r4, r5, pc}
	...

08002b58 <_ZN13HardwareTimer15getTimerClkFreqEv>:
  * @brief  This function return the timer clock frequency.
  * @param  None
  * @retval frequency in Hz
  */
uint32_t HardwareTimer::getTimerClkFreq()
{
 8002b58:	b510      	push	{r4, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	4604      	mov	r4, r0
#if defined(STM32MP1xx)
  uint8_t timerClkSrc = getTimerClkSrc(_timerObj.handle.Instance);
  uint64_t clkSelection = timerClkSrc == 1 ? RCC_PERIPHCLK_TIMG1 : RCC_PERIPHCLK_TIMG2;
  return HAL_RCCEx_GetPeriphCLKFreq(clkSelection);
#else
  RCC_ClkInitTypeDef    clkconfig = {};
 8002b5e:	2300      	movs	r3, #0
 8002b60:	9301      	str	r3, [sp, #4]
 8002b62:	9302      	str	r3, [sp, #8]
 8002b64:	9303      	str	r3, [sp, #12]
 8002b66:	9304      	str	r3, [sp, #16]
 8002b68:	9305      	str	r3, [sp, #20]
  uint32_t              pFLatency = 0U;
 8002b6a:	9300      	str	r3, [sp, #0]
  uint32_t              uwTimclock = 0U, uwAPBxPrescaler = 0U;

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b6c:	4669      	mov	r1, sp
 8002b6e:	a801      	add	r0, sp, #4
 8002b70:	f7fe fd56 	bl	8001620 <HAL_RCC_GetClockConfig>
  switch (getTimerClkSrc(_timerObj.handle.Instance)) {
 8002b74:	6920      	ldr	r0, [r4, #16]
 8002b76:	f000 ff49 	bl	8003a0c <getTimerClkSrc>
 8002b7a:	2801      	cmp	r0, #1
 8002b7c:	d008      	beq.n	8002b90 <_ZN13HardwareTimer15getTimerClkFreqEv+0x38>
 8002b7e:	2802      	cmp	r0, #2
 8002b80:	d015      	beq.n	8002bae <_ZN13HardwareTimer15getTimerClkFreqEv+0x56>
      uwTimclock = HAL_RCC_GetPCLK2Freq();
      break;
#endif
    default:
    case 0: // Unknown timer clock source
      Error_Handler();
 8002b82:	f240 5156 	movw	r1, #1366	; 0x556
 8002b86:	480e      	ldr	r0, [pc, #56]	; (8002bc0 <_ZN13HardwareTimer15getTimerClkFreqEv+0x68>)
 8002b88:	f000 fe41 	bl	800380e <_Error_Handler>
  uint32_t              uwTimclock = 0U, uwAPBxPrescaler = 0U;
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	e015      	b.n	8002bbc <_ZN13HardwareTimer15getTimerClkFreqEv+0x64>
      uwAPBxPrescaler = clkconfig.APB1CLKDivider;
 8002b90:	9c04      	ldr	r4, [sp, #16]
      uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002b92:	f7fe fd25 	bl	80015e0 <HAL_RCC_GetPCLK1Freq>
        uwTimclock *= 4;
        break;
    } else
#endif
#endif
    switch (uwAPBxPrescaler) {
 8002b96:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8002b9a:	d006      	beq.n	8002baa <_ZN13HardwareTimer15getTimerClkFreqEv+0x52>
 8002b9c:	d80b      	bhi.n	8002bb6 <_ZN13HardwareTimer15getTimerClkFreqEv+0x5e>
 8002b9e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8002ba2:	d002      	beq.n	8002baa <_ZN13HardwareTimer15getTimerClkFreqEv+0x52>
 8002ba4:	f5b4 6fa0 	cmp.w	r4, #1280	; 0x500
 8002ba8:	d108      	bne.n	8002bbc <_ZN13HardwareTimer15getTimerClkFreqEv+0x64>
        break;
      case RCC_HCLK_DIV2:
      case RCC_HCLK_DIV4:
      case RCC_HCLK_DIV8:
      case RCC_HCLK_DIV16:
        uwTimclock *= 2;
 8002baa:	0040      	lsls	r0, r0, #1
        break;
    }
#endif /* STM32H7xx */
  return uwTimclock;
 8002bac:	e006      	b.n	8002bbc <_ZN13HardwareTimer15getTimerClkFreqEv+0x64>
      uwAPBxPrescaler = clkconfig.APB2CLKDivider;
 8002bae:	9c05      	ldr	r4, [sp, #20]
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002bb0:	f7fe fd26 	bl	8001600 <HAL_RCC_GetPCLK2Freq>
      break;
 8002bb4:	e7ef      	b.n	8002b96 <_ZN13HardwareTimer15getTimerClkFreqEv+0x3e>
    switch (uwAPBxPrescaler) {
 8002bb6:	f5b4 6fe0 	cmp.w	r4, #1792	; 0x700
 8002bba:	d0f6      	beq.n	8002baa <_ZN13HardwareTimer15getTimerClkFreqEv+0x52>
#endif /* STM32MP1xx */
}
 8002bbc:	b006      	add	sp, #24
 8002bbe:	bd10      	pop	{r4, pc}
 8002bc0:	0800411c 	.word	0x0800411c

08002bc4 <_ZN13HardwareTimer11setOverflowEm13TimerFormat_t>:
{
 8002bc4:	b538      	push	{r3, r4, r5, lr}
 8002bc6:	4605      	mov	r5, r0
 8002bc8:	460c      	mov	r4, r1
  switch (format) {
 8002bca:	2a01      	cmp	r2, #1
 8002bcc:	d007      	beq.n	8002bde <_ZN13HardwareTimer11setOverflowEm13TimerFormat_t+0x1a>
 8002bce:	2a02      	cmp	r2, #2
 8002bd0:	d014      	beq.n	8002bfc <_ZN13HardwareTimer11setOverflowEm13TimerFormat_t+0x38>
  if (PeriodTicks > 0) {
 8002bd2:	b104      	cbz	r4, 8002bd6 <_ZN13HardwareTimer11setOverflowEm13TimerFormat_t+0x12>
    ARR_RegisterValue = PeriodTicks - 1;
 8002bd4:	3c01      	subs	r4, #1
  __HAL_TIM_SET_AUTORELOAD(&_timerObj.handle, ARR_RegisterValue);
 8002bd6:	692b      	ldr	r3, [r5, #16]
 8002bd8:	62dc      	str	r4, [r3, #44]	; 0x2c
 8002bda:	61ec      	str	r4, [r5, #28]
}
 8002bdc:	bd38      	pop	{r3, r4, r5, pc}
      period_cyc = overflow * (getTimerClkFreq() / 1000000);
 8002bde:	f7ff ffbb 	bl	8002b58 <_ZN13HardwareTimer15getTimerClkFreqEv>
 8002be2:	490c      	ldr	r1, [pc, #48]	; (8002c14 <_ZN13HardwareTimer11setOverflowEm13TimerFormat_t+0x50>)
 8002be4:	fba1 3100 	umull	r3, r1, r1, r0
 8002be8:	0c89      	lsrs	r1, r1, #18
 8002bea:	fb04 f401 	mul.w	r4, r4, r1
      Prescalerfactor = (period_cyc / 0x10000) + 1;
 8002bee:	0c23      	lsrs	r3, r4, #16
 8002bf0:	1c59      	adds	r1, r3, #1
      LL_TIM_SetPrescaler(_timerObj.handle.Instance, Prescalerfactor - 1);
 8002bf2:	692a      	ldr	r2, [r5, #16]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002bf4:	6293      	str	r3, [r2, #40]	; 0x28
      PeriodTicks = period_cyc / Prescalerfactor;
 8002bf6:	fbb4 f4f1 	udiv	r4, r4, r1
      break;
 8002bfa:	e7ea      	b.n	8002bd2 <_ZN13HardwareTimer11setOverflowEm13TimerFormat_t+0xe>
      period_cyc = getTimerClkFreq() / overflow;
 8002bfc:	f7ff ffac 	bl	8002b58 <_ZN13HardwareTimer15getTimerClkFreqEv>
 8002c00:	fbb0 f4f4 	udiv	r4, r0, r4
      Prescalerfactor = (period_cyc / 0x10000) + 1;
 8002c04:	0c23      	lsrs	r3, r4, #16
 8002c06:	1c59      	adds	r1, r3, #1
      LL_TIM_SetPrescaler(_timerObj.handle.Instance, Prescalerfactor - 1);
 8002c08:	692a      	ldr	r2, [r5, #16]
 8002c0a:	6293      	str	r3, [r2, #40]	; 0x28
      PeriodTicks = period_cyc / Prescalerfactor;
 8002c0c:	fbb4 f4f1 	udiv	r4, r4, r1
      break;
 8002c10:	e7df      	b.n	8002bd2 <_ZN13HardwareTimer11setOverflowEm13TimerFormat_t+0xe>
 8002c12:	bf00      	nop
 8002c14:	431bde83 	.word	0x431bde83

08002c18 <TIM1_UP_IRQHandler>:
    * @brief  TIM1 IRQHandler common with TIM10 and TIM16 on some STM32F1xx
    * @param  None
    * @retval None
    */
  void TIM1_IRQHandler(void)
  {
 8002c18:	b508      	push	{r3, lr}
    if (HardwareTimer_Handle[TIMER1_INDEX]) {
 8002c1a:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <TIM1_UP_IRQHandler+0x10>)
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	b110      	cbz	r0, 8002c26 <TIM1_UP_IRQHandler+0xe>
      HAL_TIM_IRQHandler(&HardwareTimer_Handle[TIMER1_INDEX]->handle);
 8002c20:	3004      	adds	r0, #4
 8002c22:	f7fe fd5f 	bl	80016e4 <HAL_TIM_IRQHandler>
    if (HardwareTimer_Handle[TIMER16_INDEX]) {
      HAL_TIM_IRQHandler(&HardwareTimer_Handle[TIMER16_INDEX]->handle);
    }
#endif
#endif
  }
 8002c26:	bd08      	pop	{r3, pc}
 8002c28:	20000318 	.word	0x20000318

08002c2c <TIM1_CC_IRQHandler>:

#if !defined(STM32F3xx)
  void TIM1_CC_IRQHandler(void)
  {
 8002c2c:	b508      	push	{r3, lr}
    if (HardwareTimer_Handle[TIMER1_INDEX]) {
 8002c2e:	4b03      	ldr	r3, [pc, #12]	; (8002c3c <TIM1_CC_IRQHandler+0x10>)
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	b110      	cbz	r0, 8002c3a <TIM1_CC_IRQHandler+0xe>
      HAL_TIM_IRQHandler(&HardwareTimer_Handle[TIMER1_INDEX]->handle);
 8002c34:	3004      	adds	r0, #4
 8002c36:	f7fe fd55 	bl	80016e4 <HAL_TIM_IRQHandler>
    }
  }
 8002c3a:	bd08      	pop	{r3, pc}
 8002c3c:	20000318 	.word	0x20000318

08002c40 <TIM2_IRQHandler>:
    * @brief  TIM2 IRQHandler
    * @param  None
    * @retval None
    */
  void TIM2_IRQHandler(void)
  {
 8002c40:	b508      	push	{r3, lr}
    if (HardwareTimer_Handle[TIMER2_INDEX]) {
 8002c42:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <TIM2_IRQHandler+0x10>)
 8002c44:	6858      	ldr	r0, [r3, #4]
 8002c46:	b110      	cbz	r0, 8002c4e <TIM2_IRQHandler+0xe>
      HAL_TIM_IRQHandler(&HardwareTimer_Handle[TIMER2_INDEX]->handle);
 8002c48:	3004      	adds	r0, #4
 8002c4a:	f7fe fd4b 	bl	80016e4 <HAL_TIM_IRQHandler>
    }
  }
 8002c4e:	bd08      	pop	{r3, pc}
 8002c50:	20000318 	.word	0x20000318

08002c54 <TIM3_IRQHandler>:
    * @brief  TIM3 IRQHandler
    * @param  None
    * @retval None
    */
  void TIM3_IRQHandler(void)
  {
 8002c54:	b508      	push	{r3, lr}
    if (HardwareTimer_Handle[TIMER3_INDEX]) {
 8002c56:	4b03      	ldr	r3, [pc, #12]	; (8002c64 <TIM3_IRQHandler+0x10>)
 8002c58:	6898      	ldr	r0, [r3, #8]
 8002c5a:	b110      	cbz	r0, 8002c62 <TIM3_IRQHandler+0xe>
      HAL_TIM_IRQHandler(&HardwareTimer_Handle[TIMER3_INDEX]->handle);
 8002c5c:	3004      	adds	r0, #4
 8002c5e:	f7fe fd41 	bl	80016e4 <HAL_TIM_IRQHandler>
#if defined(STM32G0xx) && defined(TIM4_BASE)
    if (HardwareTimer_Handle[TIMER4_INDEX]) {
      HAL_TIM_IRQHandler(&HardwareTimer_Handle[TIMER4_INDEX]->handle);
    }
#endif
  }
 8002c62:	bd08      	pop	{r3, pc}
 8002c64:	20000318 	.word	0x20000318

08002c68 <TIM4_IRQHandler>:
    * @brief  TIM4 IRQHandler
    * @param  None
    * @retval None
    */
  void TIM4_IRQHandler(void)
  {
 8002c68:	b508      	push	{r3, lr}
    if (HardwareTimer_Handle[TIMER4_INDEX]) {
 8002c6a:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <TIM4_IRQHandler+0x10>)
 8002c6c:	68d8      	ldr	r0, [r3, #12]
 8002c6e:	b110      	cbz	r0, 8002c76 <TIM4_IRQHandler+0xe>
      HAL_TIM_IRQHandler(&HardwareTimer_Handle[TIMER4_INDEX]->handle);
 8002c70:	3004      	adds	r0, #4
 8002c72:	f7fe fd37 	bl	80016e4 <HAL_TIM_IRQHandler>
    }
  }
 8002c76:	bd08      	pop	{r3, pc}
 8002c78:	20000318 	.word	0x20000318

08002c7c <_ZNSt8functionIFvvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 8002c7c:	b538      	push	{r3, r4, r5, lr}
 8002c7e:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
 8002c80:	2300      	movs	r3, #0
 8002c82:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 8002c84:	688b      	ldr	r3, [r1, #8]
      if (static_cast<bool>(__x))
 8002c86:	b133      	cbz	r3, 8002c96 <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
 8002c88:	460d      	mov	r5, r1
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8002c8e:	68eb      	ldr	r3, [r5, #12]
 8002c90:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8002c92:	68ab      	ldr	r3, [r5, #8]
 8002c94:	60a3      	str	r3, [r4, #8]
    }
 8002c96:	4620      	mov	r0, r4
 8002c98:	bd38      	pop	{r3, r4, r5, pc}

08002c9a <_ZN13HardwareTimer15attachInterruptESt8functionIFvvEE>:
{
 8002c9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c9c:	b08b      	sub	sp, #44	; 0x2c
 8002c9e:	4604      	mov	r4, r0
 8002ca0:	460e      	mov	r6, r1
    bool _M_empty() const { return !_M_manager; }
 8002ca2:	6e83      	ldr	r3, [r0, #104]	; 0x68
  if (callbacks[0]) {
 8002ca4:	b303      	cbz	r3, 8002ce8 <_ZN13HardwareTimer15attachInterruptESt8functionIFvvEE+0x4e>
    callbacks[0] = callback;
 8002ca6:	3460      	adds	r4, #96	; 0x60
	function(__x).swap(*this);
 8002ca8:	ad02      	add	r5, sp, #8
 8002caa:	4628      	mov	r0, r5
 8002cac:	f7ff ffe6 	bl	8002c7c <_ZNSt8functionIFvvEEC1ERKS1_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002cb0:	466b      	mov	r3, sp
 8002cb2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002cb6:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8002cba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cbe:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8002cc2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002cc6:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002cca:	9a04      	ldr	r2, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8002ccc:	68a3      	ldr	r3, [r4, #8]
 8002cce:	9304      	str	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8002cd0:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002cd2:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8002cd4:	68e1      	ldr	r1, [r4, #12]
 8002cd6:	9105      	str	r1, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 8002cd8:	60e2      	str	r2, [r4, #12]
      if (_M_manager)
 8002cda:	b11b      	cbz	r3, 8002ce4 <_ZN13HardwareTimer15attachInterruptESt8functionIFvvEE+0x4a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8002cdc:	2203      	movs	r2, #3
 8002cde:	a902      	add	r1, sp, #8
 8002ce0:	4608      	mov	r0, r1
 8002ce2:	4798      	blx	r3
}
 8002ce4:	b00b      	add	sp, #44	; 0x2c
 8002ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    callbacks[0] = callback;
 8002ce8:	f100 0560 	add.w	r5, r0, #96	; 0x60
	function(__x).swap(*this);
 8002cec:	af06      	add	r7, sp, #24
 8002cee:	4638      	mov	r0, r7
 8002cf0:	f7ff ffc4 	bl	8002c7c <_ZNSt8functionIFvvEEC1ERKS1_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002cf4:	466b      	mov	r3, sp
 8002cf6:	e897 0003 	ldmia.w	r7, {r0, r1}
 8002cfa:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8002cfe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002d02:	e887 0003 	stmia.w	r7, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8002d06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002d0a:	e885 0003 	stmia.w	r5, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002d0e:	9a08      	ldr	r2, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 8002d10:	68ab      	ldr	r3, [r5, #8]
 8002d12:	9308      	str	r3, [sp, #32]
      __b = _GLIBCXX_MOVE(__tmp);
 8002d14:	60aa      	str	r2, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 8002d18:	68e9      	ldr	r1, [r5, #12]
 8002d1a:	9109      	str	r1, [sp, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
 8002d1c:	60ea      	str	r2, [r5, #12]
      if (_M_manager)
 8002d1e:	b11b      	cbz	r3, 8002d28 <_ZN13HardwareTimer15attachInterruptESt8functionIFvvEE+0x8e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8002d20:	2203      	movs	r2, #3
 8002d22:	a906      	add	r1, sp, #24
 8002d24:	4608      	mov	r0, r1
 8002d26:	4798      	blx	r3
    bool _M_empty() const { return !_M_manager; }
 8002d28:	68b3      	ldr	r3, [r6, #8]
    if (callback) {
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0da      	beq.n	8002ce4 <_ZN13HardwareTimer15attachInterruptESt8functionIFvvEE+0x4a>
      __HAL_TIM_CLEAR_FLAG(&(_timerObj.handle), TIM_FLAG_UPDATE);
 8002d2e:	6923      	ldr	r3, [r4, #16]
 8002d30:	f06f 0201 	mvn.w	r2, #1
 8002d34:	611a      	str	r2, [r3, #16]
      __HAL_TIM_ENABLE_IT(&(_timerObj.handle), TIM_IT_UPDATE);
 8002d36:	6922      	ldr	r2, [r4, #16]
 8002d38:	68d3      	ldr	r3, [r2, #12]
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	60d3      	str	r3, [r2, #12]
}
 8002d40:	e7d0      	b.n	8002ce4 <_ZN13HardwareTimer15attachInterruptESt8functionIFvvEE+0x4a>

08002d42 <_ZNKSt8functionIFvvEEclEv>:

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8002d42:	b508      	push	{r3, lr}
    bool _M_empty() const { return !_M_manager; }
 8002d44:	6883      	ldr	r3, [r0, #8]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8002d46:	b113      	cbz	r3, 8002d4e <_ZNKSt8functionIFvvEEclEv+0xc>
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8002d48:	68c3      	ldr	r3, [r0, #12]
 8002d4a:	4798      	blx	r3
    }
 8002d4c:	bd08      	pop	{r3, pc}
	__throw_bad_function_call();
 8002d4e:	f001 f868 	bl	8003e22 <_ZSt25__throw_bad_function_callv>
	...

08002d54 <_ZN13HardwareTimer14updateCallbackEP17TIM_HandleTypeDef>:
{
 8002d54:	b510      	push	{r4, lr}
  if (!htim) {
 8002d56:	4604      	mov	r4, r0
 8002d58:	b148      	cbz	r0, 8002d6e <_ZN13HardwareTimer14updateCallbackEP17TIM_HandleTypeDef+0x1a>
  timerObj_t *obj = get_timer_obj(htim);
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f000 fd58 	bl	8003810 <get_timer_obj>
  HardwareTimer *HT = (HardwareTimer *)(obj->__this);
 8002d60:	6800      	ldr	r0, [r0, #0]
    bool _M_empty() const { return !_M_manager; }
 8002d62:	6e83      	ldr	r3, [r0, #104]	; 0x68
  if (HT->callbacks[0]) {
 8002d64:	b113      	cbz	r3, 8002d6c <_ZN13HardwareTimer14updateCallbackEP17TIM_HandleTypeDef+0x18>
    HT->callbacks[0]();
 8002d66:	3060      	adds	r0, #96	; 0x60
 8002d68:	f7ff ffeb 	bl	8002d42 <_ZNKSt8functionIFvvEEclEv>
}
 8002d6c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002d6e:	f240 415a 	movw	r1, #1114	; 0x45a
 8002d72:	4802      	ldr	r0, [pc, #8]	; (8002d7c <_ZN13HardwareTimer14updateCallbackEP17TIM_HandleTypeDef+0x28>)
 8002d74:	f000 fd4b 	bl	800380e <_Error_Handler>
 8002d78:	e7ef      	b.n	8002d5a <_ZN13HardwareTimer14updateCallbackEP17TIM_HandleTypeDef+0x6>
 8002d7a:	bf00      	nop
 8002d7c:	0800411c 	.word	0x0800411c

08002d80 <HAL_TIM_PeriodElapsedCallback>:
  {
 8002d80:	b508      	push	{r3, lr}
    HardwareTimer::updateCallback(htim);
 8002d82:	f7ff ffe7 	bl	8002d54 <_ZN13HardwareTimer14updateCallbackEP17TIM_HandleTypeDef>
  }
 8002d86:	bd08      	pop	{r3, pc}

08002d88 <_ZN13HardwareTimer22captureCompareCallbackEP17TIM_HandleTypeDef>:
{
 8002d88:	b538      	push	{r3, r4, r5, lr}
  if (!htim) {
 8002d8a:	4605      	mov	r5, r0
 8002d8c:	b148      	cbz	r0, 8002da2 <_ZN13HardwareTimer22captureCompareCallbackEP17TIM_HandleTypeDef+0x1a>
  uint32_t channel = htim->Channel;
 8002d8e:	7f2b      	ldrb	r3, [r5, #28]
  switch (htim->Channel) {
 8002d90:	3b01      	subs	r3, #1
 8002d92:	2b07      	cmp	r3, #7
 8002d94:	d819      	bhi.n	8002dca <_ZN13HardwareTimer22captureCompareCallbackEP17TIM_HandleTypeDef+0x42>
 8002d96:	e8df f003 	tbb	[pc, r3]
 8002d9a:	1b0a      	.short	0x1b0a
 8002d9c:	18180c18 	.word	0x18180c18
 8002da0:	1918      	.short	0x1918
    Error_Handler();
 8002da2:	f240 416d 	movw	r1, #1133	; 0x46d
 8002da6:	480b      	ldr	r0, [pc, #44]	; (8002dd4 <_ZN13HardwareTimer22captureCompareCallbackEP17TIM_HandleTypeDef+0x4c>)
 8002da8:	f000 fd31 	bl	800380e <_Error_Handler>
 8002dac:	e7ef      	b.n	8002d8e <_ZN13HardwareTimer22captureCompareCallbackEP17TIM_HandleTypeDef+0x6>
  uint32_t channel = htim->Channel;
 8002dae:	2401      	movs	r4, #1
 8002db0:	e000      	b.n	8002db4 <_ZN13HardwareTimer22captureCompareCallbackEP17TIM_HandleTypeDef+0x2c>
        channel = 3;
 8002db2:	2403      	movs	r4, #3
  timerObj_t *obj = get_timer_obj(htim);
 8002db4:	4628      	mov	r0, r5
 8002db6:	f000 fd2b 	bl	8003810 <get_timer_obj>
  HardwareTimer *HT = (HardwareTimer *)(obj->__this);
 8002dba:	6800      	ldr	r0, [r0, #0]
  if (HT->callbacks[channel]) {
 8002dbc:	1da3      	adds	r3, r4, #6
 8002dbe:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 8002dc2:	6883      	ldr	r3, [r0, #8]
 8002dc4:	b10b      	cbz	r3, 8002dca <_ZN13HardwareTimer22captureCompareCallbackEP17TIM_HandleTypeDef+0x42>
    HT->callbacks[channel]();
 8002dc6:	f7ff ffbc 	bl	8002d42 <_ZNKSt8functionIFvvEEclEv>
}
 8002dca:	bd38      	pop	{r3, r4, r5, pc}
        channel = 4;
 8002dcc:	2404      	movs	r4, #4
        break;
 8002dce:	e7f1      	b.n	8002db4 <_ZN13HardwareTimer22captureCompareCallbackEP17TIM_HandleTypeDef+0x2c>
        channel = 2;
 8002dd0:	2402      	movs	r4, #2
 8002dd2:	e7ef      	b.n	8002db4 <_ZN13HardwareTimer22captureCompareCallbackEP17TIM_HandleTypeDef+0x2c>
 8002dd4:	0800411c 	.word	0x0800411c

08002dd8 <HAL_TIM_IC_CaptureCallback>:
  {
 8002dd8:	b508      	push	{r3, lr}
    HardwareTimer::captureCompareCallback(htim);
 8002dda:	f7ff ffd5 	bl	8002d88 <_ZN13HardwareTimer22captureCompareCallbackEP17TIM_HandleTypeDef>
  }
 8002dde:	bd08      	pop	{r3, pc}

08002de0 <HAL_TIM_OC_DelayElapsedCallback>:
  {
 8002de0:	b508      	push	{r3, lr}
    HardwareTimer::captureCompareCallback(htim);
 8002de2:	f7ff ffd1 	bl	8002d88 <_ZN13HardwareTimer22captureCompareCallbackEP17TIM_HandleTypeDef>
  }
 8002de6:	bd08      	pop	{r3, pc}

08002de8 <_ZN6Stream9timedReadEv>:

#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait

// private method to read stream with timeout
int Stream::timedRead()
{
 8002de8:	b510      	push	{r4, lr}
 8002dea:	4604      	mov	r4, r0
  int c;
  _startMillis = millis();
 8002dec:	f000 f841 	bl	8002e72 <millis>
 8002df0:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 8002df2:	6823      	ldr	r3, [r4, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	4620      	mov	r0, r4
 8002df8:	4798      	blx	r3
    if (c >= 0) {
 8002dfa:	2800      	cmp	r0, #0
 8002dfc:	da08      	bge.n	8002e10 <_ZN6Stream9timedReadEv+0x28>
      return c;
    }
  } while (millis() - _startMillis < _timeout);
 8002dfe:	f000 f838 	bl	8002e72 <millis>
 8002e02:	68e3      	ldr	r3, [r4, #12]
 8002e04:	1ac0      	subs	r0, r0, r3
 8002e06:	68a3      	ldr	r3, [r4, #8]
 8002e08:	4298      	cmp	r0, r3
 8002e0a:	d3f2      	bcc.n	8002df2 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
 8002e0c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002e10:	bd10      	pop	{r4, pc}

08002e12 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 8002e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e14:	4607      	mov	r7, r0
 8002e16:	460c      	mov	r4, r1
 8002e18:	4616      	mov	r6, r2
  size_t count = 0;
 8002e1a:	2500      	movs	r5, #0
  while (count < length) {
 8002e1c:	42b5      	cmp	r5, r6
 8002e1e:	d20a      	bcs.n	8002e36 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
 8002e20:	4638      	mov	r0, r7
 8002e22:	f7ff ffe1 	bl	8002de8 <_ZN6Stream9timedReadEv>
    if (c < 0) {
 8002e26:	2800      	cmp	r0, #0
 8002e28:	db05      	blt.n	8002e36 <_ZN6Stream9readBytesEPcj+0x24>
      break;
    }
    *buffer++ = (char)c;
 8002e2a:	4621      	mov	r1, r4
 8002e2c:	f801 0b01 	strb.w	r0, [r1], #1
    count++;
 8002e30:	3501      	adds	r5, #1
    *buffer++ = (char)c;
 8002e32:	460c      	mov	r4, r1
  while (count < length) {
 8002e34:	e7f2      	b.n	8002e1c <_ZN6Stream9readBytesEPcj+0xa>
  }
  return count;
}
 8002e36:	4628      	mov	r0, r5
 8002e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002e3a <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
 8002e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (length < 1) {
 8002e3e:	4698      	mov	r8, r3
 8002e40:	b19b      	cbz	r3, 8002e6a <_ZN6Stream14readBytesUntilEcPcj+0x30>
 8002e42:	4606      	mov	r6, r0
 8002e44:	460f      	mov	r7, r1
 8002e46:	4614      	mov	r4, r2
    return 0;
  }
  size_t index = 0;
 8002e48:	2500      	movs	r5, #0
 8002e4a:	e004      	b.n	8002e56 <_ZN6Stream14readBytesUntilEcPcj+0x1c>
  while (index < length) {
    int c = timedRead();
    if (c < 0 || c == terminator) {
      break;
    }
    *buffer++ = (char)c;
 8002e4c:	4622      	mov	r2, r4
 8002e4e:	f802 0b01 	strb.w	r0, [r2], #1
    index++;
 8002e52:	3501      	adds	r5, #1
    *buffer++ = (char)c;
 8002e54:	4614      	mov	r4, r2
  while (index < length) {
 8002e56:	4545      	cmp	r5, r8
 8002e58:	d208      	bcs.n	8002e6c <_ZN6Stream14readBytesUntilEcPcj+0x32>
    int c = timedRead();
 8002e5a:	4630      	mov	r0, r6
 8002e5c:	f7ff ffc4 	bl	8002de8 <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) {
 8002e60:	2800      	cmp	r0, #0
 8002e62:	db03      	blt.n	8002e6c <_ZN6Stream14readBytesUntilEcPcj+0x32>
 8002e64:	4287      	cmp	r7, r0
 8002e66:	d1f1      	bne.n	8002e4c <_ZN6Stream14readBytesUntilEcPcj+0x12>
 8002e68:	e000      	b.n	8002e6c <_ZN6Stream14readBytesUntilEcPcj+0x32>
    return 0;
 8002e6a:	461d      	mov	r5, r3
  }
  return index; // return number of characters, not including null terminator
}
 8002e6c:	4628      	mov	r0, r5
 8002e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002e72 <millis>:
#ifdef __cplusplus
extern "C" {
#endif

uint32_t millis(void)
{
 8002e72:	b508      	push	{r3, lr}
  // ToDo: ensure no interrupts
  return getCurrentMillis();
 8002e74:	f000 f90c 	bl	8003090 <getCurrentMillis>
}
 8002e78:	bd08      	pop	{r3, pc}

08002e7a <_ZL10get_pin_idt>:
  * @brief  This function returns the pin ID function of the HAL PIN definition
  * @param  pin : one of the gpio pin
  * @retval None
  */
static uint8_t get_pin_id(uint16_t pin)
{
 8002e7a:	4603      	mov	r3, r0
  uint8_t id = 0;
 8002e7c:	2000      	movs	r0, #0

  while (pin != 0x0001) {
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d003      	beq.n	8002e8a <_ZL10get_pin_idt+0x10>
    pin = pin >> 1;
 8002e82:	085b      	lsrs	r3, r3, #1
    id++;
 8002e84:	3001      	adds	r0, #1
 8002e86:	b2c0      	uxtb	r0, r0
  while (pin != 0x0001) {
 8002e88:	e7f9      	b.n	8002e7e <_ZL10get_pin_idt+0x4>
  }

  return id;
}
 8002e8a:	4770      	bx	lr

08002e8c <_Z41__static_initialization_and_destruction_0ii>:
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
}

#endif /* !STM32MP1xx && !STM32L5xx */
#ifdef __cplusplus
}
 8002e8c:	b510      	push	{r4, lr}
 8002e8e:	2801      	cmp	r0, #1
 8002e90:	d005      	beq.n	8002e9e <_Z41__static_initialization_and_destruction_0ii+0x12>
static gpio_irq_conf_str gpio_irq_conf[NB_EXTI] = {
 8002e92:	b918      	cbnz	r0, 8002e9c <_Z41__static_initialization_and_destruction_0ii+0x10>
 8002e94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e98:	4299      	cmp	r1, r3
 8002e9a:	d046      	beq.n	8002f2a <_Z41__static_initialization_and_destruction_0ii+0x9e>
}
 8002e9c:	bd10      	pop	{r4, pc}
 8002e9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ea2:	4299      	cmp	r1, r3
 8002ea4:	d1f5      	bne.n	8002e92 <_Z41__static_initialization_and_destruction_0ii+0x6>
};
 8002ea6:	4b27      	ldr	r3, [pc, #156]	; (8002f44 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8002ea8:	2206      	movs	r2, #6
 8002eaa:	701a      	strb	r2, [r3, #0]
    _Function_base() : _M_manager(nullptr) { }
 8002eac:	2200      	movs	r2, #0
 8002eae:	60da      	str	r2, [r3, #12]
 8002eb0:	2407      	movs	r4, #7
 8002eb2:	751c      	strb	r4, [r3, #20]
 8002eb4:	621a      	str	r2, [r3, #32]
 8002eb6:	2408      	movs	r4, #8
 8002eb8:	f883 4028 	strb.w	r4, [r3, #40]	; 0x28
 8002ebc:	635a      	str	r2, [r3, #52]	; 0x34
 8002ebe:	2409      	movs	r4, #9
 8002ec0:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
 8002ec4:	649a      	str	r2, [r3, #72]	; 0x48
 8002ec6:	240a      	movs	r4, #10
 8002ec8:	f883 4050 	strb.w	r4, [r3, #80]	; 0x50
 8002ecc:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ece:	2417      	movs	r4, #23
 8002ed0:	f883 4064 	strb.w	r4, [r3, #100]	; 0x64
 8002ed4:	671a      	str	r2, [r3, #112]	; 0x70
 8002ed6:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
 8002eda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002ede:	f883 408c 	strb.w	r4, [r3, #140]	; 0x8c
 8002ee2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8002ee6:	f883 40a0 	strb.w	r4, [r3, #160]	; 0xa0
 8002eea:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8002eee:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
 8002ef2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8002ef6:	2428      	movs	r4, #40	; 0x28
 8002ef8:	f883 40c8 	strb.w	r4, [r3, #200]	; 0xc8
 8002efc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002f00:	f883 40dc 	strb.w	r4, [r3, #220]	; 0xdc
 8002f04:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002f08:	f883 40f0 	strb.w	r4, [r3, #240]	; 0xf0
 8002f0c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 8002f10:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
 8002f14:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8002f18:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
 8002f1c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8002f20:	f883 412c 	strb.w	r4, [r3, #300]	; 0x12c
 8002f24:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8002f28:	e7b3      	b.n	8002e92 <_Z41__static_initialization_and_destruction_0ii+0x6>
static gpio_irq_conf_str gpio_irq_conf[NB_EXTI] = {
 8002f2a:	4c07      	ldr	r4, [pc, #28]	; (8002f48 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8002f2c:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8002f2e:	429c      	cmp	r4, r3
 8002f30:	d0b4      	beq.n	8002e9c <_Z41__static_initialization_and_destruction_0ii+0x10>
 8002f32:	3c14      	subs	r4, #20
      if (_M_manager)
 8002f34:	68e3      	ldr	r3, [r4, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f8      	beq.n	8002f2c <_Z41__static_initialization_and_destruction_0ii+0xa0>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8002f3a:	1d20      	adds	r0, r4, #4
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	4601      	mov	r1, r0
 8002f40:	4798      	blx	r3
} gpio_irq_conf_str;
 8002f42:	e7f3      	b.n	8002f2c <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8002f44:	20000328 	.word	0x20000328
 8002f48:	20000468 	.word	0x20000468

08002f4c <EXTI0_IRQHandler>:
{
 8002f4c:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002f4e:	2001      	movs	r0, #1
 8002f50:	f7fe f822 	bl	8000f98 <HAL_GPIO_EXTI_IRQHandler>
}
 8002f54:	bd08      	pop	{r3, pc}

08002f56 <EXTI1_IRQHandler>:
{
 8002f56:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002f58:	2002      	movs	r0, #2
 8002f5a:	f7fe f81d 	bl	8000f98 <HAL_GPIO_EXTI_IRQHandler>
}
 8002f5e:	bd08      	pop	{r3, pc}

08002f60 <EXTI2_IRQHandler>:
{
 8002f60:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002f62:	2004      	movs	r0, #4
 8002f64:	f7fe f818 	bl	8000f98 <HAL_GPIO_EXTI_IRQHandler>
}
 8002f68:	bd08      	pop	{r3, pc}

08002f6a <EXTI3_IRQHandler>:
{
 8002f6a:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002f6c:	2008      	movs	r0, #8
 8002f6e:	f7fe f813 	bl	8000f98 <HAL_GPIO_EXTI_IRQHandler>
}
 8002f72:	bd08      	pop	{r3, pc}

08002f74 <EXTI4_IRQHandler>:
{
 8002f74:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002f76:	2010      	movs	r0, #16
 8002f78:	f7fe f80e 	bl	8000f98 <HAL_GPIO_EXTI_IRQHandler>
}
 8002f7c:	bd08      	pop	{r3, pc}

08002f7e <EXTI9_5_IRQHandler>:
{
 8002f7e:	b510      	push	{r4, lr}
  for (pin = GPIO_PIN_5; pin <= GPIO_PIN_9; pin = pin << 1) {
 8002f80:	2420      	movs	r4, #32
 8002f82:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8002f86:	d804      	bhi.n	8002f92 <EXTI9_5_IRQHandler+0x14>
    HAL_GPIO_EXTI_IRQHandler(pin);
 8002f88:	b2a0      	uxth	r0, r4
 8002f8a:	f7fe f805 	bl	8000f98 <HAL_GPIO_EXTI_IRQHandler>
  for (pin = GPIO_PIN_5; pin <= GPIO_PIN_9; pin = pin << 1) {
 8002f8e:	0064      	lsls	r4, r4, #1
 8002f90:	e7f7      	b.n	8002f82 <EXTI9_5_IRQHandler+0x4>
}
 8002f92:	bd10      	pop	{r4, pc}

08002f94 <EXTI15_10_IRQHandler>:
{
 8002f94:	b510      	push	{r4, lr}
  for (pin = GPIO_PIN_10; pin <= GPIO_PIN_15; pin = pin << 1) {
 8002f96:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002f9a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8002f9e:	d804      	bhi.n	8002faa <EXTI15_10_IRQHandler+0x16>
    HAL_GPIO_EXTI_IRQHandler(pin);
 8002fa0:	b2a0      	uxth	r0, r4
 8002fa2:	f7fd fff9 	bl	8000f98 <HAL_GPIO_EXTI_IRQHandler>
  for (pin = GPIO_PIN_10; pin <= GPIO_PIN_15; pin = pin << 1) {
 8002fa6:	0064      	lsls	r4, r4, #1
 8002fa8:	e7f7      	b.n	8002f9a <EXTI15_10_IRQHandler+0x6>
}
 8002faa:	bd10      	pop	{r4, pc}

08002fac <HAL_GPIO_EXTI_Callback>:
{
 8002fac:	b508      	push	{r3, lr}
  uint8_t irq_id = get_pin_id(GPIO_Pin);
 8002fae:	f7ff ff64 	bl	8002e7a <_ZL10get_pin_idt>
  if (gpio_irq_conf[irq_id].callback != NULL) {
 8002fb2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8002fb6:	4804      	ldr	r0, [pc, #16]	; (8002fc8 <HAL_GPIO_EXTI_Callback+0x1c>)
 8002fb8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002fbc:	3004      	adds	r0, #4
    bool _M_empty() const { return !_M_manager; }
 8002fbe:	6883      	ldr	r3, [r0, #8]
 8002fc0:	b10b      	cbz	r3, 8002fc6 <HAL_GPIO_EXTI_Callback+0x1a>
    gpio_irq_conf[irq_id].callback();
 8002fc2:	f7ff febe 	bl	8002d42 <_ZNKSt8functionIFvvEEclEv>
}
 8002fc6:	bd08      	pop	{r3, pc}
 8002fc8:	20000328 	.word	0x20000328

08002fcc <_GLOBAL__sub_I__Z22stm32_interrupt_enableP12GPIO_TypeDeftSt8functionIFvvEEm>:
}
 8002fcc:	b508      	push	{r3, lr}
 8002fce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002fd2:	2001      	movs	r0, #1
 8002fd4:	f7ff ff5a 	bl	8002e8c <_Z41__static_initialization_and_destruction_0ii>
 8002fd8:	bd08      	pop	{r3, pc}

08002fda <_GLOBAL__sub_D__Z22stm32_interrupt_enableP12GPIO_TypeDeftSt8functionIFvvEEm>:
 8002fda:	b508      	push	{r3, lr}
 8002fdc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	f7ff ff53 	bl	8002e8c <_Z41__static_initialization_and_destruction_0ii>
 8002fe6:	bd08      	pop	{r3, pc}

08002fe8 <set_GPIO_Port_Clock>:
#endif
};

/* Enable GPIO clock and return GPIO base address */
GPIO_TypeDef *set_GPIO_Port_Clock(uint32_t port_idx)
{
 8002fe8:	b086      	sub	sp, #24
  GPIO_TypeDef *gpioPort = 0;
  switch (port_idx) {
 8002fea:	2804      	cmp	r0, #4
 8002fec:	d841      	bhi.n	8003072 <set_GPIO_Port_Clock+0x8a>
 8002fee:	e8df f000 	tbb	[pc, r0]
 8002ff2:	1003      	.short	0x1003
 8002ff4:	281c      	.short	0x281c
 8002ff6:	34          	.byte	0x34
 8002ff7:	00          	.byte	0x00
    case PortA:
      gpioPort = (GPIO_TypeDef *)GPIOA_BASE;
      __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff8:	4b1f      	ldr	r3, [pc, #124]	; (8003078 <set_GPIO_Port_Clock+0x90>)
 8002ffa:	699a      	ldr	r2, [r3, #24]
 8002ffc:	f042 0204 	orr.w	r2, r2, #4
 8003000:	619a      	str	r2, [r3, #24]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	9301      	str	r3, [sp, #4]
 800300a:	9b01      	ldr	r3, [sp, #4]
      gpioPort = (GPIO_TypeDef *)GPIOA_BASE;
 800300c:	481b      	ldr	r0, [pc, #108]	; (800307c <set_GPIO_Port_Clock+0x94>)
      //TBD: error management
      gpioPort = 0;
      break;
  }
  return gpioPort;
}
 800300e:	b006      	add	sp, #24
 8003010:	4770      	bx	lr
      __HAL_RCC_GPIOB_CLK_ENABLE();
 8003012:	4b19      	ldr	r3, [pc, #100]	; (8003078 <set_GPIO_Port_Clock+0x90>)
 8003014:	699a      	ldr	r2, [r3, #24]
 8003016:	f042 0208 	orr.w	r2, r2, #8
 800301a:	619a      	str	r2, [r3, #24]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	9302      	str	r3, [sp, #8]
 8003024:	9b02      	ldr	r3, [sp, #8]
      gpioPort = (GPIO_TypeDef *)GPIOB_BASE;
 8003026:	4816      	ldr	r0, [pc, #88]	; (8003080 <set_GPIO_Port_Clock+0x98>)
      break;
 8003028:	e7f1      	b.n	800300e <set_GPIO_Port_Clock+0x26>
      __HAL_RCC_GPIOC_CLK_ENABLE();
 800302a:	4b13      	ldr	r3, [pc, #76]	; (8003078 <set_GPIO_Port_Clock+0x90>)
 800302c:	699a      	ldr	r2, [r3, #24]
 800302e:	f042 0210 	orr.w	r2, r2, #16
 8003032:	619a      	str	r2, [r3, #24]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	f003 0310 	and.w	r3, r3, #16
 800303a:	9303      	str	r3, [sp, #12]
 800303c:	9b03      	ldr	r3, [sp, #12]
      gpioPort = (GPIO_TypeDef *)GPIOC_BASE;
 800303e:	4811      	ldr	r0, [pc, #68]	; (8003084 <set_GPIO_Port_Clock+0x9c>)
      break;
 8003040:	e7e5      	b.n	800300e <set_GPIO_Port_Clock+0x26>
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8003042:	4b0d      	ldr	r3, [pc, #52]	; (8003078 <set_GPIO_Port_Clock+0x90>)
 8003044:	699a      	ldr	r2, [r3, #24]
 8003046:	f042 0220 	orr.w	r2, r2, #32
 800304a:	619a      	str	r2, [r3, #24]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f003 0320 	and.w	r3, r3, #32
 8003052:	9304      	str	r3, [sp, #16]
 8003054:	9b04      	ldr	r3, [sp, #16]
      gpioPort = (GPIO_TypeDef *)GPIOD_BASE;
 8003056:	480c      	ldr	r0, [pc, #48]	; (8003088 <set_GPIO_Port_Clock+0xa0>)
      break;
 8003058:	e7d9      	b.n	800300e <set_GPIO_Port_Clock+0x26>
      __HAL_RCC_GPIOE_CLK_ENABLE();
 800305a:	4b07      	ldr	r3, [pc, #28]	; (8003078 <set_GPIO_Port_Clock+0x90>)
 800305c:	699a      	ldr	r2, [r3, #24]
 800305e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003062:	619a      	str	r2, [r3, #24]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306a:	9305      	str	r3, [sp, #20]
 800306c:	9b05      	ldr	r3, [sp, #20]
      gpioPort = (GPIO_TypeDef *)GPIOE_BASE;
 800306e:	4807      	ldr	r0, [pc, #28]	; (800308c <set_GPIO_Port_Clock+0xa4>)
      break;
 8003070:	e7cd      	b.n	800300e <set_GPIO_Port_Clock+0x26>
      gpioPort = (GPIO_TypeDef *)GPIOE_BASE;
 8003072:	2000      	movs	r0, #0
  return gpioPort;
 8003074:	e7cb      	b.n	800300e <set_GPIO_Port_Clock+0x26>
 8003076:	bf00      	nop
 8003078:	40021000 	.word	0x40021000
 800307c:	40010800 	.word	0x40010800
 8003080:	40010c00 	.word	0x40010c00
 8003084:	40011000 	.word	0x40011000
 8003088:	40011400 	.word	0x40011400
 800308c:	40011800 	.word	0x40011800

08003090 <getCurrentMillis>:
  * @brief  Function called wto read the current millisecond
  * @param  None
  * @retval None
  */
uint32_t getCurrentMillis(void)
{
 8003090:	b508      	push	{r3, lr}
  return HAL_GetTick();
 8003092:	f7fd fd75 	bl	8000b80 <HAL_GetTick>
}
 8003096:	bd08      	pop	{r3, pc}

08003098 <pin_function>:

/**
 * Configure pin (mode, speed, output type and pull-up/pull-down)
 */
void pin_function(PinName pin, int function)
{
 8003098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800309c:	b085      	sub	sp, #20
 800309e:	4605      	mov	r5, r0
 80030a0:	4688      	mov	r8, r1
  /* Get the pin information */
  uint32_t mode  = STM_PIN_FUNCTION(function);
 80030a2:	f001 0707 	and.w	r7, r1, #7
  uint32_t afnum = STM_PIN_AFNUM(function);
 80030a6:	f3c1 2906 	ubfx	r9, r1, #8, #7
  uint32_t port = STM_PORT(pin);
 80030aa:	f3c0 1603 	ubfx	r6, r0, #4, #4
  uint32_t ll_pin  = STM_LL_GPIO_PIN(pin);
 80030ae:	f000 020f 	and.w	r2, r0, #15
 80030b2:	4bb3      	ldr	r3, [pc, #716]	; (8003380 <pin_function+0x2e8>)
 80030b4:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
  uint32_t ll_mode = 0;

  if (pin == (PinName)NC) {
 80030b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80030bc:	d00e      	beq.n	80030dc <pin_function+0x44>
    return;
  }
#endif /* DUALPAD_ANALOG_SWITCH */

  /* Enable GPIO clock */
  GPIO_TypeDef *gpio = set_GPIO_Port_Clock(port);
 80030be:	4630      	mov	r0, r6
 80030c0:	f7ff ff92 	bl	8002fe8 <set_GPIO_Port_Clock>
 80030c4:	4606      	mov	r6, r0
   *  For most families there are dedicated registers so it is
   *  not so important, register can be set at any time.
   *  But for families like F1, speed only applies to output.
   */
#if defined (STM32F1xx)
  if (mode == STM_PIN_OUTPUT) {
 80030c6:	2f01      	cmp	r7, #1
 80030c8:	d00d      	beq.n	80030e6 <pin_function+0x4e>
#endif
#if defined (STM32F1xx)
  }
#endif

  switch (mode) {
 80030ca:	2f03      	cmp	r7, #3
 80030cc:	f200 82ca 	bhi.w	8003664 <pin_function+0x5cc>
 80030d0:	e8df f017 	tbh	[pc, r7, lsl #1]
 80030d4:	001f006d 	.word	0x001f006d
 80030d8:	02cf019c 	.word	0x02cf019c
    Error_Handler();
 80030dc:	219e      	movs	r1, #158	; 0x9e
 80030de:	48a9      	ldr	r0, [pc, #676]	; (8003384 <pin_function+0x2ec>)
 80030e0:	f000 fb95 	bl	800380e <_Error_Handler>
 80030e4:	e7eb      	b.n	80030be <pin_function+0x26>
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80030e6:	0e21      	lsrs	r1, r4, #24
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80030e8:	5842      	ldr	r2, [r0, r1]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	fa94 f3a4 	rbit	r3, r4
 80030ee:	fab3 f383 	clz	r3, r3
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	2003      	movs	r0, #3
 80030f6:	fa00 f303 	lsl.w	r3, r0, r3
 80030fa:	ea22 0303 	bic.w	r3, r2, r3
 80030fe:	fa94 f2a4 	rbit	r2, r4
 8003102:	fab2 f282 	clz	r2, r2
 8003106:	0092      	lsls	r2, r2, #2
 8003108:	fa00 f202 	lsl.w	r2, r0, r2
 800310c:	4313      	orrs	r3, r2
 800310e:	5073      	str	r3, [r6, r1]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 8003110:	e7db      	b.n	80030ca <pin_function+0x32>
      ll_mode = LL_GPIO_MODE_ALTERNATE;
      /* In case of ALT function, also set the afnum */
      pin_SetAFPin(gpio, pin, afnum);
      break;
    case STM_PIN_ANALOG:
      ll_mode = LL_GPIO_MODE_ANALOG;
 8003112:	46be      	mov	lr, r7
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003114:	ea4f 6c14 	mov.w	ip, r4, lsr #24
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8003118:	f856 200c 	ldr.w	r2, [r6, ip]
 800311c:	fa94 f0a4 	rbit	r0, r4
 8003120:	fab0 f080 	clz	r0, r0
 8003124:	0080      	lsls	r0, r0, #2
 8003126:	230f      	movs	r3, #15
 8003128:	4083      	lsls	r3, r0
 800312a:	ea22 0203 	bic.w	r2, r2, r3
 800312e:	fa94 f1a4 	rbit	r1, r4
 8003132:	fab1 f181 	clz	r1, r1
 8003136:	0089      	lsls	r1, r1, #2
 8003138:	fa0e f301 	lsl.w	r3, lr, r1
 800313c:	4313      	orrs	r3, r2
 800313e:	f846 300c 	str.w	r3, [r6, ip]
  } else {
    LL_GPIO_DisablePinAnalogControl(gpio, ll_pin);
  }
#endif

  if ((mode == STM_PIN_OUTPUT) || (mode == STM_PIN_ALTERNATE)) {
 8003142:	3f01      	subs	r7, #1
 8003144:	2f01      	cmp	r7, #1
 8003146:	f240 8297 	bls.w	8003678 <pin_function+0x5e0>
    } else {
      LL_GPIO_SetPinOutputType(gpio, ll_pin, LL_GPIO_OUTPUT_PUSHPULL);
    }
  }

  pin_PullConfig(gpio, ll_pin, STM_PIN_PUPD(function));
 800314a:	f3c8 1801 	ubfx	r8, r8, #4, #2
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800314e:	0e21      	lsrs	r1, r4, #24
  return (READ_BIT(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U))) >> (POSITION_VAL(Pin) * 4U));
 8003150:	5870      	ldr	r0, [r6, r1]
 8003152:	fa94 f3a4 	rbit	r3, r4
 8003156:	fab3 f383 	clz	r3, r3
 800315a:	009a      	lsls	r2, r3, #2
 800315c:	230f      	movs	r3, #15
 800315e:	4093      	lsls	r3, r2
 8003160:	4003      	ands	r3, r0
 8003162:	fa94 f2a4 	rbit	r2, r4
 8003166:	fab2 f282 	clz	r2, r2
 800316a:	0092      	lsls	r2, r2, #2
 800316c:	40d3      	lsrs	r3, r2
{
#ifdef STM32F1xx
  uint32_t function = LL_GPIO_GetPinMode(gpio, ll_pin);
#endif
  hsem_lock(CFG_HW_GPIO_SEMID, HSEM_LOCK_DEFAULT_RETRY);
  switch (pull_config) {
 800316e:	f1b8 0f01 	cmp.w	r8, #1
 8003172:	f000 82a8 	beq.w	80036c6 <pin_function+0x62e>
 8003176:	f1b8 0f02 	cmp.w	r8, #2
 800317a:	f000 82e5 	beq.w	8003748 <pin_function+0x6b0>
      LL_GPIO_SetPinPull(gpio, ll_pin, LL_GPIO_PULL_DOWN);
      break;
    default:
#ifdef STM32F1xx
      /*  Input+NoPull = Floating for F1 family */
      if (function == LL_GPIO_MODE_INPUT) {
 800317e:	2b08      	cmp	r3, #8
 8003180:	f040 82b0 	bne.w	80036e4 <pin_function+0x64c>
 8003184:	fa94 f3a4 	rbit	r3, r4
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8003188:	fab3 f383 	clz	r3, r3
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	220f      	movs	r2, #15
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	ea20 0003 	bic.w	r0, r0, r3
 8003198:	fa94 f4a4 	rbit	r4, r4
 800319c:	fab4 f484 	clz	r4, r4
 80031a0:	00a4      	lsls	r4, r4, #2
 80031a2:	2304      	movs	r3, #4
 80031a4:	fa03 f404 	lsl.w	r4, r3, r4
 80031a8:	4320      	orrs	r0, r4
 80031aa:	5070      	str	r0, [r6, r1]
}
 80031ac:	e29a      	b.n	80036e4 <pin_function+0x64c>
}

static inline void pin_SetF1AFPin(uint32_t afnum)
{
  // Enable AFIO clock
  __HAL_RCC_AFIO_CLK_ENABLE();
 80031ae:	4b76      	ldr	r3, [pc, #472]	; (8003388 <pin_function+0x2f0>)
 80031b0:	699a      	ldr	r2, [r3, #24]
 80031b2:	f042 0201 	orr.w	r2, r2, #1
 80031b6:	619a      	str	r2, [r3, #24]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	9301      	str	r3, [sp, #4]
 80031c0:	9b01      	ldr	r3, [sp, #4]

  switch (afnum) {
 80031c2:	f109 39ff 	add.w	r9, r9, #4294967295
 80031c6:	f1b9 0f23 	cmp.w	r9, #35	; 0x23
 80031ca:	d82c      	bhi.n	8003226 <pin_function+0x18e>
 80031cc:	e8df f019 	tbh	[pc, r9, lsl #1]
 80031d0:	002e0024 	.word	0x002e0024
 80031d4:	003e0036 	.word	0x003e0036
 80031d8:	004e0046 	.word	0x004e0046
 80031dc:	005e0056 	.word	0x005e0056
 80031e0:	006e0066 	.word	0x006e0066
 80031e4:	00800078 	.word	0x00800078
 80031e8:	00920088 	.word	0x00920088
 80031ec:	00a2009a 	.word	0x00a2009a
 80031f0:	00b600ac 	.word	0x00b600ac
 80031f4:	00c600be 	.word	0x00c600be
 80031f8:	00e000d0 	.word	0x00e000d0
 80031fc:	002b00e8 	.word	0x002b00e8
 8003200:	002b002b 	.word	0x002b002b
 8003204:	00f800f0 	.word	0x00f800f0
 8003208:	002b002b 	.word	0x002b002b
 800320c:	002b002b 	.word	0x002b002b
 8003210:	01060100 	.word	0x01060100
 8003214:	0116010e 	.word	0x0116010e
    case AFIO_SPI1_ENABLE:
      __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003218:	4a5c      	ldr	r2, [pc, #368]	; (800338c <pin_function+0x2f4>)
 800321a:	6853      	ldr	r3, [r2, #4]
 800321c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	6053      	str	r3, [r2, #4]
      ll_mode = LL_GPIO_MODE_INPUT;
 8003226:	f04f 0e08 	mov.w	lr, #8
#endif
    default:
    case AFIO_NONE:
      break;
  }
}
 800322a:	e773      	b.n	8003114 <pin_function+0x7c>
      __HAL_AFIO_REMAP_SPI1_DISABLE();
 800322c:	4a57      	ldr	r2, [pc, #348]	; (800338c <pin_function+0x2f4>)
 800322e:	6853      	ldr	r3, [r2, #4]
 8003230:	f023 0301 	bic.w	r3, r3, #1
 8003234:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003238:	6053      	str	r3, [r2, #4]
      break;
 800323a:	e7f4      	b.n	8003226 <pin_function+0x18e>
      __HAL_AFIO_REMAP_I2C1_ENABLE();
 800323c:	4a53      	ldr	r2, [pc, #332]	; (800338c <pin_function+0x2f4>)
 800323e:	6853      	ldr	r3, [r2, #4]
 8003240:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003244:	f043 0302 	orr.w	r3, r3, #2
 8003248:	6053      	str	r3, [r2, #4]
      break;
 800324a:	e7ec      	b.n	8003226 <pin_function+0x18e>
      __HAL_AFIO_REMAP_I2C1_DISABLE();
 800324c:	4a4f      	ldr	r2, [pc, #316]	; (800338c <pin_function+0x2f4>)
 800324e:	6853      	ldr	r3, [r2, #4]
 8003250:	f023 0302 	bic.w	r3, r3, #2
 8003254:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003258:	6053      	str	r3, [r2, #4]
      break;
 800325a:	e7e4      	b.n	8003226 <pin_function+0x18e>
      __HAL_AFIO_REMAP_USART1_ENABLE();
 800325c:	4a4b      	ldr	r2, [pc, #300]	; (800338c <pin_function+0x2f4>)
 800325e:	6853      	ldr	r3, [r2, #4]
 8003260:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003264:	f043 0304 	orr.w	r3, r3, #4
 8003268:	6053      	str	r3, [r2, #4]
      break;
 800326a:	e7dc      	b.n	8003226 <pin_function+0x18e>
      __HAL_AFIO_REMAP_USART1_DISABLE();
 800326c:	4a47      	ldr	r2, [pc, #284]	; (800338c <pin_function+0x2f4>)
 800326e:	6853      	ldr	r3, [r2, #4]
 8003270:	f023 0304 	bic.w	r3, r3, #4
 8003274:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003278:	6053      	str	r3, [r2, #4]
      break;
 800327a:	e7d4      	b.n	8003226 <pin_function+0x18e>
      __HAL_AFIO_REMAP_USART2_ENABLE();
 800327c:	4a43      	ldr	r2, [pc, #268]	; (800338c <pin_function+0x2f4>)
 800327e:	6853      	ldr	r3, [r2, #4]
 8003280:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003284:	f043 0308 	orr.w	r3, r3, #8
 8003288:	6053      	str	r3, [r2, #4]
      break;
 800328a:	e7cc      	b.n	8003226 <pin_function+0x18e>
      __HAL_AFIO_REMAP_USART2_DISABLE();
 800328c:	4a3f      	ldr	r2, [pc, #252]	; (800338c <pin_function+0x2f4>)
 800328e:	6853      	ldr	r3, [r2, #4]
 8003290:	f023 0308 	bic.w	r3, r3, #8
 8003294:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003298:	6053      	str	r3, [r2, #4]
      break;
 800329a:	e7c4      	b.n	8003226 <pin_function+0x18e>
      __HAL_AFIO_REMAP_USART3_ENABLE();
 800329c:	4a3b      	ldr	r2, [pc, #236]	; (800338c <pin_function+0x2f4>)
 800329e:	6853      	ldr	r3, [r2, #4]
 80032a0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80032a4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80032a8:	6053      	str	r3, [r2, #4]
      break;
 80032aa:	e7bc      	b.n	8003226 <pin_function+0x18e>
      __HAL_AFIO_REMAP_USART3_PARTIAL();
 80032ac:	4a37      	ldr	r2, [pc, #220]	; (800338c <pin_function+0x2f4>)
 80032ae:	6853      	ldr	r3, [r2, #4]
 80032b0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80032b4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80032b8:	f043 0310 	orr.w	r3, r3, #16
 80032bc:	6053      	str	r3, [r2, #4]
      break;
 80032be:	e7b2      	b.n	8003226 <pin_function+0x18e>
      __HAL_AFIO_REMAP_USART3_DISABLE();
 80032c0:	4a32      	ldr	r2, [pc, #200]	; (800338c <pin_function+0x2f4>)
 80032c2:	6853      	ldr	r3, [r2, #4]
 80032c4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80032c8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80032cc:	6053      	str	r3, [r2, #4]
      break;
 80032ce:	e7aa      	b.n	8003226 <pin_function+0x18e>
      __HAL_AFIO_REMAP_TIM1_ENABLE();
 80032d0:	4a2e      	ldr	r2, [pc, #184]	; (800338c <pin_function+0x2f4>)
 80032d2:	6853      	ldr	r3, [r2, #4]
 80032d4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80032d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032dc:	6053      	str	r3, [r2, #4]
      break;
 80032de:	e7a2      	b.n	8003226 <pin_function+0x18e>
      __HAL_AFIO_REMAP_TIM1_PARTIAL();
 80032e0:	4a2a      	ldr	r2, [pc, #168]	; (800338c <pin_function+0x2f4>)
 80032e2:	6853      	ldr	r3, [r2, #4]
 80032e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80032e8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80032ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032f0:	6053      	str	r3, [r2, #4]
      break;
 80032f2:	e798      	b.n	8003226 <pin_function+0x18e>
      __HAL_AFIO_REMAP_TIM1_DISABLE();
 80032f4:	4a25      	ldr	r2, [pc, #148]	; (800338c <pin_function+0x2f4>)
 80032f6:	6853      	ldr	r3, [r2, #4]
 80032f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80032fc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003300:	6053      	str	r3, [r2, #4]
      break;
 8003302:	e790      	b.n	8003226 <pin_function+0x18e>
      __HAL_AFIO_REMAP_TIM2_ENABLE();
 8003304:	4a21      	ldr	r2, [pc, #132]	; (800338c <pin_function+0x2f4>)
 8003306:	6853      	ldr	r3, [r2, #4]
 8003308:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800330c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003310:	6053      	str	r3, [r2, #4]
      break;
 8003312:	e788      	b.n	8003226 <pin_function+0x18e>
      __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8003314:	4a1d      	ldr	r2, [pc, #116]	; (800338c <pin_function+0x2f4>)
 8003316:	6853      	ldr	r3, [r2, #4]
 8003318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800331c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003320:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003324:	6053      	str	r3, [r2, #4]
      break;
 8003326:	e77e      	b.n	8003226 <pin_function+0x18e>
      __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8003328:	4a18      	ldr	r2, [pc, #96]	; (800338c <pin_function+0x2f4>)
 800332a:	6853      	ldr	r3, [r2, #4]
 800332c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003330:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003338:	6053      	str	r3, [r2, #4]
      break;
 800333a:	e774      	b.n	8003226 <pin_function+0x18e>
      __HAL_AFIO_REMAP_TIM2_DISABLE();
 800333c:	4a13      	ldr	r2, [pc, #76]	; (800338c <pin_function+0x2f4>)
 800333e:	6853      	ldr	r3, [r2, #4]
 8003340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003344:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003348:	6053      	str	r3, [r2, #4]
      break;
 800334a:	e76c      	b.n	8003226 <pin_function+0x18e>
      __HAL_AFIO_REMAP_TIM3_ENABLE();
 800334c:	4a0f      	ldr	r2, [pc, #60]	; (800338c <pin_function+0x2f4>)
 800334e:	6853      	ldr	r3, [r2, #4]
 8003350:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003354:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8003358:	6053      	str	r3, [r2, #4]
      break;
 800335a:	e764      	b.n	8003226 <pin_function+0x18e>
      __HAL_AFIO_REMAP_TIM3_PARTIAL();
 800335c:	4a0b      	ldr	r2, [pc, #44]	; (800338c <pin_function+0x2f4>)
 800335e:	6853      	ldr	r3, [r2, #4]
 8003360:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003364:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003368:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800336c:	6053      	str	r3, [r2, #4]
      break;
 800336e:	e75a      	b.n	8003226 <pin_function+0x18e>
      __HAL_AFIO_REMAP_TIM3_DISABLE();
 8003370:	4a06      	ldr	r2, [pc, #24]	; (800338c <pin_function+0x2f4>)
 8003372:	6853      	ldr	r3, [r2, #4]
 8003374:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003378:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800337c:	6053      	str	r3, [r2, #4]
      break;
 800337e:	e752      	b.n	8003226 <pin_function+0x18e>
 8003380:	080041fc 	.word	0x080041fc
 8003384:	08004188 	.word	0x08004188
 8003388:	40021000 	.word	0x40021000
 800338c:	40010000 	.word	0x40010000
      __HAL_AFIO_REMAP_TIM4_ENABLE();
 8003390:	4aa3      	ldr	r2, [pc, #652]	; (8003620 <pin_function+0x588>)
 8003392:	6853      	ldr	r3, [r2, #4]
 8003394:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003398:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800339c:	6053      	str	r3, [r2, #4]
      break;
 800339e:	e742      	b.n	8003226 <pin_function+0x18e>
      __HAL_AFIO_REMAP_TIM4_DISABLE();
 80033a0:	4a9f      	ldr	r2, [pc, #636]	; (8003620 <pin_function+0x588>)
 80033a2:	6853      	ldr	r3, [r2, #4]
 80033a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033a8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80033ac:	6053      	str	r3, [r2, #4]
      break;
 80033ae:	e73a      	b.n	8003226 <pin_function+0x18e>
      __HAL_AFIO_REMAP_PD01_ENABLE();
 80033b0:	4a9b      	ldr	r2, [pc, #620]	; (8003620 <pin_function+0x588>)
 80033b2:	6853      	ldr	r3, [r2, #4]
 80033b4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80033b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033bc:	6053      	str	r3, [r2, #4]
      break;
 80033be:	e732      	b.n	8003226 <pin_function+0x18e>
      __HAL_AFIO_REMAP_PD01_DISABLE();
 80033c0:	4a97      	ldr	r2, [pc, #604]	; (8003620 <pin_function+0x588>)
 80033c2:	6853      	ldr	r3, [r2, #4]
 80033c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80033c8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80033cc:	6053      	str	r3, [r2, #4]
      break;
 80033ce:	e72a      	b.n	8003226 <pin_function+0x18e>
      __HAL_AFIO_REMAP_SWJ_ENABLE();
 80033d0:	4a93      	ldr	r2, [pc, #588]	; (8003620 <pin_function+0x588>)
 80033d2:	6853      	ldr	r3, [r2, #4]
 80033d4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80033d8:	6053      	str	r3, [r2, #4]
      break;
 80033da:	e724      	b.n	8003226 <pin_function+0x18e>
      __HAL_AFIO_REMAP_SWJ_NONJTRST();
 80033dc:	4a90      	ldr	r2, [pc, #576]	; (8003620 <pin_function+0x588>)
 80033de:	6853      	ldr	r3, [r2, #4]
 80033e0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80033e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033e8:	6053      	str	r3, [r2, #4]
      break;
 80033ea:	e71c      	b.n	8003226 <pin_function+0x18e>
      __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80033ec:	4a8c      	ldr	r2, [pc, #560]	; (8003620 <pin_function+0x588>)
 80033ee:	6853      	ldr	r3, [r2, #4]
 80033f0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80033f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033f8:	6053      	str	r3, [r2, #4]
      break;
 80033fa:	e714      	b.n	8003226 <pin_function+0x18e>
      __HAL_AFIO_REMAP_SWJ_DISABLE();
 80033fc:	4a88      	ldr	r2, [pc, #544]	; (8003620 <pin_function+0x588>)
 80033fe:	6853      	ldr	r3, [r2, #4]
 8003400:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003404:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003408:	6053      	str	r3, [r2, #4]
      break;
 800340a:	e70c      	b.n	8003226 <pin_function+0x18e>
  __HAL_RCC_AFIO_CLK_ENABLE();
 800340c:	4b85      	ldr	r3, [pc, #532]	; (8003624 <pin_function+0x58c>)
 800340e:	699a      	ldr	r2, [r3, #24]
 8003410:	f042 0201 	orr.w	r2, r2, #1
 8003414:	619a      	str	r2, [r3, #24]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	9302      	str	r3, [sp, #8]
 800341e:	9b02      	ldr	r3, [sp, #8]
  switch (afnum) {
 8003420:	f109 39ff 	add.w	r9, r9, #4294967295
 8003424:	f1b9 0f23 	cmp.w	r9, #35	; 0x23
 8003428:	d82c      	bhi.n	8003484 <pin_function+0x3ec>
 800342a:	e8df f019 	tbh	[pc, r9, lsl #1]
 800342e:	0024      	.short	0x0024
 8003430:	0036002e 	.word	0x0036002e
 8003434:	0046003e 	.word	0x0046003e
 8003438:	0056004e 	.word	0x0056004e
 800343c:	0066005e 	.word	0x0066005e
 8003440:	0078006e 	.word	0x0078006e
 8003444:	00880080 	.word	0x00880080
 8003448:	009a0092 	.word	0x009a0092
 800344c:	00ac00a2 	.word	0x00ac00a2
 8003450:	00be00b6 	.word	0x00be00b6
 8003454:	00d000c6 	.word	0x00d000c6
 8003458:	00e000d8 	.word	0x00e000d8
 800345c:	002b002b 	.word	0x002b002b
 8003460:	00e8002b 	.word	0x00e8002b
 8003464:	002b00f0 	.word	0x002b00f0
 8003468:	002b002b 	.word	0x002b002b
 800346c:	00fd002b 	.word	0x00fd002b
 8003470:	010b0103 	.word	0x010b0103
 8003474:	0113      	.short	0x0113
      __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003476:	4a6a      	ldr	r2, [pc, #424]	; (8003620 <pin_function+0x588>)
 8003478:	6853      	ldr	r3, [r2, #4]
 800347a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800347e:	f043 0301 	orr.w	r3, r3, #1
 8003482:	6053      	str	r3, [r2, #4]
      ll_mode = LL_GPIO_MODE_ALTERNATE;
 8003484:	f04f 0e09 	mov.w	lr, #9
}
 8003488:	e644      	b.n	8003114 <pin_function+0x7c>
      __HAL_AFIO_REMAP_SPI1_DISABLE();
 800348a:	4a65      	ldr	r2, [pc, #404]	; (8003620 <pin_function+0x588>)
 800348c:	6853      	ldr	r3, [r2, #4]
 800348e:	f023 0301 	bic.w	r3, r3, #1
 8003492:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003496:	6053      	str	r3, [r2, #4]
      break;
 8003498:	e7f4      	b.n	8003484 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_I2C1_ENABLE();
 800349a:	4a61      	ldr	r2, [pc, #388]	; (8003620 <pin_function+0x588>)
 800349c:	6853      	ldr	r3, [r2, #4]
 800349e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80034a2:	f043 0302 	orr.w	r3, r3, #2
 80034a6:	6053      	str	r3, [r2, #4]
      break;
 80034a8:	e7ec      	b.n	8003484 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_I2C1_DISABLE();
 80034aa:	4a5d      	ldr	r2, [pc, #372]	; (8003620 <pin_function+0x588>)
 80034ac:	6853      	ldr	r3, [r2, #4]
 80034ae:	f023 0302 	bic.w	r3, r3, #2
 80034b2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80034b6:	6053      	str	r3, [r2, #4]
      break;
 80034b8:	e7e4      	b.n	8003484 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_USART1_ENABLE();
 80034ba:	4a59      	ldr	r2, [pc, #356]	; (8003620 <pin_function+0x588>)
 80034bc:	6853      	ldr	r3, [r2, #4]
 80034be:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80034c2:	f043 0304 	orr.w	r3, r3, #4
 80034c6:	6053      	str	r3, [r2, #4]
      break;
 80034c8:	e7dc      	b.n	8003484 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_USART1_DISABLE();
 80034ca:	4a55      	ldr	r2, [pc, #340]	; (8003620 <pin_function+0x588>)
 80034cc:	6853      	ldr	r3, [r2, #4]
 80034ce:	f023 0304 	bic.w	r3, r3, #4
 80034d2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80034d6:	6053      	str	r3, [r2, #4]
      break;
 80034d8:	e7d4      	b.n	8003484 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_USART2_ENABLE();
 80034da:	4a51      	ldr	r2, [pc, #324]	; (8003620 <pin_function+0x588>)
 80034dc:	6853      	ldr	r3, [r2, #4]
 80034de:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80034e2:	f043 0308 	orr.w	r3, r3, #8
 80034e6:	6053      	str	r3, [r2, #4]
      break;
 80034e8:	e7cc      	b.n	8003484 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_USART2_DISABLE();
 80034ea:	4a4d      	ldr	r2, [pc, #308]	; (8003620 <pin_function+0x588>)
 80034ec:	6853      	ldr	r3, [r2, #4]
 80034ee:	f023 0308 	bic.w	r3, r3, #8
 80034f2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80034f6:	6053      	str	r3, [r2, #4]
      break;
 80034f8:	e7c4      	b.n	8003484 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_USART3_ENABLE();
 80034fa:	4a49      	ldr	r2, [pc, #292]	; (8003620 <pin_function+0x588>)
 80034fc:	6853      	ldr	r3, [r2, #4]
 80034fe:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003502:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003506:	6053      	str	r3, [r2, #4]
      break;
 8003508:	e7bc      	b.n	8003484 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_USART3_PARTIAL();
 800350a:	4a45      	ldr	r2, [pc, #276]	; (8003620 <pin_function+0x588>)
 800350c:	6853      	ldr	r3, [r2, #4]
 800350e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003512:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003516:	f043 0310 	orr.w	r3, r3, #16
 800351a:	6053      	str	r3, [r2, #4]
      break;
 800351c:	e7b2      	b.n	8003484 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_USART3_DISABLE();
 800351e:	4a40      	ldr	r2, [pc, #256]	; (8003620 <pin_function+0x588>)
 8003520:	6853      	ldr	r3, [r2, #4]
 8003522:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003526:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800352a:	6053      	str	r3, [r2, #4]
      break;
 800352c:	e7aa      	b.n	8003484 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_TIM1_ENABLE();
 800352e:	4a3c      	ldr	r2, [pc, #240]	; (8003620 <pin_function+0x588>)
 8003530:	6853      	ldr	r3, [r2, #4]
 8003532:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003536:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800353a:	6053      	str	r3, [r2, #4]
      break;
 800353c:	e7a2      	b.n	8003484 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_TIM1_PARTIAL();
 800353e:	4a38      	ldr	r2, [pc, #224]	; (8003620 <pin_function+0x588>)
 8003540:	6853      	ldr	r3, [r2, #4]
 8003542:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003546:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800354a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800354e:	6053      	str	r3, [r2, #4]
      break;
 8003550:	e798      	b.n	8003484 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_TIM1_DISABLE();
 8003552:	4a33      	ldr	r2, [pc, #204]	; (8003620 <pin_function+0x588>)
 8003554:	6853      	ldr	r3, [r2, #4]
 8003556:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800355a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800355e:	6053      	str	r3, [r2, #4]
      break;
 8003560:	e790      	b.n	8003484 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_TIM2_ENABLE();
 8003562:	4a2f      	ldr	r2, [pc, #188]	; (8003620 <pin_function+0x588>)
 8003564:	6853      	ldr	r3, [r2, #4]
 8003566:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800356a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800356e:	6053      	str	r3, [r2, #4]
      break;
 8003570:	e788      	b.n	8003484 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8003572:	4a2b      	ldr	r2, [pc, #172]	; (8003620 <pin_function+0x588>)
 8003574:	6853      	ldr	r3, [r2, #4]
 8003576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800357a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800357e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003582:	6053      	str	r3, [r2, #4]
      break;
 8003584:	e77e      	b.n	8003484 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8003586:	4a26      	ldr	r2, [pc, #152]	; (8003620 <pin_function+0x588>)
 8003588:	6853      	ldr	r3, [r2, #4]
 800358a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800358e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003596:	6053      	str	r3, [r2, #4]
      break;
 8003598:	e774      	b.n	8003484 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_TIM2_DISABLE();
 800359a:	4a21      	ldr	r2, [pc, #132]	; (8003620 <pin_function+0x588>)
 800359c:	6853      	ldr	r3, [r2, #4]
 800359e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80035a6:	6053      	str	r3, [r2, #4]
      break;
 80035a8:	e76c      	b.n	8003484 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_TIM3_ENABLE();
 80035aa:	4a1d      	ldr	r2, [pc, #116]	; (8003620 <pin_function+0x588>)
 80035ac:	6853      	ldr	r3, [r2, #4]
 80035ae:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80035b2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80035b6:	6053      	str	r3, [r2, #4]
      break;
 80035b8:	e764      	b.n	8003484 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80035ba:	4a19      	ldr	r2, [pc, #100]	; (8003620 <pin_function+0x588>)
 80035bc:	6853      	ldr	r3, [r2, #4]
 80035be:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80035c2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80035c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035ca:	6053      	str	r3, [r2, #4]
      break;
 80035cc:	e75a      	b.n	8003484 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_TIM3_DISABLE();
 80035ce:	4a14      	ldr	r2, [pc, #80]	; (8003620 <pin_function+0x588>)
 80035d0:	6853      	ldr	r3, [r2, #4]
 80035d2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80035d6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80035da:	6053      	str	r3, [r2, #4]
      break;
 80035dc:	e752      	b.n	8003484 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_TIM4_ENABLE();
 80035de:	4a10      	ldr	r2, [pc, #64]	; (8003620 <pin_function+0x588>)
 80035e0:	6853      	ldr	r3, [r2, #4]
 80035e2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80035e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035ea:	6053      	str	r3, [r2, #4]
      break;
 80035ec:	e74a      	b.n	8003484 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_TIM4_DISABLE();
 80035ee:	4a0c      	ldr	r2, [pc, #48]	; (8003620 <pin_function+0x588>)
 80035f0:	6853      	ldr	r3, [r2, #4]
 80035f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035f6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80035fa:	6053      	str	r3, [r2, #4]
      break;
 80035fc:	e742      	b.n	8003484 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_PD01_ENABLE();
 80035fe:	4a08      	ldr	r2, [pc, #32]	; (8003620 <pin_function+0x588>)
 8003600:	6853      	ldr	r3, [r2, #4]
 8003602:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800360a:	6053      	str	r3, [r2, #4]
      break;
 800360c:	e73a      	b.n	8003484 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_PD01_DISABLE();
 800360e:	4a04      	ldr	r2, [pc, #16]	; (8003620 <pin_function+0x588>)
 8003610:	6853      	ldr	r3, [r2, #4]
 8003612:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003616:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800361a:	6053      	str	r3, [r2, #4]
      break;
 800361c:	e732      	b.n	8003484 <pin_function+0x3ec>
 800361e:	bf00      	nop
 8003620:	40010000 	.word	0x40010000
 8003624:	40021000 	.word	0x40021000
      __HAL_AFIO_REMAP_SWJ_ENABLE();
 8003628:	4a5a      	ldr	r2, [pc, #360]	; (8003794 <pin_function+0x6fc>)
 800362a:	6853      	ldr	r3, [r2, #4]
 800362c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003630:	6053      	str	r3, [r2, #4]
      break;
 8003632:	e727      	b.n	8003484 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8003634:	4a57      	ldr	r2, [pc, #348]	; (8003794 <pin_function+0x6fc>)
 8003636:	6853      	ldr	r3, [r2, #4]
 8003638:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800363c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003640:	6053      	str	r3, [r2, #4]
      break;
 8003642:	e71f      	b.n	8003484 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003644:	4a53      	ldr	r2, [pc, #332]	; (8003794 <pin_function+0x6fc>)
 8003646:	6853      	ldr	r3, [r2, #4]
 8003648:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800364c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003650:	6053      	str	r3, [r2, #4]
      break;
 8003652:	e717      	b.n	8003484 <pin_function+0x3ec>
      __HAL_AFIO_REMAP_SWJ_DISABLE();
 8003654:	4a4f      	ldr	r2, [pc, #316]	; (8003794 <pin_function+0x6fc>)
 8003656:	6853      	ldr	r3, [r2, #4]
 8003658:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800365c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003660:	6053      	str	r3, [r2, #4]
      break;
 8003662:	e70f      	b.n	8003484 <pin_function+0x3ec>
      Error_Handler();
 8003664:	21fb      	movs	r1, #251	; 0xfb
 8003666:	484c      	ldr	r0, [pc, #304]	; (8003798 <pin_function+0x700>)
 8003668:	f000 f8d1 	bl	800380e <_Error_Handler>
  uint32_t ll_mode = 0;
 800366c:	f04f 0e00 	mov.w	lr, #0
      break;
 8003670:	e550      	b.n	8003114 <pin_function+0x7c>
      ll_mode = LL_GPIO_MODE_ANALOG;
 8003672:	f04f 0e00 	mov.w	lr, #0
 8003676:	e54d      	b.n	8003114 <pin_function+0x7c>
    if (STM_PIN_OD(function)) {
 8003678:	f018 0f08 	tst.w	r8, #8
 800367c:	d014      	beq.n	80036a8 <pin_function+0x610>
 800367e:	fa94 f2a4 	rbit	r2, r4
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8003682:	fab2 f282 	clz	r2, r2
 8003686:	0092      	lsls	r2, r2, #2
 8003688:	2104      	movs	r1, #4
 800368a:	fa01 f202 	lsl.w	r2, r1, r2
 800368e:	ea23 0302 	bic.w	r3, r3, r2
 8003692:	fa94 f2a4 	rbit	r2, r4
 8003696:	fab2 f282 	clz	r2, r2
 800369a:	0092      	lsls	r2, r2, #2
 800369c:	fa01 f202 	lsl.w	r2, r1, r2
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f846 300c 	str.w	r3, [r6, ip]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 80036a6:	e550      	b.n	800314a <pin_function+0xb2>
 80036a8:	fa94 f2a4 	rbit	r2, r4
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80036ac:	fab2 f282 	clz	r2, r2
 80036b0:	0092      	lsls	r2, r2, #2
 80036b2:	2104      	movs	r1, #4
 80036b4:	fa01 f202 	lsl.w	r2, r1, r2
 80036b8:	ea23 0302 	bic.w	r3, r3, r2
 80036bc:	fa94 f2a4 	rbit	r2, r4
 80036c0:	f846 300c 	str.w	r3, [r6, ip]
}
 80036c4:	e541      	b.n	800314a <pin_function+0xb2>
      if (function == LL_GPIO_MODE_FLOATING) {
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d02a      	beq.n	8003720 <pin_function+0x688>
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80036ca:	68f3      	ldr	r3, [r6, #12]
 80036cc:	0a22      	lsrs	r2, r4, #8
 80036ce:	ea23 2414 	bic.w	r4, r3, r4, lsr #8
 80036d2:	fa92 f3a2 	rbit	r3, r2
 80036d6:	fab3 f383 	clz	r3, r3
 80036da:	2201      	movs	r2, #1
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	431c      	orrs	r4, r3
 80036e2:	60f4      	str	r4, [r6, #12]
  __HAL_RCC_AFIO_CLK_ENABLE();
 80036e4:	4b2d      	ldr	r3, [pc, #180]	; (800379c <pin_function+0x704>)
 80036e6:	699a      	ldr	r2, [r3, #24]
 80036e8:	f042 0201 	orr.w	r2, r2, #1
 80036ec:	619a      	str	r2, [r3, #24]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	9303      	str	r3, [sp, #12]
 80036f6:	9b03      	ldr	r3, [sp, #12]
  if ((pin == PA_13) || (pin == PA_14)) {
 80036f8:	f1a5 030d 	sub.w	r3, r5, #13
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d941      	bls.n	8003784 <pin_function+0x6ec>
  if ((pin == PA_15) || (pin == PB_3) || (pin == PB_4)) {
 8003700:	2d0f      	cmp	r5, #15
 8003702:	d003      	beq.n	800370c <pin_function+0x674>
 8003704:	2d13      	cmp	r5, #19
 8003706:	d001      	beq.n	800370c <pin_function+0x674>
 8003708:	2d14      	cmp	r5, #20
 800370a:	d106      	bne.n	800371a <pin_function+0x682>
    __HAL_AFIO_REMAP_SWJ_NOJTAG(); // JTAG-DP Disabled and SW-DP enabled
 800370c:	4a21      	ldr	r2, [pc, #132]	; (8003794 <pin_function+0x6fc>)
 800370e:	6853      	ldr	r3, [r2, #4]
 8003710:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003714:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003718:	6053      	str	r3, [r2, #4]
#endif /* DUALPAD_ANALOG_SWITCH */

  pin_DisconnectDebug(pin);

  hsem_unlock(CFG_HW_GPIO_SEMID);
}
 800371a:	b005      	add	sp, #20
 800371c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003720:	fa94 f3a4 	rbit	r3, r4
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8003724:	fab3 f383 	clz	r3, r3
 8003728:	009a      	lsls	r2, r3, #2
 800372a:	230f      	movs	r3, #15
 800372c:	4093      	lsls	r3, r2
 800372e:	ea20 0003 	bic.w	r0, r0, r3
 8003732:	fa94 f3a4 	rbit	r3, r4
 8003736:	fab3 f383 	clz	r3, r3
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	2208      	movs	r2, #8
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	4318      	orrs	r0, r3
 8003744:	5070      	str	r0, [r6, r1]
}
 8003746:	e7c0      	b.n	80036ca <pin_function+0x632>
      if (function == LL_GPIO_MODE_FLOATING) {
 8003748:	2b04      	cmp	r3, #4
 800374a:	d007      	beq.n	800375c <pin_function+0x6c4>
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800374c:	68f3      	ldr	r3, [r6, #12]
 800374e:	0a22      	lsrs	r2, r4, #8
 8003750:	ea23 2414 	bic.w	r4, r3, r4, lsr #8
 8003754:	fa92 f2a2 	rbit	r2, r2
 8003758:	60f4      	str	r4, [r6, #12]
}
 800375a:	e7c3      	b.n	80036e4 <pin_function+0x64c>
 800375c:	fa94 f3a4 	rbit	r3, r4
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8003760:	fab3 f383 	clz	r3, r3
 8003764:	009a      	lsls	r2, r3, #2
 8003766:	230f      	movs	r3, #15
 8003768:	4093      	lsls	r3, r2
 800376a:	ea20 0003 	bic.w	r0, r0, r3
 800376e:	fa94 f3a4 	rbit	r3, r4
 8003772:	fab3 f383 	clz	r3, r3
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	2208      	movs	r2, #8
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	4318      	orrs	r0, r3
 8003780:	5070      	str	r0, [r6, r1]
}
 8003782:	e7e3      	b.n	800374c <pin_function+0x6b4>
    __HAL_AFIO_REMAP_SWJ_DISABLE(); // JTAG-DP Disabled and SW-DP Disabled
 8003784:	4a03      	ldr	r2, [pc, #12]	; (8003794 <pin_function+0x6fc>)
 8003786:	6853      	ldr	r3, [r2, #4]
 8003788:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800378c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003790:	6053      	str	r3, [r2, #4]
 8003792:	e7b5      	b.n	8003700 <pin_function+0x668>
 8003794:	40010000 	.word	0x40010000
 8003798:	08004188 	.word	0x08004188
 800379c:	40021000 	.word	0x40021000

080037a0 <pinmap_pinout>:

void pinmap_pinout(PinName pin, const PinMap *map)
{
  if (pin == NC) {
 80037a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80037a4:	d008      	beq.n	80037b8 <pinmap_pinout+0x18>
{
 80037a6:	b508      	push	{r3, lr}
    return;
  }

  while (map->pin != NC) {
 80037a8:	680b      	ldr	r3, [r1, #0]
 80037aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ae:	d008      	beq.n	80037c2 <pinmap_pinout+0x22>
    if (map->pin == pin) {
 80037b0:	4283      	cmp	r3, r0
 80037b2:	d002      	beq.n	80037ba <pinmap_pinout+0x1a>
      pin_function(pin, map->function);
      return;
    }
    map++;
 80037b4:	310c      	adds	r1, #12
 80037b6:	e7f7      	b.n	80037a8 <pinmap_pinout+0x8>
 80037b8:	4770      	bx	lr
      pin_function(pin, map->function);
 80037ba:	6889      	ldr	r1, [r1, #8]
 80037bc:	f7ff fc6c 	bl	8003098 <pin_function>
      return;
 80037c0:	e004      	b.n	80037cc <pinmap_pinout+0x2c>
  }
  Error_Handler();
 80037c2:	f240 1129 	movw	r1, #297	; 0x129
 80037c6:	4802      	ldr	r0, [pc, #8]	; (80037d0 <pinmap_pinout+0x30>)
 80037c8:	f000 f821 	bl	800380e <_Error_Handler>
}
 80037cc:	bd08      	pop	{r3, pc}
 80037ce:	bf00      	nop
 80037d0:	08004188 	.word	0x08004188

080037d4 <pinmap_find_peripheral>:

void *pinmap_find_peripheral(PinName pin, const PinMap *map)
{
  while (map->pin != NC) {
 80037d4:	680b      	ldr	r3, [r1, #0]
 80037d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037da:	d005      	beq.n	80037e8 <pinmap_find_peripheral+0x14>
    if (map->pin == pin) {
 80037dc:	4283      	cmp	r3, r0
 80037de:	d001      	beq.n	80037e4 <pinmap_find_peripheral+0x10>
      return map->peripheral;
    }
    map++;
 80037e0:	310c      	adds	r1, #12
 80037e2:	e7f7      	b.n	80037d4 <pinmap_find_peripheral>
      return map->peripheral;
 80037e4:	6848      	ldr	r0, [r1, #4]
 80037e6:	4770      	bx	lr
  }
  return NP;
 80037e8:	2000      	movs	r0, #0
}
 80037ea:	4770      	bx	lr

080037ec <pinmap_peripheral>:

void *pinmap_peripheral(PinName pin, const PinMap *map)
{
  void *peripheral = NP;

  if (pin != (PinName)NC) {
 80037ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 80037f0:	d003      	beq.n	80037fa <pinmap_peripheral+0xe>
{
 80037f2:	b508      	push	{r3, lr}
    peripheral = pinmap_find_peripheral(pin, map);
 80037f4:	f7ff ffee 	bl	80037d4 <pinmap_find_peripheral>
  }
  return peripheral;
}
 80037f8:	bd08      	pop	{r3, pc}
  void *peripheral = NP;
 80037fa:	2000      	movs	r0, #0
}
 80037fc:	4770      	bx	lr

080037fe <pinmap_merge_peripheral>:

// Merge peripherals
void *pinmap_merge_peripheral(void *a, void *b)
{
  // both are the same (inc both NP)
  if (a == b) {
 80037fe:	4288      	cmp	r0, r1
 8003800:	d004      	beq.n	800380c <pinmap_merge_peripheral+0xe>
    return a;
  }

  // one (or both) is not set
  if (a == NP) {
 8003802:	b110      	cbz	r0, 800380a <pinmap_merge_peripheral+0xc>
    return b;
  }
  if (b == NP) {
 8003804:	b111      	cbz	r1, 800380c <pinmap_merge_peripheral+0xe>
    return a;
  }

  // mismatch error case
  return NP;
 8003806:	2000      	movs	r0, #0
 8003808:	4770      	bx	lr
    return b;
 800380a:	4608      	mov	r0, r1
}
 800380c:	4770      	bx	lr

0800380e <_Error_Handler>:
  */
WEAK void _Error_Handler(const char *msg, int val)
{
  /* User can add his own implementation to report the HAL error return state */
  core_debug("Error: %s (%i)\n", msg, val);
  while (1) {
 800380e:	e7fe      	b.n	800380e <_Error_Handler>

08003810 <get_timer_obj>:
timerObj_t *get_timer_obj(TIM_HandleTypeDef *htim)
{
  timerObj_t *obj;
  obj = (timerObj_t *)((char *)htim - offsetof(timerObj_t, handle));
  return (obj);
}
 8003810:	3804      	subs	r0, #4
 8003812:	4770      	bx	lr

08003814 <enableTimerClock>:
  * @brief  Enable the timer clock
  * @param  htim: TIM handle
  * @retval None
  */
void enableTimerClock(TIM_HandleTypeDef *htim)
{
 8003814:	b084      	sub	sp, #16
  // Enable TIM clock
#if defined(TIM1_BASE)
  if (htim->Instance == TIM1) {
 8003816:	6802      	ldr	r2, [r0, #0]
 8003818:	4b20      	ldr	r3, [pc, #128]	; (800389c <enableTimerClock+0x88>)
 800381a:	429a      	cmp	r2, r3
 800381c:	d00d      	beq.n	800383a <enableTimerClock+0x26>
    __HAL_RCC_TIM1_CLK_ENABLE();
  }
#endif
#if defined(TIM2_BASE)
  if (htim->Instance == TIM2) {
 800381e:	6803      	ldr	r3, [r0, #0]
 8003820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003824:	d015      	beq.n	8003852 <enableTimerClock+0x3e>
    __HAL_RCC_TIM2_CLK_ENABLE();
  }
#endif
#if defined(TIM3_BASE)
  if (htim->Instance == TIM3) {
 8003826:	6802      	ldr	r2, [r0, #0]
 8003828:	4b1d      	ldr	r3, [pc, #116]	; (80038a0 <enableTimerClock+0x8c>)
 800382a:	429a      	cmp	r2, r3
 800382c:	d01d      	beq.n	800386a <enableTimerClock+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
  }
#endif
#if defined(TIM4_BASE)
  if (htim->Instance == TIM4) {
 800382e:	6802      	ldr	r2, [r0, #0]
 8003830:	4b1c      	ldr	r3, [pc, #112]	; (80038a4 <enableTimerClock+0x90>)
 8003832:	429a      	cmp	r2, r3
 8003834:	d025      	beq.n	8003882 <enableTimerClock+0x6e>
#if defined(TIM22_BASE)
  if (htim->Instance == TIM22) {
    __HAL_RCC_TIM22_CLK_ENABLE();
  }
#endif
}
 8003836:	b004      	add	sp, #16
 8003838:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 800383a:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800383e:	699a      	ldr	r2, [r3, #24]
 8003840:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003844:	619a      	str	r2, [r3, #24]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	9b00      	ldr	r3, [sp, #0]
 8003850:	e7e5      	b.n	800381e <enableTimerClock+0xa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003852:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003856:	69da      	ldr	r2, [r3, #28]
 8003858:	f042 0201 	orr.w	r2, r2, #1
 800385c:	61da      	str	r2, [r3, #28]
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	9301      	str	r3, [sp, #4]
 8003866:	9b01      	ldr	r3, [sp, #4]
 8003868:	e7dd      	b.n	8003826 <enableTimerClock+0x12>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800386a:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 800386e:	69da      	ldr	r2, [r3, #28]
 8003870:	f042 0202 	orr.w	r2, r2, #2
 8003874:	61da      	str	r2, [r3, #28]
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	9302      	str	r3, [sp, #8]
 800387e:	9b02      	ldr	r3, [sp, #8]
 8003880:	e7d5      	b.n	800382e <enableTimerClock+0x1a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003882:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003886:	69da      	ldr	r2, [r3, #28]
 8003888:	f042 0204 	orr.w	r2, r2, #4
 800388c:	61da      	str	r2, [r3, #28]
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	9303      	str	r3, [sp, #12]
 8003896:	9b03      	ldr	r3, [sp, #12]
}
 8003898:	e7cd      	b.n	8003836 <enableTimerClock+0x22>
 800389a:	bf00      	nop
 800389c:	40012c00 	.word	0x40012c00
 80038a0:	40000400 	.word	0x40000400
 80038a4:	40000800 	.word	0x40000800

080038a8 <disableTimerClock>:
  */
void disableTimerClock(TIM_HandleTypeDef *htim)
{
  // Enable TIM clock
#if defined(TIM1_BASE)
  if (htim->Instance == TIM1) {
 80038a8:	6802      	ldr	r2, [r0, #0]
 80038aa:	4b14      	ldr	r3, [pc, #80]	; (80038fc <disableTimerClock+0x54>)
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d00c      	beq.n	80038ca <disableTimerClock+0x22>
    __HAL_RCC_TIM1_CLK_DISABLE();
  }
#endif
#if defined(TIM2_BASE)
  if (htim->Instance == TIM2) {
 80038b0:	6803      	ldr	r3, [r0, #0]
 80038b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b6:	d00e      	beq.n	80038d6 <disableTimerClock+0x2e>
    __HAL_RCC_TIM2_CLK_DISABLE();
  }
#endif
#if defined(TIM3_BASE)
  if (htim->Instance == TIM3) {
 80038b8:	6802      	ldr	r2, [r0, #0]
 80038ba:	4b11      	ldr	r3, [pc, #68]	; (8003900 <disableTimerClock+0x58>)
 80038bc:	429a      	cmp	r2, r3
 80038be:	d010      	beq.n	80038e2 <disableTimerClock+0x3a>
    __HAL_RCC_TIM3_CLK_DISABLE();
  }
#endif
#if defined(TIM4_BASE)
  if (htim->Instance == TIM4) {
 80038c0:	6802      	ldr	r2, [r0, #0]
 80038c2:	4b10      	ldr	r3, [pc, #64]	; (8003904 <disableTimerClock+0x5c>)
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d012      	beq.n	80038ee <disableTimerClock+0x46>
#if defined(TIM22_BASE)
  if (htim->Instance == TIM22) {
    __HAL_RCC_TIM22_CLK_DISABLE();
  }
#endif
}
 80038c8:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_DISABLE();
 80038ca:	4a0f      	ldr	r2, [pc, #60]	; (8003908 <disableTimerClock+0x60>)
 80038cc:	6993      	ldr	r3, [r2, #24]
 80038ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038d2:	6193      	str	r3, [r2, #24]
 80038d4:	e7ec      	b.n	80038b0 <disableTimerClock+0x8>
    __HAL_RCC_TIM2_CLK_DISABLE();
 80038d6:	4a0c      	ldr	r2, [pc, #48]	; (8003908 <disableTimerClock+0x60>)
 80038d8:	69d3      	ldr	r3, [r2, #28]
 80038da:	f023 0301 	bic.w	r3, r3, #1
 80038de:	61d3      	str	r3, [r2, #28]
 80038e0:	e7ea      	b.n	80038b8 <disableTimerClock+0x10>
    __HAL_RCC_TIM3_CLK_DISABLE();
 80038e2:	4a09      	ldr	r2, [pc, #36]	; (8003908 <disableTimerClock+0x60>)
 80038e4:	69d3      	ldr	r3, [r2, #28]
 80038e6:	f023 0302 	bic.w	r3, r3, #2
 80038ea:	61d3      	str	r3, [r2, #28]
 80038ec:	e7e8      	b.n	80038c0 <disableTimerClock+0x18>
    __HAL_RCC_TIM4_CLK_DISABLE();
 80038ee:	4a06      	ldr	r2, [pc, #24]	; (8003908 <disableTimerClock+0x60>)
 80038f0:	69d3      	ldr	r3, [r2, #28]
 80038f2:	f023 0304 	bic.w	r3, r3, #4
 80038f6:	61d3      	str	r3, [r2, #28]
}
 80038f8:	e7e6      	b.n	80038c8 <disableTimerClock+0x20>
 80038fa:	bf00      	nop
 80038fc:	40012c00 	.word	0x40012c00
 8003900:	40000400 	.word	0x40000400
 8003904:	40000800 	.word	0x40000800
 8003908:	40021000 	.word	0x40021000

0800390c <getTimerUpIrq>:
  */
IRQn_Type getTimerUpIrq(TIM_TypeDef *tim)
{
  IRQn_Type IRQn = NonMaskableInt_IRQn;

  if (tim != (TIM_TypeDef *)NC) {
 800390c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003910:	d019      	beq.n	8003946 <getTimerUpIrq+0x3a>
{
 8003912:	b508      	push	{r3, lr}
    /* Get IRQn depending on TIM instance */
    switch ((uint32_t)tim) {
 8003914:	4b0f      	ldr	r3, [pc, #60]	; (8003954 <getTimerUpIrq+0x48>)
 8003916:	4298      	cmp	r0, r3
 8003918:	d018      	beq.n	800394c <getTimerUpIrq+0x40>
 800391a:	d808      	bhi.n	800392e <getTimerUpIrq+0x22>
 800391c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003920:	d016      	beq.n	8003950 <getTimerUpIrq+0x44>
 8003922:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003926:	4298      	cmp	r0, r3
 8003928:	d106      	bne.n	8003938 <getTimerUpIrq+0x2c>
        IRQn = TIM2_IRQn;
        break;
#endif
#if defined(TIM3_BASE)
      case (uint32_t)TIM3_BASE:
        IRQn = TIM3_IRQn;
 800392a:	201d      	movs	r0, #29
        _Error_Handler("TIM: Unknown timer IRQn", (int)tim);
        break;
    }
  }
  return IRQn;
}
 800392c:	bd08      	pop	{r3, pc}
    switch ((uint32_t)tim) {
 800392e:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <getTimerUpIrq+0x4c>)
 8003930:	4298      	cmp	r0, r3
 8003932:	d101      	bne.n	8003938 <getTimerUpIrq+0x2c>
 8003934:	2019      	movs	r0, #25
 8003936:	e7f9      	b.n	800392c <getTimerUpIrq+0x20>
        _Error_Handler("TIM: Unknown timer IRQn", (int)tim);
 8003938:	4601      	mov	r1, r0
 800393a:	4808      	ldr	r0, [pc, #32]	; (800395c <getTimerUpIrq+0x50>)
 800393c:	f7ff ff67 	bl	800380e <_Error_Handler>
  IRQn_Type IRQn = NonMaskableInt_IRQn;
 8003940:	f06f 000d 	mvn.w	r0, #13
        break;
 8003944:	e7f2      	b.n	800392c <getTimerUpIrq+0x20>
  IRQn_Type IRQn = NonMaskableInt_IRQn;
 8003946:	f06f 000d 	mvn.w	r0, #13
}
 800394a:	4770      	bx	lr
        IRQn = TIM4_IRQn;
 800394c:	201e      	movs	r0, #30
 800394e:	e7ed      	b.n	800392c <getTimerUpIrq+0x20>
        IRQn = TIM2_IRQn;
 8003950:	201c      	movs	r0, #28
 8003952:	e7eb      	b.n	800392c <getTimerUpIrq+0x20>
 8003954:	40000800 	.word	0x40000800
 8003958:	40012c00 	.word	0x40012c00
 800395c:	0800423c 	.word	0x0800423c

08003960 <getTimerCCIrq>:
  */
IRQn_Type getTimerCCIrq(TIM_TypeDef *tim)
{
  IRQn_Type IRQn = NonMaskableInt_IRQn;

  if (tim != (TIM_TypeDef *)NC) {
 8003960:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003964:	d019      	beq.n	800399a <getTimerCCIrq+0x3a>
{
 8003966:	b508      	push	{r3, lr}
    /* Get IRQn depending on TIM instance */
    switch ((uint32_t)tim) {
 8003968:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <getTimerCCIrq+0x48>)
 800396a:	4298      	cmp	r0, r3
 800396c:	d018      	beq.n	80039a0 <getTimerCCIrq+0x40>
 800396e:	d808      	bhi.n	8003982 <getTimerCCIrq+0x22>
 8003970:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003974:	d016      	beq.n	80039a4 <getTimerCCIrq+0x44>
 8003976:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800397a:	4298      	cmp	r0, r3
 800397c:	d106      	bne.n	800398c <getTimerCCIrq+0x2c>
        IRQn = TIM2_IRQn;
        break;
#endif
#if defined(TIM3_BASE)
      case (uint32_t)TIM3_BASE:
        IRQn = TIM3_IRQn;
 800397e:	201d      	movs	r0, #29
        _Error_Handler("TIM: Unknown timer IRQn", (int)tim);
        break;
    }
  }
  return IRQn;
}
 8003980:	bd08      	pop	{r3, pc}
    switch ((uint32_t)tim) {
 8003982:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <getTimerCCIrq+0x4c>)
 8003984:	4298      	cmp	r0, r3
 8003986:	d101      	bne.n	800398c <getTimerCCIrq+0x2c>
 8003988:	201b      	movs	r0, #27
 800398a:	e7f9      	b.n	8003980 <getTimerCCIrq+0x20>
        _Error_Handler("TIM: Unknown timer IRQn", (int)tim);
 800398c:	4601      	mov	r1, r0
 800398e:	4808      	ldr	r0, [pc, #32]	; (80039b0 <getTimerCCIrq+0x50>)
 8003990:	f7ff ff3d 	bl	800380e <_Error_Handler>
  IRQn_Type IRQn = NonMaskableInt_IRQn;
 8003994:	f06f 000d 	mvn.w	r0, #13
        break;
 8003998:	e7f2      	b.n	8003980 <getTimerCCIrq+0x20>
  IRQn_Type IRQn = NonMaskableInt_IRQn;
 800399a:	f06f 000d 	mvn.w	r0, #13
}
 800399e:	4770      	bx	lr
        IRQn = TIM4_IRQn;
 80039a0:	201e      	movs	r0, #30
 80039a2:	e7ed      	b.n	8003980 <getTimerCCIrq+0x20>
        IRQn = TIM2_IRQn;
 80039a4:	201c      	movs	r0, #28
 80039a6:	e7eb      	b.n	8003980 <getTimerCCIrq+0x20>
 80039a8:	40000800 	.word	0x40000800
 80039ac:	40012c00 	.word	0x40012c00
 80039b0:	0800423c 	.word	0x0800423c

080039b4 <HAL_TIM_Base_MspInit>:
{
 80039b4:	b570      	push	{r4, r5, r6, lr}
 80039b6:	4604      	mov	r4, r0
  timerObj_t *obj = get_timer_obj(htim_base);
 80039b8:	f7ff ff2a 	bl	8003810 <get_timer_obj>
 80039bc:	4605      	mov	r5, r0
  enableTimerClock(htim_base);
 80039be:	4620      	mov	r0, r4
 80039c0:	f7ff ff28 	bl	8003814 <enableTimerClock>
  HAL_NVIC_SetPriority(getTimerUpIrq(htim_base->Instance), obj->preemptPriority, obj->subPriority);
 80039c4:	6820      	ldr	r0, [r4, #0]
 80039c6:	f7ff ffa1 	bl	800390c <getTimerUpIrq>
 80039ca:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80039cc:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80039ce:	f7fd f8dd 	bl	8000b8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(getTimerUpIrq(htim_base->Instance));
 80039d2:	6820      	ldr	r0, [r4, #0]
 80039d4:	f7ff ff9a 	bl	800390c <getTimerUpIrq>
 80039d8:	f7fd f90c 	bl	8000bf4 <HAL_NVIC_EnableIRQ>
  if (getTimerCCIrq(htim_base->Instance) != getTimerUpIrq(htim_base->Instance)) {
 80039dc:	6820      	ldr	r0, [r4, #0]
 80039de:	f7ff ffbf 	bl	8003960 <getTimerCCIrq>
 80039e2:	4606      	mov	r6, r0
 80039e4:	6820      	ldr	r0, [r4, #0]
 80039e6:	f7ff ff91 	bl	800390c <getTimerUpIrq>
 80039ea:	4286      	cmp	r6, r0
 80039ec:	d100      	bne.n	80039f0 <HAL_TIM_Base_MspInit+0x3c>
}
 80039ee:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(getTimerCCIrq(htim_base->Instance), obj->preemptPriority, obj->subPriority);
 80039f0:	6820      	ldr	r0, [r4, #0]
 80039f2:	f7ff ffb5 	bl	8003960 <getTimerCCIrq>
 80039f6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80039f8:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80039fa:	f7fd f8c7 	bl	8000b8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(getTimerCCIrq(htim_base->Instance));
 80039fe:	6820      	ldr	r0, [r4, #0]
 8003a00:	f7ff ffae 	bl	8003960 <getTimerCCIrq>
 8003a04:	f7fd f8f6 	bl	8000bf4 <HAL_NVIC_EnableIRQ>
}
 8003a08:	e7f1      	b.n	80039ee <HAL_TIM_Base_MspInit+0x3a>
	...

08003a0c <getTimerClkSrc>:
  */
uint8_t getTimerClkSrc(TIM_TypeDef *tim)
{
  uint8_t clkSrc = 0;

  if (tim != (TIM_TypeDef *)NC)
 8003a0c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003a10:	d015      	beq.n	8003a3e <getTimerClkSrc+0x32>
{
 8003a12:	b508      	push	{r3, lr}
    /* TIMx source CLK is PCKL1 */
    clkSrc = 1;
#else
  {
    /* Get source clock depending on TIM instance */
    switch ((uint32_t)tim) {
 8003a14:	4b0f      	ldr	r3, [pc, #60]	; (8003a54 <getTimerClkSrc+0x48>)
 8003a16:	4298      	cmp	r0, r3
 8003a18:	d013      	beq.n	8003a42 <getTimerClkSrc+0x36>
 8003a1a:	d80a      	bhi.n	8003a32 <getTimerClkSrc+0x26>
 8003a1c:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 8003a20:	4298      	cmp	r0, r3
 8003a22:	d010      	beq.n	8003a46 <getTimerClkSrc+0x3a>
 8003a24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a28:	4298      	cmp	r0, r3
 8003a2a:	d00e      	beq.n	8003a4a <getTimerClkSrc+0x3e>
 8003a2c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003a30:	d00d      	beq.n	8003a4e <getTimerClkSrc+0x42>
      case (uint32_t)TIM22:
#endif
        clkSrc = 2;
        break;
      default:
        _Error_Handler("TIM: Unknown timer instance", (int)tim);
 8003a32:	4601      	mov	r1, r0
 8003a34:	4808      	ldr	r0, [pc, #32]	; (8003a58 <getTimerClkSrc+0x4c>)
 8003a36:	f7ff feea 	bl	800380e <_Error_Handler>
  uint8_t clkSrc = 0;
 8003a3a:	2000      	movs	r0, #0
        break;
 8003a3c:	e006      	b.n	8003a4c <getTimerClkSrc+0x40>
  uint8_t clkSrc = 0;
 8003a3e:	2000      	movs	r0, #0
    }
  }
#endif
  return clkSrc;
}
 8003a40:	4770      	bx	lr
        clkSrc = 2;
 8003a42:	2002      	movs	r0, #2
 8003a44:	e002      	b.n	8003a4c <getTimerClkSrc+0x40>
    switch ((uint32_t)tim) {
 8003a46:	2001      	movs	r0, #1
 8003a48:	e000      	b.n	8003a4c <getTimerClkSrc+0x40>
 8003a4a:	2001      	movs	r0, #1
}
 8003a4c:	bd08      	pop	{r3, pc}
    switch ((uint32_t)tim) {
 8003a4e:	2001      	movs	r0, #1
 8003a50:	e7fc      	b.n	8003a4c <getTimerClkSrc+0x40>
 8003a52:	bf00      	nop
 8003a54:	40012c00 	.word	0x40012c00
 8003a58:	08004254 	.word	0x08004254

08003a5c <get_serial_obj>:

  obj_s = (struct serial_s *)((char *)huart - offsetof(struct serial_s, handle));
  obj = (serial_t *)((char *)obj_s - offsetof(serial_t, uart));

  return (obj);
}
 8003a5c:	3804      	subs	r0, #4
 8003a5e:	4770      	bx	lr

08003a60 <uart_init>:
  * @param  obj : pointer to serial_t structure
  * @retval None
  */
void uart_init(serial_t *obj, uint32_t baudrate, uint32_t databits, uint32_t parity, uint32_t stopbits)
{
  if (obj == NULL) {
 8003a60:	2800      	cmp	r0, #0
 8003a62:	f000 80a6 	beq.w	8003bb2 <uart_init+0x152>
{
 8003a66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	4688      	mov	r8, r1
 8003a6e:	4617      	mov	r7, r2
 8003a70:	461e      	mov	r6, r3
 8003a72:	4604      	mov	r4, r0
    return;
  }

  UART_HandleTypeDef *huart = &(obj->handle);
 8003a74:	f100 0904 	add.w	r9, r0, #4

  /* Determine the U(S)ART peripheral to use (USART1, USART2, ...) */
  USART_TypeDef *uart_tx = pinmap_peripheral(obj->pin_tx, PinMap_UART_TX);
 8003a78:	494e      	ldr	r1, [pc, #312]	; (8003bb4 <uart_init+0x154>)
 8003a7a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8003a7c:	f7ff feb6 	bl	80037ec <pinmap_peripheral>
 8003a80:	4682      	mov	sl, r0
  USART_TypeDef *uart_rx = pinmap_peripheral(obj->pin_rx, PinMap_UART_RX);
 8003a82:	494d      	ldr	r1, [pc, #308]	; (8003bb8 <uart_init+0x158>)
 8003a84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a86:	f7ff feb1 	bl	80037ec <pinmap_peripheral>
 8003a8a:	4605      	mov	r5, r0

  /* Pin Tx must not be NP */
  if (uart_tx == NP) {
 8003a8c:	f1ba 0f00 	cmp.w	sl, #0
 8003a90:	d03a      	beq.n	8003b08 <uart_init+0xa8>
    core_debug("ERROR: [U(S)ART] Tx pin has no peripheral!\n");
    return;
  }
  /* Pin Rx must not be NP if not half-duplex */
  if ((obj->pin_rx != NC) && (uart_rx == NP)) {
 8003a92:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a98:	d001      	beq.n	8003a9e <uart_init+0x3e>
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	d034      	beq.n	8003b08 <uart_init+0xa8>

  /*
   * Get the peripheral name (USART1, USART2, ...) from the pin
   * and assign it to the object
   */
  obj->uart = pinmap_merge_peripheral(uart_tx, uart_rx);
 8003a9e:	4629      	mov	r1, r5
 8003aa0:	4650      	mov	r0, sl
 8003aa2:	f7ff feac 	bl	80037fe <pinmap_merge_peripheral>
 8003aa6:	6020      	str	r0, [r4, #0]

  if (obj->uart == NP) {
 8003aa8:	2800      	cmp	r0, #0
 8003aaa:	d02d      	beq.n	8003b08 <uart_init+0xa8>
    return;
  }

  /* Enable USART clock */
#if defined(USART1_BASE)
  else if (obj->uart == USART1) {
 8003aac:	4b43      	ldr	r3, [pc, #268]	; (8003bbc <uart_init+0x15c>)
 8003aae:	4298      	cmp	r0, r3
 8003ab0:	d02d      	beq.n	8003b0e <uart_init+0xae>
    obj->index = UART1_INDEX;
    obj->irq = USART1_IRQn;
  }
#endif
#if defined(USART2_BASE)
  else if (obj->uart == USART2) {
 8003ab2:	4b43      	ldr	r3, [pc, #268]	; (8003bc0 <uart_init+0x160>)
 8003ab4:	4298      	cmp	r0, r3
 8003ab6:	d044      	beq.n	8003b42 <uart_init+0xe2>
    obj->index = UART2_INDEX;
    obj->irq = USART2_IRQn;
  }
#endif
#if defined(USART3_BASE)
  else if (obj->uart == USART3) {
 8003ab8:	4b42      	ldr	r3, [pc, #264]	; (8003bc4 <uart_init+0x164>)
 8003aba:	4298      	cmp	r0, r3
 8003abc:	d05b      	beq.n	8003b76 <uart_init+0x116>
    obj->irq = USART10_IRQn;
  }
#endif

  /* Configure UART GPIO pins */
  pinmap_pinout(obj->pin_tx, PinMap_UART_TX);
 8003abe:	493d      	ldr	r1, [pc, #244]	; (8003bb4 <uart_init+0x154>)
 8003ac0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003ac2:	f7ff fe6d 	bl	80037a0 <pinmap_pinout>
  if (uart_rx != NP) {
 8003ac6:	b11d      	cbz	r5, 8003ad0 <uart_init+0x70>
    pinmap_pinout(obj->pin_rx, PinMap_UART_RX);
 8003ac8:	493b      	ldr	r1, [pc, #236]	; (8003bb8 <uart_init+0x158>)
 8003aca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003acc:	f7ff fe68 	bl	80037a0 <pinmap_pinout>
  }

  /* Configure uart */
  uart_handlers[obj->index] = huart;
 8003ad0:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8003ad4:	4b3c      	ldr	r3, [pc, #240]	; (8003bc8 <uart_init+0x168>)
 8003ad6:	f843 9022 	str.w	r9, [r3, r2, lsl #2]
  huart->Instance          = (USART_TypeDef *)(obj->uart);
 8003ada:	6823      	ldr	r3, [r4, #0]
 8003adc:	6063      	str	r3, [r4, #4]
  huart->Init.BaudRate     = baudrate;
 8003ade:	f8c4 8008 	str.w	r8, [r4, #8]
  huart->Init.WordLength   = databits;
 8003ae2:	60e7      	str	r7, [r4, #12]
  huart->Init.StopBits     = stopbits;
 8003ae4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003ae6:	6123      	str	r3, [r4, #16]
  huart->Init.Parity       = parity;
 8003ae8:	6166      	str	r6, [r4, #20]
  huart->Init.Mode         = UART_MODE_TX_RX;
 8003aea:	230c      	movs	r3, #12
 8003aec:	61a3      	str	r3, [r4, #24]
  huart->Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8003aee:	2200      	movs	r2, #0
 8003af0:	61e2      	str	r2, [r4, #28]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8003af2:	6222      	str	r2, [r4, #32]
#ifdef UART_ONE_BIT_SAMPLE_DISABLE
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
#endif

  /* Set the NVIC priority for future interrupts */
  HAL_NVIC_SetPriority(obj->irq, UART_IRQ_PRIO, UART_IRQ_SUBPRIO);
 8003af4:	2101      	movs	r1, #1
 8003af6:	f994 0058 	ldrsb.w	r0, [r4, #88]	; 0x58
 8003afa:	f7fd f847 	bl	8000b8c <HAL_NVIC_SetPriority>
    }
#endif
  }
#endif

  if (uart_rx == NP) {
 8003afe:	2d00      	cmp	r5, #0
 8003b00:	d053      	beq.n	8003baa <uart_init+0x14a>
    if (HAL_HalfDuplex_Init(huart) != HAL_OK) {
      return;
    }
  } else if (HAL_UART_Init(huart) != HAL_OK) {
 8003b02:	4648      	mov	r0, r9
 8003b04:	f7fe fa01 	bl	8001f0a <HAL_UART_Init>
    return;
  }
}
 8003b08:	b004      	add	sp, #16
 8003b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_USART1_FORCE_RESET();
 8003b0e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8003b12:	68da      	ldr	r2, [r3, #12]
 8003b14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b18:	60da      	str	r2, [r3, #12]
    __HAL_RCC_USART1_RELEASE_RESET();
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b20:	60da      	str	r2, [r3, #12]
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b22:	699a      	ldr	r2, [r3, #24]
 8003b24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b28:	619a      	str	r2, [r3, #24]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b30:	9301      	str	r3, [sp, #4]
 8003b32:	9b01      	ldr	r3, [sp, #4]
    obj->index = UART1_INDEX;
 8003b34:	2300      	movs	r3, #0
 8003b36:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
    obj->irq = USART1_IRQn;
 8003b3a:	2325      	movs	r3, #37	; 0x25
 8003b3c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8003b40:	e7bd      	b.n	8003abe <uart_init+0x5e>
    __HAL_RCC_USART2_FORCE_RESET();
 8003b42:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003b4c:	611a      	str	r2, [r3, #16]
    __HAL_RCC_USART2_RELEASE_RESET();
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003b54:	611a      	str	r2, [r3, #16]
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b56:	69da      	ldr	r2, [r3, #28]
 8003b58:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003b5c:	61da      	str	r2, [r3, #28]
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b64:	9302      	str	r3, [sp, #8]
 8003b66:	9b02      	ldr	r3, [sp, #8]
    obj->index = UART2_INDEX;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
    obj->irq = USART2_IRQn;
 8003b6e:	2326      	movs	r3, #38	; 0x26
 8003b70:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8003b74:	e7a3      	b.n	8003abe <uart_init+0x5e>
    __HAL_RCC_USART3_FORCE_RESET();
 8003b76:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003b80:	611a      	str	r2, [r3, #16]
    __HAL_RCC_USART3_RELEASE_RESET();
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b88:	611a      	str	r2, [r3, #16]
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b8a:	69da      	ldr	r2, [r3, #28]
 8003b8c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003b90:	61da      	str	r2, [r3, #28]
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b98:	9303      	str	r3, [sp, #12]
 8003b9a:	9b03      	ldr	r3, [sp, #12]
    obj->index = UART3_INDEX;
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
    obj->irq = USART3_IRQn;
 8003ba2:	2327      	movs	r3, #39	; 0x27
 8003ba4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8003ba8:	e789      	b.n	8003abe <uart_init+0x5e>
    if (HAL_HalfDuplex_Init(huart) != HAL_OK) {
 8003baa:	4648      	mov	r0, r9
 8003bac:	f7fe f9dc 	bl	8001f68 <HAL_HalfDuplex_Init>
 8003bb0:	e7aa      	b.n	8003b08 <uart_init+0xa8>
 8003bb2:	4770      	bx	lr
 8003bb4:	080042ac 	.word	0x080042ac
 8003bb8:	08004270 	.word	0x08004270
 8003bbc:	40013800 	.word	0x40013800
 8003bc0:	40004400 	.word	0x40004400
 8003bc4:	40004800 	.word	0x40004800
 8003bc8:	20000468 	.word	0x20000468

08003bcc <serial_rx_active>:
 *
 * @param obj The serial object
 * @return Non-zero if the RX transaction is ongoing, 0 otherwise
 */
uint8_t serial_rx_active(serial_t *obj)
{
 8003bcc:	b508      	push	{r3, lr}
  return ((HAL_UART_GetState(uart_handlers[obj->index]) & HAL_UART_STATE_BUSY_RX) == HAL_UART_STATE_BUSY_RX);
 8003bce:	f890 2059 	ldrb.w	r2, [r0, #89]	; 0x59
 8003bd2:	4b06      	ldr	r3, [pc, #24]	; (8003bec <serial_rx_active+0x20>)
 8003bd4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003bd8:	f7fe fbd8 	bl	800238c <HAL_UART_GetState>
 8003bdc:	f000 0022 	and.w	r0, r0, #34	; 0x22
}
 8003be0:	2822      	cmp	r0, #34	; 0x22
 8003be2:	bf14      	ite	ne
 8003be4:	2000      	movne	r0, #0
 8003be6:	2001      	moveq	r0, #1
 8003be8:	bd08      	pop	{r3, pc}
 8003bea:	bf00      	nop
 8003bec:	20000468 	.word	0x20000468

08003bf0 <serial_tx_active>:
 *
 * @param obj The serial object
 * @return Non-zero if the TX transaction is ongoing, 0 otherwise
 */
uint8_t serial_tx_active(serial_t *obj)
{
 8003bf0:	b508      	push	{r3, lr}
  return ((HAL_UART_GetState(uart_handlers[obj->index]) & HAL_UART_STATE_BUSY_TX) == HAL_UART_STATE_BUSY_TX);
 8003bf2:	f890 2059 	ldrb.w	r2, [r0, #89]	; 0x59
 8003bf6:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <serial_tx_active+0x20>)
 8003bf8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003bfc:	f7fe fbc6 	bl	800238c <HAL_UART_GetState>
 8003c00:	f000 0021 	and.w	r0, r0, #33	; 0x21
}
 8003c04:	2821      	cmp	r0, #33	; 0x21
 8003c06:	bf14      	ite	ne
 8003c08:	2000      	movne	r0, #0
 8003c0a:	2001      	moveq	r0, #1
 8003c0c:	bd08      	pop	{r3, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000468 	.word	0x20000468

08003c14 <uart_getc>:
  * @param  obj : pointer to serial_t structure
  * @retval last character received
  */
int uart_getc(serial_t *obj, unsigned char *c)
{
  if (obj == NULL) {
 8003c14:	b1a0      	cbz	r0, 8003c40 <uart_getc+0x2c>
{
 8003c16:	b538      	push	{r3, r4, r5, lr}
 8003c18:	460d      	mov	r5, r1
 8003c1a:	4604      	mov	r4, r0
    return -1;
  }

  if (serial_rx_active(obj)) {
 8003c1c:	f7ff ffd6 	bl	8003bcc <serial_rx_active>
 8003c20:	b988      	cbnz	r0, 8003c46 <uart_getc+0x32>
    return -1; /* Transaction ongoing */
  }

  *c = (unsigned char)(obj->recv);
 8003c22:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 8003c26:	702b      	strb	r3, [r5, #0]
  /* Restart RX irq */
  HAL_UART_Receive_IT(uart_handlers[obj->index], &(obj->recv), 1);
 8003c28:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f104 015a 	add.w	r1, r4, #90	; 0x5a
 8003c32:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <uart_getc+0x38>)
 8003c34:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003c38:	f7fe fbc9 	bl	80023ce <HAL_UART_Receive_IT>

  return 0;
 8003c3c:	2000      	movs	r0, #0
}
 8003c3e:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 8003c40:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003c44:	4770      	bx	lr
    return -1; /* Transaction ongoing */
 8003c46:	f04f 30ff 	mov.w	r0, #4294967295
 8003c4a:	e7f8      	b.n	8003c3e <uart_getc+0x2a>
 8003c4c:	20000468 	.word	0x20000468

08003c50 <uart_attach_rx_callback>:
 * @param callback : function call at the end of reception
 * @retval none
 */
void uart_attach_rx_callback(serial_t *obj, void (*callback)(serial_t *))
{
  if (obj == NULL) {
 8003c50:	b1d0      	cbz	r0, 8003c88 <uart_attach_rx_callback+0x38>
{
 8003c52:	b538      	push	{r3, r4, r5, lr}
 8003c54:	460d      	mov	r5, r1
 8003c56:	4604      	mov	r4, r0
    return;
  }

  /* Exit if a reception is already on-going */
  if (serial_rx_active(obj)) {
 8003c58:	f7ff ffb8 	bl	8003bcc <serial_rx_active>
 8003c5c:	b100      	cbz	r0, 8003c60 <uart_attach_rx_callback+0x10>

  HAL_UART_Receive_IT(uart_handlers[obj->index], &(obj->recv), 1);

  /* Enable interrupt */
  HAL_NVIC_EnableIRQ(obj->irq);
}
 8003c5e:	bd38      	pop	{r3, r4, r5, pc}
  obj->rx_callback = callback;
 8003c60:	64a5      	str	r5, [r4, #72]	; 0x48
  HAL_NVIC_DisableIRQ(obj->irq);
 8003c62:	f994 0058 	ldrsb.w	r0, [r4, #88]	; 0x58
 8003c66:	f7fc ffd3 	bl	8000c10 <HAL_NVIC_DisableIRQ>
  HAL_UART_Receive_IT(uart_handlers[obj->index], &(obj->recv), 1);
 8003c6a:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f104 015a 	add.w	r1, r4, #90	; 0x5a
 8003c74:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <uart_attach_rx_callback+0x3c>)
 8003c76:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003c7a:	f7fe fba8 	bl	80023ce <HAL_UART_Receive_IT>
  HAL_NVIC_EnableIRQ(obj->irq);
 8003c7e:	f994 0058 	ldrsb.w	r0, [r4, #88]	; 0x58
 8003c82:	f7fc ffb7 	bl	8000bf4 <HAL_NVIC_EnableIRQ>
 8003c86:	e7ea      	b.n	8003c5e <uart_attach_rx_callback+0xe>
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	20000468 	.word	0x20000468

08003c90 <uart_attach_tx_callback>:
 * @param callback : function call at the end of transmission
 * @retval none
 */
void uart_attach_tx_callback(serial_t *obj, int (*callback)(serial_t *), size_t size)
{
  if (obj == NULL) {
 8003c90:	b1c8      	cbz	r0, 8003cc6 <uart_attach_tx_callback+0x36>
{
 8003c92:	b538      	push	{r3, r4, r5, lr}
 8003c94:	4615      	mov	r5, r2
 8003c96:	4604      	mov	r4, r0
    return;
  }
  obj->tx_callback = callback;
 8003c98:	64c1      	str	r1, [r0, #76]	; 0x4c

  /* Must disable interrupt to prevent handle lock contention */
  HAL_NVIC_DisableIRQ(obj->irq);
 8003c9a:	f990 0058 	ldrsb.w	r0, [r0, #88]	; 0x58
 8003c9e:	f7fc ffb7 	bl	8000c10 <HAL_NVIC_DisableIRQ>

  /* The following function will enable UART_IT_TXE and error interrupts */
  HAL_UART_Transmit_IT(uart_handlers[obj->index], &obj->tx_buff[obj->tx_tail], size);
 8003ca2:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8003ca6:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003ca8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	b2aa      	uxth	r2, r5
 8003cb0:	4419      	add	r1, r3
 8003cb2:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <uart_attach_tx_callback+0x38>)
 8003cb4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003cb8:	f7fe f98b 	bl	8001fd2 <HAL_UART_Transmit_IT>

  /* Enable interrupt */
  HAL_NVIC_EnableIRQ(obj->irq);
 8003cbc:	f994 0058 	ldrsb.w	r0, [r4, #88]	; 0x58
 8003cc0:	f7fc ff98 	bl	8000bf4 <HAL_NVIC_EnableIRQ>
}
 8003cc4:	bd38      	pop	{r3, r4, r5, pc}
 8003cc6:	4770      	bx	lr
 8003cc8:	20000468 	.word	0x20000468

08003ccc <uart_enable_tx>:
 * @param obj : pointer to serial_t structure
 * @retval none
 */
void uart_enable_tx(serial_t *obj)
{
  if (obj != NULL && obj->pin_rx == NC) {
 8003ccc:	b168      	cbz	r0, 8003cea <uart_enable_tx+0x1e>
{
 8003cce:	b508      	push	{r3, lr}
  if (obj != NULL && obj->pin_rx == NC) {
 8003cd0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8003cd2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8003cd6:	d000      	beq.n	8003cda <uart_enable_tx+0xe>
    HAL_HalfDuplex_EnableTransmitter(uart_handlers[obj->index]);
  }
}
 8003cd8:	bd08      	pop	{r3, pc}
    HAL_HalfDuplex_EnableTransmitter(uart_handlers[obj->index]);
 8003cda:	f890 2059 	ldrb.w	r2, [r0, #89]	; 0x59
 8003cde:	4b03      	ldr	r3, [pc, #12]	; (8003cec <uart_enable_tx+0x20>)
 8003ce0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003ce4:	f7fe fb1c 	bl	8002320 <HAL_HalfDuplex_EnableTransmitter>
}
 8003ce8:	e7f6      	b.n	8003cd8 <uart_enable_tx+0xc>
 8003cea:	4770      	bx	lr
 8003cec:	20000468 	.word	0x20000468

08003cf0 <uart_enable_rx>:
 * @param obj : pointer to serial_t structure
 * @retval none
 */
void uart_enable_rx(serial_t *obj)
{
  if (obj != NULL && obj->pin_rx == NC) {
 8003cf0:	b168      	cbz	r0, 8003d0e <uart_enable_rx+0x1e>
{
 8003cf2:	b508      	push	{r3, lr}
  if (obj != NULL && obj->pin_rx == NC) {
 8003cf4:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8003cf6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8003cfa:	d000      	beq.n	8003cfe <uart_enable_rx+0xe>
    HAL_HalfDuplex_EnableReceiver(uart_handlers[obj->index]);
  }
}
 8003cfc:	bd08      	pop	{r3, pc}
    HAL_HalfDuplex_EnableReceiver(uart_handlers[obj->index]);
 8003cfe:	f890 2059 	ldrb.w	r2, [r0, #89]	; 0x59
 8003d02:	4b03      	ldr	r3, [pc, #12]	; (8003d10 <uart_enable_rx+0x20>)
 8003d04:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003d08:	f7fe fb25 	bl	8002356 <HAL_HalfDuplex_EnableReceiver>
}
 8003d0c:	e7f6      	b.n	8003cfc <uart_enable_rx+0xc>
 8003d0e:	4770      	bx	lr
 8003d10:	20000468 	.word	0x20000468

08003d14 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback
  * @param  UartHandle pointer on the uart reference
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d14:	b508      	push	{r3, lr}
  serial_t *obj = get_serial_obj(huart);
 8003d16:	f7ff fea1 	bl	8003a5c <get_serial_obj>
  if (obj) {
 8003d1a:	b108      	cbz	r0, 8003d20 <HAL_UART_RxCpltCallback+0xc>
    obj->rx_callback(obj);
 8003d1c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003d1e:	4790      	blx	r2
  }
}
 8003d20:	bd08      	pop	{r3, pc}

08003d22 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  UartHandle pointer on the uart reference
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d22:	b508      	push	{r3, lr}
  serial_t *obj = get_serial_obj(huart);
 8003d24:	f7ff fe9a 	bl	8003a5c <get_serial_obj>
  if (obj) {
 8003d28:	b108      	cbz	r0, 8003d2e <HAL_UART_TxCpltCallback+0xc>
    obj->tx_callback(obj);
 8003d2a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8003d2c:	4790      	blx	r2
  }
}
 8003d2e:	bd08      	pop	{r3, pc}

08003d30 <HAL_UART_ErrorCallback>:
  * @brief  error callback from UART
  * @param  UartHandle pointer on the uart reference
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d30:	b530      	push	{r4, r5, lr}
 8003d32:	b085      	sub	sp, #20
 8003d34:	4604      	mov	r4, r0
#if defined(STM32F1xx) || defined(STM32F2xx) || defined(STM32F4xx) || defined(STM32L1xx)
  if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE) != RESET) {
 8003d36:	6803      	ldr	r3, [r0, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	f012 0f01 	tst.w	r2, #1
 8003d3e:	d010      	beq.n	8003d62 <HAL_UART_ErrorCallback+0x32>
    __HAL_UART_CLEAR_PEFLAG(huart); /* Clear PE flag */
 8003d40:	2200      	movs	r2, #0
 8003d42:	9200      	str	r2, [sp, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	9200      	str	r2, [sp, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	9b00      	ldr	r3, [sp, #0]
  } else if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) != RESET) {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF); /* Clear ORE flag */
  }
#endif
  /* Restart receive interrupt after any error */
  serial_t *obj = get_serial_obj(huart);
 8003d4e:	4620      	mov	r0, r4
 8003d50:	f7ff fe84 	bl	8003a5c <get_serial_obj>
  if (obj && !serial_rx_active(obj)) {
 8003d54:	4605      	mov	r5, r0
 8003d56:	b110      	cbz	r0, 8003d5e <HAL_UART_ErrorCallback+0x2e>
 8003d58:	f7ff ff38 	bl	8003bcc <serial_rx_active>
 8003d5c:	b328      	cbz	r0, 8003daa <HAL_UART_ErrorCallback+0x7a>
    HAL_UART_Receive_IT(huart, &(obj->recv), 1);
  }
}
 8003d5e:	b005      	add	sp, #20
 8003d60:	bd30      	pop	{r4, r5, pc}
  } else if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE) != RESET) {
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	f012 0f02 	tst.w	r2, #2
 8003d68:	d007      	beq.n	8003d7a <HAL_UART_ErrorCallback+0x4a>
    __HAL_UART_CLEAR_FEFLAG(huart); /* Clear FE flag */
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	9201      	str	r2, [sp, #4]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	9201      	str	r2, [sp, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	9301      	str	r3, [sp, #4]
 8003d76:	9b01      	ldr	r3, [sp, #4]
 8003d78:	e7e9      	b.n	8003d4e <HAL_UART_ErrorCallback+0x1e>
  } else if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE) != RESET) {
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	f012 0f04 	tst.w	r2, #4
 8003d80:	d007      	beq.n	8003d92 <HAL_UART_ErrorCallback+0x62>
    __HAL_UART_CLEAR_NEFLAG(huart); /* Clear NE flag */
 8003d82:	2200      	movs	r2, #0
 8003d84:	9202      	str	r2, [sp, #8]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	9202      	str	r2, [sp, #8]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	9302      	str	r3, [sp, #8]
 8003d8e:	9b02      	ldr	r3, [sp, #8]
 8003d90:	e7dd      	b.n	8003d4e <HAL_UART_ErrorCallback+0x1e>
  } else if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) != RESET) {
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	f012 0f08 	tst.w	r2, #8
 8003d98:	d0d9      	beq.n	8003d4e <HAL_UART_ErrorCallback+0x1e>
    __HAL_UART_CLEAR_OREFLAG(huart); /* Clear ORE flag */
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	9203      	str	r2, [sp, #12]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	9203      	str	r2, [sp, #12]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	9303      	str	r3, [sp, #12]
 8003da6:	9b03      	ldr	r3, [sp, #12]
 8003da8:	e7d1      	b.n	8003d4e <HAL_UART_ErrorCallback+0x1e>
    HAL_UART_Receive_IT(huart, &(obj->recv), 1);
 8003daa:	2201      	movs	r2, #1
 8003dac:	f105 015a 	add.w	r1, r5, #90	; 0x5a
 8003db0:	4620      	mov	r0, r4
 8003db2:	f7fe fb0c 	bl	80023ce <HAL_UART_Receive_IT>
}
 8003db6:	e7d2      	b.n	8003d5e <HAL_UART_ErrorCallback+0x2e>

08003db8 <USART1_IRQHandler>:
  * @param  None
  * @retval None
  */
#if defined(USART1_BASE)
void USART1_IRQHandler(void)
{
 8003db8:	b508      	push	{r3, lr}
  HAL_NVIC_ClearPendingIRQ(USART1_IRQn);
 8003dba:	2025      	movs	r0, #37	; 0x25
 8003dbc:	f7fc ff50 	bl	8000c60 <HAL_NVIC_ClearPendingIRQ>
  HAL_UART_IRQHandler(uart_handlers[UART1_INDEX]);
 8003dc0:	4b02      	ldr	r3, [pc, #8]	; (8003dcc <USART1_IRQHandler+0x14>)
 8003dc2:	6818      	ldr	r0, [r3, #0]
 8003dc4:	f7fe f9aa 	bl	800211c <HAL_UART_IRQHandler>
}
 8003dc8:	bd08      	pop	{r3, pc}
 8003dca:	bf00      	nop
 8003dcc:	20000468 	.word	0x20000468

08003dd0 <USART2_IRQHandler>:
  * @param  None
  * @retval None
  */
#if defined(USART2_BASE)
void USART2_IRQHandler(void)
{
 8003dd0:	b508      	push	{r3, lr}
  HAL_NVIC_ClearPendingIRQ(USART2_IRQn);
 8003dd2:	2026      	movs	r0, #38	; 0x26
 8003dd4:	f7fc ff44 	bl	8000c60 <HAL_NVIC_ClearPendingIRQ>
  if (uart_handlers[UART2_INDEX] != NULL) {
 8003dd8:	4b02      	ldr	r3, [pc, #8]	; (8003de4 <USART2_IRQHandler+0x14>)
 8003dda:	6858      	ldr	r0, [r3, #4]
 8003ddc:	b108      	cbz	r0, 8003de2 <USART2_IRQHandler+0x12>
    HAL_UART_IRQHandler(uart_handlers[UART2_INDEX]);
 8003dde:	f7fe f99d 	bl	800211c <HAL_UART_IRQHandler>
#if defined(STM32G0xx) && defined(LPUART2_BASE)
  if (uart_handlers[LPUART2_INDEX] != NULL) {
    HAL_UART_IRQHandler(uart_handlers[LPUART2_INDEX]);
  }
#endif
}
 8003de2:	bd08      	pop	{r3, pc}
 8003de4:	20000468 	.word	0x20000468

08003de8 <USART3_IRQHandler>:
  * @param  None
  * @retval None
  */
#if defined(USART3_BASE)
void USART3_IRQHandler(void)
{
 8003de8:	b508      	push	{r3, lr}
  HAL_NVIC_ClearPendingIRQ(USART3_IRQn);
 8003dea:	2027      	movs	r0, #39	; 0x27
 8003dec:	f7fc ff38 	bl	8000c60 <HAL_NVIC_ClearPendingIRQ>
  }
  if (__HAL_GET_PENDING_IT(HAL_ITLINE_USART8) != RESET) {
    HAL_UART_IRQHandler(uart_handlers[UART8_INDEX]);
  }
#else
  if (uart_handlers[UART3_INDEX] != NULL) {
 8003df0:	4b02      	ldr	r3, [pc, #8]	; (8003dfc <USART3_IRQHandler+0x14>)
 8003df2:	6898      	ldr	r0, [r3, #8]
 8003df4:	b108      	cbz	r0, 8003dfa <USART3_IRQHandler+0x12>
    HAL_UART_IRQHandler(uart_handlers[UART3_INDEX]);
 8003df6:	f7fe f991 	bl	800211c <HAL_UART_IRQHandler>
    HAL_UART_IRQHandler(uart_handlers[LPUART1_INDEX]);
  }
#endif /* STM32G0xx && LPUART1_BASE */
#endif /* STM32F0xx || STM32G0xx */
#endif /* STM32F091xC || STM32F098xx */
}
 8003dfa:	bd08      	pop	{r3, pc}
 8003dfc:	20000468 	.word	0x20000468

08003e00 <_Znwj>:
 8003e00:	2801      	cmp	r0, #1
 8003e02:	bf38      	it	cc
 8003e04:	2001      	movcc	r0, #1
 8003e06:	b510      	push	{r4, lr}
 8003e08:	4604      	mov	r4, r0
 8003e0a:	4620      	mov	r0, r4
 8003e0c:	f000 f846 	bl	8003e9c <malloc>
 8003e10:	b930      	cbnz	r0, 8003e20 <_Znwj+0x20>
 8003e12:	f000 f809 	bl	8003e28 <_ZSt15get_new_handlerv>
 8003e16:	b908      	cbnz	r0, 8003e1c <_Znwj+0x1c>
 8003e18:	f000 f80e 	bl	8003e38 <abort>
 8003e1c:	4780      	blx	r0
 8003e1e:	e7f4      	b.n	8003e0a <_Znwj+0xa>
 8003e20:	bd10      	pop	{r4, pc}

08003e22 <_ZSt25__throw_bad_function_callv>:
 8003e22:	b508      	push	{r3, lr}
 8003e24:	f000 f808 	bl	8003e38 <abort>

08003e28 <_ZSt15get_new_handlerv>:
 8003e28:	4b02      	ldr	r3, [pc, #8]	; (8003e34 <_ZSt15get_new_handlerv+0xc>)
 8003e2a:	6818      	ldr	r0, [r3, #0]
 8003e2c:	f3bf 8f5b 	dmb	ish
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	20000474 	.word	0x20000474

08003e38 <abort>:
 8003e38:	2006      	movs	r0, #6
 8003e3a:	b508      	push	{r3, lr}
 8003e3c:	f000 f8d6 	bl	8003fec <raise>
 8003e40:	2001      	movs	r0, #1
 8003e42:	f7fc fe18 	bl	8000a76 <_exit>
	...

08003e48 <__errno>:
 8003e48:	4b01      	ldr	r3, [pc, #4]	; (8003e50 <__errno+0x8>)
 8003e4a:	6818      	ldr	r0, [r3, #0]
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	2000000c 	.word	0x2000000c

08003e54 <__libc_init_array>:
 8003e54:	b570      	push	{r4, r5, r6, lr}
 8003e56:	2600      	movs	r6, #0
 8003e58:	4d0c      	ldr	r5, [pc, #48]	; (8003e8c <__libc_init_array+0x38>)
 8003e5a:	4c0d      	ldr	r4, [pc, #52]	; (8003e90 <__libc_init_array+0x3c>)
 8003e5c:	1b64      	subs	r4, r4, r5
 8003e5e:	10a4      	asrs	r4, r4, #2
 8003e60:	42a6      	cmp	r6, r4
 8003e62:	d109      	bne.n	8003e78 <__libc_init_array+0x24>
 8003e64:	f000 f8ec 	bl	8004040 <_init>
 8003e68:	2600      	movs	r6, #0
 8003e6a:	4d0a      	ldr	r5, [pc, #40]	; (8003e94 <__libc_init_array+0x40>)
 8003e6c:	4c0a      	ldr	r4, [pc, #40]	; (8003e98 <__libc_init_array+0x44>)
 8003e6e:	1b64      	subs	r4, r4, r5
 8003e70:	10a4      	asrs	r4, r4, #2
 8003e72:	42a6      	cmp	r6, r4
 8003e74:	d105      	bne.n	8003e82 <__libc_init_array+0x2e>
 8003e76:	bd70      	pop	{r4, r5, r6, pc}
 8003e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e7c:	4798      	blx	r3
 8003e7e:	3601      	adds	r6, #1
 8003e80:	e7ee      	b.n	8003e60 <__libc_init_array+0xc>
 8003e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e86:	4798      	blx	r3
 8003e88:	3601      	adds	r6, #1
 8003e8a:	e7f2      	b.n	8003e72 <__libc_init_array+0x1e>
 8003e8c:	08004348 	.word	0x08004348
 8003e90:	08004348 	.word	0x08004348
 8003e94:	08004348 	.word	0x08004348
 8003e98:	08004358 	.word	0x08004358

08003e9c <malloc>:
 8003e9c:	4b02      	ldr	r3, [pc, #8]	; (8003ea8 <malloc+0xc>)
 8003e9e:	4601      	mov	r1, r0
 8003ea0:	6818      	ldr	r0, [r3, #0]
 8003ea2:	f000 b811 	b.w	8003ec8 <_malloc_r>
 8003ea6:	bf00      	nop
 8003ea8:	2000000c 	.word	0x2000000c

08003eac <memcpy>:
 8003eac:	440a      	add	r2, r1
 8003eae:	4291      	cmp	r1, r2
 8003eb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003eb4:	d100      	bne.n	8003eb8 <memcpy+0xc>
 8003eb6:	4770      	bx	lr
 8003eb8:	b510      	push	{r4, lr}
 8003eba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ebe:	4291      	cmp	r1, r2
 8003ec0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ec4:	d1f9      	bne.n	8003eba <memcpy+0xe>
 8003ec6:	bd10      	pop	{r4, pc}

08003ec8 <_malloc_r>:
 8003ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eca:	1ccd      	adds	r5, r1, #3
 8003ecc:	f025 0503 	bic.w	r5, r5, #3
 8003ed0:	3508      	adds	r5, #8
 8003ed2:	2d0c      	cmp	r5, #12
 8003ed4:	bf38      	it	cc
 8003ed6:	250c      	movcc	r5, #12
 8003ed8:	2d00      	cmp	r5, #0
 8003eda:	4606      	mov	r6, r0
 8003edc:	db01      	blt.n	8003ee2 <_malloc_r+0x1a>
 8003ede:	42a9      	cmp	r1, r5
 8003ee0:	d903      	bls.n	8003eea <_malloc_r+0x22>
 8003ee2:	230c      	movs	r3, #12
 8003ee4:	6033      	str	r3, [r6, #0]
 8003ee6:	2000      	movs	r0, #0
 8003ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eea:	f000 f89d 	bl	8004028 <__malloc_lock>
 8003eee:	4921      	ldr	r1, [pc, #132]	; (8003f74 <_malloc_r+0xac>)
 8003ef0:	680a      	ldr	r2, [r1, #0]
 8003ef2:	4614      	mov	r4, r2
 8003ef4:	b99c      	cbnz	r4, 8003f1e <_malloc_r+0x56>
 8003ef6:	4f20      	ldr	r7, [pc, #128]	; (8003f78 <_malloc_r+0xb0>)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	b923      	cbnz	r3, 8003f06 <_malloc_r+0x3e>
 8003efc:	4621      	mov	r1, r4
 8003efe:	4630      	mov	r0, r6
 8003f00:	f000 f83c 	bl	8003f7c <_sbrk_r>
 8003f04:	6038      	str	r0, [r7, #0]
 8003f06:	4629      	mov	r1, r5
 8003f08:	4630      	mov	r0, r6
 8003f0a:	f000 f837 	bl	8003f7c <_sbrk_r>
 8003f0e:	1c43      	adds	r3, r0, #1
 8003f10:	d123      	bne.n	8003f5a <_malloc_r+0x92>
 8003f12:	230c      	movs	r3, #12
 8003f14:	4630      	mov	r0, r6
 8003f16:	6033      	str	r3, [r6, #0]
 8003f18:	f000 f88c 	bl	8004034 <__malloc_unlock>
 8003f1c:	e7e3      	b.n	8003ee6 <_malloc_r+0x1e>
 8003f1e:	6823      	ldr	r3, [r4, #0]
 8003f20:	1b5b      	subs	r3, r3, r5
 8003f22:	d417      	bmi.n	8003f54 <_malloc_r+0x8c>
 8003f24:	2b0b      	cmp	r3, #11
 8003f26:	d903      	bls.n	8003f30 <_malloc_r+0x68>
 8003f28:	6023      	str	r3, [r4, #0]
 8003f2a:	441c      	add	r4, r3
 8003f2c:	6025      	str	r5, [r4, #0]
 8003f2e:	e004      	b.n	8003f3a <_malloc_r+0x72>
 8003f30:	6863      	ldr	r3, [r4, #4]
 8003f32:	42a2      	cmp	r2, r4
 8003f34:	bf0c      	ite	eq
 8003f36:	600b      	streq	r3, [r1, #0]
 8003f38:	6053      	strne	r3, [r2, #4]
 8003f3a:	4630      	mov	r0, r6
 8003f3c:	f000 f87a 	bl	8004034 <__malloc_unlock>
 8003f40:	f104 000b 	add.w	r0, r4, #11
 8003f44:	1d23      	adds	r3, r4, #4
 8003f46:	f020 0007 	bic.w	r0, r0, #7
 8003f4a:	1ac2      	subs	r2, r0, r3
 8003f4c:	d0cc      	beq.n	8003ee8 <_malloc_r+0x20>
 8003f4e:	1a1b      	subs	r3, r3, r0
 8003f50:	50a3      	str	r3, [r4, r2]
 8003f52:	e7c9      	b.n	8003ee8 <_malloc_r+0x20>
 8003f54:	4622      	mov	r2, r4
 8003f56:	6864      	ldr	r4, [r4, #4]
 8003f58:	e7cc      	b.n	8003ef4 <_malloc_r+0x2c>
 8003f5a:	1cc4      	adds	r4, r0, #3
 8003f5c:	f024 0403 	bic.w	r4, r4, #3
 8003f60:	42a0      	cmp	r0, r4
 8003f62:	d0e3      	beq.n	8003f2c <_malloc_r+0x64>
 8003f64:	1a21      	subs	r1, r4, r0
 8003f66:	4630      	mov	r0, r6
 8003f68:	f000 f808 	bl	8003f7c <_sbrk_r>
 8003f6c:	3001      	adds	r0, #1
 8003f6e:	d1dd      	bne.n	8003f2c <_malloc_r+0x64>
 8003f70:	e7cf      	b.n	8003f12 <_malloc_r+0x4a>
 8003f72:	bf00      	nop
 8003f74:	20000478 	.word	0x20000478
 8003f78:	2000047c 	.word	0x2000047c

08003f7c <_sbrk_r>:
 8003f7c:	b538      	push	{r3, r4, r5, lr}
 8003f7e:	2300      	movs	r3, #0
 8003f80:	4d05      	ldr	r5, [pc, #20]	; (8003f98 <_sbrk_r+0x1c>)
 8003f82:	4604      	mov	r4, r0
 8003f84:	4608      	mov	r0, r1
 8003f86:	602b      	str	r3, [r5, #0]
 8003f88:	f7fc fd7c 	bl	8000a84 <_sbrk>
 8003f8c:	1c43      	adds	r3, r0, #1
 8003f8e:	d102      	bne.n	8003f96 <_sbrk_r+0x1a>
 8003f90:	682b      	ldr	r3, [r5, #0]
 8003f92:	b103      	cbz	r3, 8003f96 <_sbrk_r+0x1a>
 8003f94:	6023      	str	r3, [r4, #0]
 8003f96:	bd38      	pop	{r3, r4, r5, pc}
 8003f98:	2000051c 	.word	0x2000051c

08003f9c <_raise_r>:
 8003f9c:	291f      	cmp	r1, #31
 8003f9e:	b538      	push	{r3, r4, r5, lr}
 8003fa0:	4604      	mov	r4, r0
 8003fa2:	460d      	mov	r5, r1
 8003fa4:	d904      	bls.n	8003fb0 <_raise_r+0x14>
 8003fa6:	2316      	movs	r3, #22
 8003fa8:	6003      	str	r3, [r0, #0]
 8003faa:	f04f 30ff 	mov.w	r0, #4294967295
 8003fae:	bd38      	pop	{r3, r4, r5, pc}
 8003fb0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003fb2:	b112      	cbz	r2, 8003fba <_raise_r+0x1e>
 8003fb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003fb8:	b94b      	cbnz	r3, 8003fce <_raise_r+0x32>
 8003fba:	4620      	mov	r0, r4
 8003fbc:	f000 f830 	bl	8004020 <_getpid_r>
 8003fc0:	462a      	mov	r2, r5
 8003fc2:	4601      	mov	r1, r0
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fca:	f000 b817 	b.w	8003ffc <_kill_r>
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d00a      	beq.n	8003fe8 <_raise_r+0x4c>
 8003fd2:	1c59      	adds	r1, r3, #1
 8003fd4:	d103      	bne.n	8003fde <_raise_r+0x42>
 8003fd6:	2316      	movs	r3, #22
 8003fd8:	6003      	str	r3, [r0, #0]
 8003fda:	2001      	movs	r0, #1
 8003fdc:	e7e7      	b.n	8003fae <_raise_r+0x12>
 8003fde:	2400      	movs	r4, #0
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003fe6:	4798      	blx	r3
 8003fe8:	2000      	movs	r0, #0
 8003fea:	e7e0      	b.n	8003fae <_raise_r+0x12>

08003fec <raise>:
 8003fec:	4b02      	ldr	r3, [pc, #8]	; (8003ff8 <raise+0xc>)
 8003fee:	4601      	mov	r1, r0
 8003ff0:	6818      	ldr	r0, [r3, #0]
 8003ff2:	f7ff bfd3 	b.w	8003f9c <_raise_r>
 8003ff6:	bf00      	nop
 8003ff8:	2000000c 	.word	0x2000000c

08003ffc <_kill_r>:
 8003ffc:	b538      	push	{r3, r4, r5, lr}
 8003ffe:	2300      	movs	r3, #0
 8004000:	4d06      	ldr	r5, [pc, #24]	; (800401c <_kill_r+0x20>)
 8004002:	4604      	mov	r4, r0
 8004004:	4608      	mov	r0, r1
 8004006:	4611      	mov	r1, r2
 8004008:	602b      	str	r3, [r5, #0]
 800400a:	f7fc fd2c 	bl	8000a66 <_kill>
 800400e:	1c43      	adds	r3, r0, #1
 8004010:	d102      	bne.n	8004018 <_kill_r+0x1c>
 8004012:	682b      	ldr	r3, [r5, #0]
 8004014:	b103      	cbz	r3, 8004018 <_kill_r+0x1c>
 8004016:	6023      	str	r3, [r4, #0]
 8004018:	bd38      	pop	{r3, r4, r5, pc}
 800401a:	bf00      	nop
 800401c:	2000051c 	.word	0x2000051c

08004020 <_getpid_r>:
 8004020:	f7fc bd1f 	b.w	8000a62 <_getpid>

08004024 <__retarget_lock_acquire_recursive>:
 8004024:	4770      	bx	lr

08004026 <__retarget_lock_release_recursive>:
 8004026:	4770      	bx	lr

08004028 <__malloc_lock>:
 8004028:	4801      	ldr	r0, [pc, #4]	; (8004030 <__malloc_lock+0x8>)
 800402a:	f7ff bffb 	b.w	8004024 <__retarget_lock_acquire_recursive>
 800402e:	bf00      	nop
 8004030:	20000514 	.word	0x20000514

08004034 <__malloc_unlock>:
 8004034:	4801      	ldr	r0, [pc, #4]	; (800403c <__malloc_unlock+0x8>)
 8004036:	f7ff bff6 	b.w	8004026 <__retarget_lock_release_recursive>
 800403a:	bf00      	nop
 800403c:	20000514 	.word	0x20000514

08004040 <_init>:
 8004040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004042:	bf00      	nop
 8004044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004046:	bc08      	pop	{r3}
 8004048:	469e      	mov	lr, r3
 800404a:	4770      	bx	lr

0800404c <_fini>:
 800404c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404e:	bf00      	nop
 8004050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004052:	bc08      	pop	{r3}
 8004054:	469e      	mov	lr, r3
 8004056:	4770      	bx	lr
