
RC_iBus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f9c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  080040a8  080040a8  000140a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043e0  080043e0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080043e0  080043e0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043e0  080043e0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080043e0  080043e0  000143e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080043ec  080043ec  000143ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080043f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000074  08004468  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08004468  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a6cf  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006244  00000000  00000000  0005a76c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  000609b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  00061a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002298a  00000000  00000000  00062910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018b9b  00000000  00000000  0008529a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a056c  00000000  00000000  0009de35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013e3a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044a4  00000000  00000000  0013e3f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08004090 	.word	0x08004090

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08004090 	.word	0x08004090

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <_ZN14HardwareSerial5beginEm>:
    HardwareSerial(uint32_t _rx, uint32_t _tx);
    HardwareSerial(PinName _rx, PinName _tx);
    HardwareSerial(void *peripheral, HalfDuplexMode_t halfDuplex = HALF_DUPLEX_DISABLED);
    HardwareSerial(uint32_t _rxtx);
    HardwareSerial(PinName _rxtx);
    void begin(unsigned long baud)
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
    {
      begin(baud, SERIAL_8N1);
 8000166:	2206      	movs	r2, #6
 8000168:	6839      	ldr	r1, [r7, #0]
 800016a:	6878      	ldr	r0, [r7, #4]
 800016c:	f002 f96e 	bl	800244c <_ZN14HardwareSerial5beginEmh>
    }
 8000170:	bf00      	nop
 8000172:	3708      	adds	r7, #8
 8000174:	46bd      	mov	sp, r7
 8000176:	bd80      	pop	{r7, pc}

08000178 <mainAppl_Init>:

  * @brief Main application - initialization function.
  * @retval None
  */
void mainAppl_Init(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	af00      	add	r7, sp, #0
    mainCnt = 0u;
 800017c:	4b07      	ldr	r3, [pc, #28]	; (800019c <mainAppl_Init+0x24>)
 800017e:	2200      	movs	r2, #0
 8000180:	701a      	strb	r2, [r3, #0]

    /* Initialize Digital Outputs */
    DO_Init();
 8000182:	f000 f877 	bl	8000274 <DO_Init>

    /* Error Handler initialization */
    eh_Init();
 8000186:	f000 f85b 	bl	8000240 <eh_Init>

    /* UART configuration - initialization function */
    cfgUART_Init();
 800018a:	f000 f8ee 	bl	800036a <cfgUART_Init>

    /* Call begin() method of the serial object with needed baud rate */
    Serial1.begin(115200);
 800018e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000192:	4803      	ldr	r0, [pc, #12]	; (80001a0 <mainAppl_Init+0x28>)
 8000194:	f7ff ffe2 	bl	800015c <_ZN14HardwareSerial5beginEm>
}
 8000198:	bf00      	nop
 800019a:	bd80      	pop	{r7, pc}
 800019c:	20000090 	.word	0x20000090
 80001a0:	20000094 	.word	0x20000094

080001a4 <mainAppl_MainRunnable>:
/**
  * @brief Main application entry point. 
  * @retval None
  */
void mainAppl_MainRunnable(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
    /* Increment a variable for test */
    mainCnt++;
 80001a8:	4b0c      	ldr	r3, [pc, #48]	; (80001dc <mainAppl_MainRunnable+0x38>)
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	3301      	adds	r3, #1
 80001ae:	b2da      	uxtb	r2, r3
 80001b0:	4b0a      	ldr	r3, [pc, #40]	; (80001dc <mainAppl_MainRunnable+0x38>)
 80001b2:	701a      	strb	r2, [r3, #0]

    /* For test, toggle Green LED */
    DO_Set(LED_GREEN);
 80001b4:	2000      	movs	r0, #0
 80001b6:	f000 f8a5 	bl	8000304 <DO_Set>
    delayMS(500u);
 80001ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001be:	f000 f833 	bl	8000228 <delayMS>
    DO_Clear(LED_GREEN);
 80001c2:	2000      	movs	r0, #0
 80001c4:	f000 f8b4 	bl	8000330 <DO_Clear>
    delayMS(200u);
 80001c8:	20c8      	movs	r0, #200	; 0xc8
 80001ca:	f000 f82d 	bl	8000228 <delayMS>

    /* Send a string on serial port */
    Serial1.print("Hello ");
 80001ce:	4904      	ldr	r1, [pc, #16]	; (80001e0 <mainAppl_MainRunnable+0x3c>)
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <mainAppl_MainRunnable+0x40>)
 80001d2:	f002 fbf2 	bl	80029ba <_ZN5Print5printEPKc>

	/* TODO: Add implementation here */
}
 80001d6:	bf00      	nop
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	20000090 	.word	0x20000090
 80001e0:	080040a8 	.word	0x080040a8
 80001e4:	20000094 	.word	0x20000094

080001e8 <_Z41__static_initialization_and_destruction_0ii>:
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	6039      	str	r1, [r7, #0]
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	2b01      	cmp	r3, #1
 80001f6:	d109      	bne.n	800020c <_Z41__static_initialization_and_destruction_0ii+0x24>
 80001f8:	683b      	ldr	r3, [r7, #0]
 80001fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80001fe:	4293      	cmp	r3, r2
 8000200:	d104      	bne.n	800020c <_Z41__static_initialization_and_destruction_0ii+0x24>
HardwareSerial Serial1(PA_10, PA_9);
 8000202:	2209      	movs	r2, #9
 8000204:	210a      	movs	r1, #10
 8000206:	4803      	ldr	r0, [pc, #12]	; (8000214 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000208:	f002 f842 	bl	8002290 <_ZN14HardwareSerialC1E7PinNameS0_>
}
 800020c:	bf00      	nop
 800020e:	3708      	adds	r7, #8
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	20000094 	.word	0x20000094

08000218 <_GLOBAL__sub_I_Serial1>:
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
 800021c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000220:	2001      	movs	r0, #1
 8000222:	f7ff ffe1 	bl	80001e8 <_Z41__static_initialization_and_destruction_0ii>
 8000226:	bd80      	pop	{r7, pc}

08000228 <delayMS>:
  * @brief  FUNCTION: provides delay (in milliseconds) based on STM32 system function
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void delayMS(uint32_t delay)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
    /* call system provided function */
    HAL_Delay(delay);
 8000230:	6878      	ldr	r0, [r7, #4]
 8000232:	f000 fa9b 	bl	800076c <HAL_Delay>
}
 8000236:	bf00      	nop
 8000238:	3708      	adds	r7, #8
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
	...

08000240 <eh_Init>:
  * @brief Initialization function of the Error Handler module
  * @param None
  * @retval None
  */
void eh_Init(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
    ehMcuErrorCode = MCU_NO_ERROR;
 8000244:	4b03      	ldr	r3, [pc, #12]	; (8000254 <eh_Init+0x14>)
 8000246:	2200      	movs	r2, #0
 8000248:	701a      	strb	r2, [r3, #0]
}
 800024a:	bf00      	nop
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	200001a0 	.word	0x200001a0

08000258 <eh_SetMcuError>:
  * @brief Set MCU related errors, for example during initialization phase
  * @param None
  * @retval None
  */
void eh_SetMcuError(E_EH_MCU_ERROR_CODE errCode)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	71fb      	strb	r3, [r7, #7]
    /* Store error code */
    ehMcuErrorCode = errCode;
 8000262:	4a03      	ldr	r2, [pc, #12]	; (8000270 <eh_SetMcuError+0x18>)
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	7013      	strb	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000268:	b672      	cpsid	i
}
 800026a:	bf00      	nop

    /* Stop interrupts */
    __disable_irq();

    /* Stop code execution */
    while (1)
 800026c:	e7fe      	b.n	800026c <eh_SetMcuError+0x14>
 800026e:	bf00      	nop
 8000270:	200001a0 	.word	0x200001a0

08000274 <DO_Init>:
/**
  * @brief  FUNCTION: Initialization function for digital outputs module
  * @retval none.
  */
void DO_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b088      	sub	sp, #32
 8000278:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0u, 0u, 0u, 0u};
 800027a:	f107 0310 	add.w	r3, r7, #16
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000288:	4b1c      	ldr	r3, [pc, #112]	; (80002fc <DO_Init+0x88>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	4a1b      	ldr	r2, [pc, #108]	; (80002fc <DO_Init+0x88>)
 800028e:	f043 0310 	orr.w	r3, r3, #16
 8000292:	6193      	str	r3, [r2, #24]
 8000294:	4b19      	ldr	r3, [pc, #100]	; (80002fc <DO_Init+0x88>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	f003 0310 	and.w	r3, r3, #16
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80002a0:	4b16      	ldr	r3, [pc, #88]	; (80002fc <DO_Init+0x88>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	4a15      	ldr	r2, [pc, #84]	; (80002fc <DO_Init+0x88>)
 80002a6:	f043 0320 	orr.w	r3, r3, #32
 80002aa:	6193      	str	r3, [r2, #24]
 80002ac:	4b13      	ldr	r3, [pc, #76]	; (80002fc <DO_Init+0x88>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	f003 0320 	and.w	r3, r3, #32
 80002b4:	60bb      	str	r3, [r7, #8]
 80002b6:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b8:	4b10      	ldr	r3, [pc, #64]	; (80002fc <DO_Init+0x88>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4a0f      	ldr	r2, [pc, #60]	; (80002fc <DO_Init+0x88>)
 80002be:	f043 0304 	orr.w	r3, r3, #4
 80002c2:	6193      	str	r3, [r2, #24]
 80002c4:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <DO_Init+0x88>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	f003 0304 	and.w	r3, r3, #4
 80002cc:	607b      	str	r3, [r7, #4]
 80002ce:	687b      	ldr	r3, [r7, #4]


    /*Configure GPIO pin : PC13 */
    GPIO_InitStruct.Pin = LED_GREEN_PIN;
 80002d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d6:	2301      	movs	r3, #1
 80002d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002da:	2300      	movs	r3, #0
 80002dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002de:	2302      	movs	r3, #2
 80002e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_GREEN_PORT, &GPIO_InitStruct);
 80002e2:	f107 0310 	add.w	r3, r7, #16
 80002e6:	4619      	mov	r1, r3
 80002e8:	4805      	ldr	r0, [pc, #20]	; (8000300 <DO_Init+0x8c>)
 80002ea:	f000 fc4f 	bl	8000b8c <HAL_GPIO_Init>

    /* Set default state for digital outputs */
    do_DigitalOutputs_DefaultState();
 80002ee:	f000 f835 	bl	800035c <_ZL30do_DigitalOutputs_DefaultStatev>
}
 80002f2:	bf00      	nop
 80002f4:	3720      	adds	r7, #32
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40021000 	.word	0x40021000
 8000300:	40011000 	.word	0x40011000

08000304 <DO_Set>:
/**
  * @brief  FUNCTION: Set the MCU output pin
  * @retval none.
  */
void DO_Set(E_DO_PIN_LIST digitalOutput)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	71fb      	strb	r3, [r7, #7]
    /* Select digital output to be controlled */
    switch (digitalOutput)
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d106      	bne.n	8000322 <DO_Set+0x1e>
    {
        /* Green LED */
        case LED_GREEN:
            HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_SET);
 8000314:	2201      	movs	r2, #1
 8000316:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800031a:	4804      	ldr	r0, [pc, #16]	; (800032c <DO_Set+0x28>)
 800031c:	f000 fdba 	bl	8000e94 <HAL_GPIO_WritePin>
            break;
 8000320:	e000      	b.n	8000324 <DO_Set+0x20>

        default:
            /* TODO: Set an error */
            break;
 8000322:	bf00      	nop
    }
}
 8000324:	bf00      	nop
 8000326:	3708      	adds	r7, #8
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	40011000 	.word	0x40011000

08000330 <DO_Clear>:
/**
  * @brief  FUNCTION: Reset the MCU output pin
  * @retval none.
  */
void DO_Clear(E_DO_PIN_LIST digitalOutput)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
    /* Select digital output to be controlled */
    switch (digitalOutput)
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d106      	bne.n	800034e <DO_Clear+0x1e>
    {
        /* Green LED */
        case LED_GREEN:
            HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);
 8000340:	2200      	movs	r2, #0
 8000342:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000346:	4804      	ldr	r0, [pc, #16]	; (8000358 <DO_Clear+0x28>)
 8000348:	f000 fda4 	bl	8000e94 <HAL_GPIO_WritePin>
            break;
 800034c:	e000      	b.n	8000350 <DO_Clear+0x20>

        default:
            /* TODO: Set an error */
            break;
 800034e:	bf00      	nop
    }
}
 8000350:	bf00      	nop
 8000352:	3708      	adds	r7, #8
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	40011000 	.word	0x40011000

0800035c <_ZL30do_DigitalOutputs_DefaultStatev>:
/**
  * @brief PRIVATE FUNCTION: Set default state for digital outputs
  * @retval none.
  */
static void do_DigitalOutputs_DefaultState(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
    /* Green LED output */
    DO_Clear(LED_GREEN);
 8000360:	2000      	movs	r0, #0
 8000362:	f7ff ffe5 	bl	8000330 <DO_Clear>
}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}

0800036a <cfgUART_Init>:
  * @brief Initialize and configure the UART modules used by the application
  * @param None
  * @retval None
  */
void cfgUART_Init(void)
{
 800036a:	b580      	push	{r7, lr}
 800036c:	af00      	add	r7, sp, #0
    /* Call initialization functions for UARTs */
    cfgUART1_Init();
 800036e:	f000 f805 	bl	800037c <cfgUART1_Init>
    cfgUART2_Init();
 8000372:	f000 f82d 	bl	80003d0 <cfgUART2_Init>
}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
	...

0800037c <cfgUART1_Init>:
  * @brief UART1 Initialization Function
  * @param None
  * @retval None
  */
static void cfgUART1_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 8000380:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <cfgUART1_Init+0x4c>)
 8000382:	4a12      	ldr	r2, [pc, #72]	; (80003cc <cfgUART1_Init+0x50>)
 8000384:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8000386:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <cfgUART1_Init+0x4c>)
 8000388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800038c:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800038e:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <cfgUART1_Init+0x4c>)
 8000390:	2200      	movs	r2, #0
 8000392:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000394:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <cfgUART1_Init+0x4c>)
 8000396:	2200      	movs	r2, #0
 8000398:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 800039a:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <cfgUART1_Init+0x4c>)
 800039c:	2200      	movs	r2, #0
 800039e:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80003a0:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <cfgUART1_Init+0x4c>)
 80003a2:	220c      	movs	r2, #12
 80003a4:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003a6:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <cfgUART1_Init+0x4c>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003ac:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <cfgUART1_Init+0x4c>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(&huart1) != HAL_OK)
 80003b2:	4805      	ldr	r0, [pc, #20]	; (80003c8 <cfgUART1_Init+0x4c>)
 80003b4:	f001 f9de 	bl	8001774 <HAL_UART_Init>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d002      	beq.n	80003c4 <cfgUART1_Init+0x48>
    {
        eh_SetMcuError(MCU_ERR_CODE_100);
 80003be:	2064      	movs	r0, #100	; 0x64
 80003c0:	f7ff ff4a 	bl	8000258 <eh_SetMcuError>
    }
}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	200002f0 	.word	0x200002f0
 80003cc:	40013800 	.word	0x40013800

080003d0 <cfgUART2_Init>:
  * @brief UART2 Initialization Function
  * @param None
  * @retval None
  */
static void cfgUART2_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 80003d4:	4b11      	ldr	r3, [pc, #68]	; (800041c <cfgUART2_Init+0x4c>)
 80003d6:	4a12      	ldr	r2, [pc, #72]	; (8000420 <cfgUART2_Init+0x50>)
 80003d8:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 80003da:	4b10      	ldr	r3, [pc, #64]	; (800041c <cfgUART2_Init+0x4c>)
 80003dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003e0:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003e2:	4b0e      	ldr	r3, [pc, #56]	; (800041c <cfgUART2_Init+0x4c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80003e8:	4b0c      	ldr	r3, [pc, #48]	; (800041c <cfgUART2_Init+0x4c>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80003ee:	4b0b      	ldr	r3, [pc, #44]	; (800041c <cfgUART2_Init+0x4c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80003f4:	4b09      	ldr	r3, [pc, #36]	; (800041c <cfgUART2_Init+0x4c>)
 80003f6:	220c      	movs	r2, #12
 80003f8:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003fa:	4b08      	ldr	r3, [pc, #32]	; (800041c <cfgUART2_Init+0x4c>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <cfgUART2_Init+0x4c>)
 8000402:	2200      	movs	r2, #0
 8000404:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8000406:	4805      	ldr	r0, [pc, #20]	; (800041c <cfgUART2_Init+0x4c>)
 8000408:	f001 f9b4 	bl	8001774 <HAL_UART_Init>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d002      	beq.n	8000418 <cfgUART2_Init+0x48>
    {
        eh_SetMcuError(MCU_ERR_CODE_101);
 8000412:	2065      	movs	r0, #101	; 0x65
 8000414:	f7ff ff20 	bl	8000258 <eh_SetMcuError>
    }
}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20000334 	.word	0x20000334
 8000420:	40004400 	.word	0x40004400

08000424 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0

  /* ==========================================================================
   * MCU Configuration
   * ==========================================================================*/
  /* Configure the system clock */
  SystemClock_Config();
 8000428:	f000 f805 	bl	8000436 <_ZL18SystemClock_Configv>

  /* ==========================================================================
   *  Application initialization
   * ==========================================================================*/
  /* Call initialization function for application */
  mainAppl_Init();
 800042c:	f7ff fea4 	bl	8000178 <mainAppl_Init>
   * Infinite loop
   * ==========================================================================*/
  while (1)
  {
    /* Application main function */
    mainAppl_MainRunnable();
 8000430:	f7ff feb8 	bl	80001a4 <mainAppl_MainRunnable>
 8000434:	e7fc      	b.n	8000430 <main+0xc>

08000436 <_ZL18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void SystemClock_Config(void)
{
 8000436:	b580      	push	{r7, lr}
 8000438:	b090      	sub	sp, #64	; 0x40
 800043a:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043c:	f107 0318 	add.w	r3, r7, #24
 8000440:	2228      	movs	r2, #40	; 0x28
 8000442:	2100      	movs	r1, #0
 8000444:	4618      	mov	r0, r3
 8000446:	f003 fdd7 	bl	8003ff8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	605a      	str	r2, [r3, #4]
 8000452:	609a      	str	r2, [r3, #8]
 8000454:	60da      	str	r2, [r3, #12]
 8000456:	611a      	str	r2, [r3, #16]

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000458:	2301      	movs	r3, #1
 800045a:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800045c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000460:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000462:	2300      	movs	r3, #0
 8000464:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000466:	2301      	movs	r3, #1
 8000468:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800046a:	2302      	movs	r3, #2
 800046c:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800046e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000472:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000474:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000478:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047a:	f107 0318 	add.w	r3, r7, #24
 800047e:	4618      	mov	r0, r3
 8000480:	f000 fd38 	bl	8000ef4 <HAL_RCC_OscConfig>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	bf14      	ite	ne
 800048a:	2301      	movne	r3, #1
 800048c:	2300      	moveq	r3, #0
 800048e:	b2db      	uxtb	r3, r3
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <_ZL18SystemClock_Configv+0x62>
    {
      Error_Handler();
 8000494:	f000 f81f 	bl	80004d6 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000498:	230f      	movs	r3, #15
 800049a:	607b      	str	r3, [r7, #4]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800049c:	2302      	movs	r3, #2
 800049e:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a0:	2300      	movs	r3, #0
 80004a2:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004a4:	2300      	movs	r3, #0
 80004a6:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004a8:	2300      	movs	r3, #0
 80004aa:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2101      	movs	r1, #1
 80004b0:	4618      	mov	r0, r3
 80004b2:	f000 ff9f 	bl	80013f4 <HAL_RCC_ClockConfig>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	bf14      	ite	ne
 80004bc:	2301      	movne	r3, #1
 80004be:	2300      	moveq	r3, #0
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <_ZL18SystemClock_Configv+0x94>
    {
      Error_Handler();
 80004c6:	f000 f806 	bl	80004d6 <Error_Handler>
    }
    /** Enables the Clock Security System
    */
    HAL_RCC_EnableCSS();
 80004ca:	f001 f87d 	bl	80015c8 <HAL_RCC_EnableCSS>
}
 80004ce:	bf00      	nop
 80004d0:	3740      	adds	r7, #64	; 0x40
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}

080004d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80004da:	b672      	cpsid	i
}
 80004dc:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004de:	e7fe      	b.n	80004de <Error_Handler+0x8>

080004e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08a      	sub	sp, #40	; 0x28
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e8:	f107 0318 	add.w	r3, r7, #24
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a37      	ldr	r2, [pc, #220]	; (80005d8 <HAL_UART_MspInit+0xf8>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d132      	bne.n	8000566 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000500:	4b36      	ldr	r3, [pc, #216]	; (80005dc <HAL_UART_MspInit+0xfc>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	4a35      	ldr	r2, [pc, #212]	; (80005dc <HAL_UART_MspInit+0xfc>)
 8000506:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800050a:	6193      	str	r3, [r2, #24]
 800050c:	4b33      	ldr	r3, [pc, #204]	; (80005dc <HAL_UART_MspInit+0xfc>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000514:	617b      	str	r3, [r7, #20]
 8000516:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000518:	4b30      	ldr	r3, [pc, #192]	; (80005dc <HAL_UART_MspInit+0xfc>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a2f      	ldr	r2, [pc, #188]	; (80005dc <HAL_UART_MspInit+0xfc>)
 800051e:	f043 0304 	orr.w	r3, r3, #4
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b2d      	ldr	r3, [pc, #180]	; (80005dc <HAL_UART_MspInit+0xfc>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f003 0304 	and.w	r3, r3, #4
 800052c:	613b      	str	r3, [r7, #16]
 800052e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000530:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000536:	2302      	movs	r3, #2
 8000538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800053a:	2303      	movs	r3, #3
 800053c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053e:	f107 0318 	add.w	r3, r7, #24
 8000542:	4619      	mov	r1, r3
 8000544:	4826      	ldr	r0, [pc, #152]	; (80005e0 <HAL_UART_MspInit+0x100>)
 8000546:	f000 fb21 	bl	8000b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800054a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800054e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000550:	2300      	movs	r3, #0
 8000552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000554:	2300      	movs	r3, #0
 8000556:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000558:	f107 0318 	add.w	r3, r7, #24
 800055c:	4619      	mov	r1, r3
 800055e:	4820      	ldr	r0, [pc, #128]	; (80005e0 <HAL_UART_MspInit+0x100>)
 8000560:	f000 fb14 	bl	8000b8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000564:	e034      	b.n	80005d0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a1e      	ldr	r2, [pc, #120]	; (80005e4 <HAL_UART_MspInit+0x104>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d12f      	bne.n	80005d0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000570:	4b1a      	ldr	r3, [pc, #104]	; (80005dc <HAL_UART_MspInit+0xfc>)
 8000572:	69db      	ldr	r3, [r3, #28]
 8000574:	4a19      	ldr	r2, [pc, #100]	; (80005dc <HAL_UART_MspInit+0xfc>)
 8000576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800057a:	61d3      	str	r3, [r2, #28]
 800057c:	4b17      	ldr	r3, [pc, #92]	; (80005dc <HAL_UART_MspInit+0xfc>)
 800057e:	69db      	ldr	r3, [r3, #28]
 8000580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000588:	4b14      	ldr	r3, [pc, #80]	; (80005dc <HAL_UART_MspInit+0xfc>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a13      	ldr	r2, [pc, #76]	; (80005dc <HAL_UART_MspInit+0xfc>)
 800058e:	f043 0304 	orr.w	r3, r3, #4
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b11      	ldr	r3, [pc, #68]	; (80005dc <HAL_UART_MspInit+0xfc>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0304 	and.w	r3, r3, #4
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005a0:	2304      	movs	r3, #4
 80005a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a4:	2302      	movs	r3, #2
 80005a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a8:	2303      	movs	r3, #3
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ac:	f107 0318 	add.w	r3, r7, #24
 80005b0:	4619      	mov	r1, r3
 80005b2:	480b      	ldr	r0, [pc, #44]	; (80005e0 <HAL_UART_MspInit+0x100>)
 80005b4:	f000 faea 	bl	8000b8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005b8:	2308      	movs	r3, #8
 80005ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c4:	f107 0318 	add.w	r3, r7, #24
 80005c8:	4619      	mov	r1, r3
 80005ca:	4805      	ldr	r0, [pc, #20]	; (80005e0 <HAL_UART_MspInit+0x100>)
 80005cc:	f000 fade 	bl	8000b8c <HAL_GPIO_Init>
}
 80005d0:	bf00      	nop
 80005d2:	3728      	adds	r7, #40	; 0x28
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40013800 	.word	0x40013800
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40010800 	.word	0x40010800
 80005e4:	40004400 	.word	0x40004400

080005e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80005ec:	f001 f88a 	bl	8001704 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <NMI_Handler+0x8>

080005f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f2:	b480      	push	{r7}
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f6:	e7fe      	b.n	80005f6 <HardFault_Handler+0x4>

080005f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <MemManage_Handler+0x4>

080005fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000602:	e7fe      	b.n	8000602 <BusFault_Handler+0x4>

08000604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000608:	e7fe      	b.n	8000608 <UsageFault_Handler+0x4>

0800060a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800060e:	bf00      	nop
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr

08000616 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr

08000622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr

0800062e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000632:	f000 f87f 	bl	8000734 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}

0800063a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0
	return 1;
 800063e:	2301      	movs	r3, #1
}
 8000640:	4618      	mov	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr

08000648 <_kill>:

int _kill(int pid, int sig)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000652:	f003 fc99 	bl	8003f88 <__errno>
 8000656:	4603      	mov	r3, r0
 8000658:	2216      	movs	r2, #22
 800065a:	601a      	str	r2, [r3, #0]
	return -1;
 800065c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000660:	4618      	mov	r0, r3
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <_exit>:

void _exit (int status)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000670:	f04f 31ff 	mov.w	r1, #4294967295
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f7ff ffe7 	bl	8000648 <_kill>
	while (1) {}		/* Make sure we hang here */
 800067a:	e7fe      	b.n	800067a <_exit+0x12>

0800067c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr

08000688 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000688:	480c      	ldr	r0, [pc, #48]	; (80006bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800068a:	490d      	ldr	r1, [pc, #52]	; (80006c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800068c:	4a0d      	ldr	r2, [pc, #52]	; (80006c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800068e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000690:	e002      	b.n	8000698 <LoopCopyDataInit>

08000692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000696:	3304      	adds	r3, #4

08000698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800069a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800069c:	d3f9      	bcc.n	8000692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800069e:	4a0a      	ldr	r2, [pc, #40]	; (80006c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006a0:	4c0a      	ldr	r4, [pc, #40]	; (80006cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80006a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a4:	e001      	b.n	80006aa <LoopFillZerobss>

080006a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a8:	3204      	adds	r2, #4

080006aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006ac:	d3fb      	bcc.n	80006a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ae:	f7ff ffe5 	bl	800067c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006b2:	f003 fc6f 	bl	8003f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006b6:	f7ff feb5 	bl	8000424 <main>
  bx lr
 80006ba:	4770      	bx	lr
  ldr r0, =_sdata
 80006bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80006c4:	080043f4 	.word	0x080043f4
  ldr r2, =_sbss
 80006c8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80006cc:	20000380 	.word	0x20000380

080006d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d0:	e7fe      	b.n	80006d0 <ADC1_2_IRQHandler>
	...

080006d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <HAL_InitTick+0x54>)
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <HAL_InitTick+0x58>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	4619      	mov	r1, r3
 80006e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 f980 	bl	80009f8 <HAL_SYSTICK_Config>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006fe:	2301      	movs	r3, #1
 8000700:	e00e      	b.n	8000720 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2b0f      	cmp	r3, #15
 8000706:	d80a      	bhi.n	800071e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000708:	2200      	movs	r2, #0
 800070a:	6879      	ldr	r1, [r7, #4]
 800070c:	f04f 30ff 	mov.w	r0, #4294967295
 8000710:	f000 f93a 	bl	8000988 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000714:	4a06      	ldr	r2, [pc, #24]	; (8000730 <HAL_InitTick+0x5c>)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800071a:	2300      	movs	r3, #0
 800071c:	e000      	b.n	8000720 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800071e:	2301      	movs	r3, #1
}
 8000720:	4618      	mov	r0, r3
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000000 	.word	0x20000000
 800072c:	20000008 	.word	0x20000008
 8000730:	20000004 	.word	0x20000004

08000734 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <HAL_IncTick+0x1c>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	461a      	mov	r2, r3
 800073e:	4b05      	ldr	r3, [pc, #20]	; (8000754 <HAL_IncTick+0x20>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4413      	add	r3, r2
 8000744:	4a03      	ldr	r2, [pc, #12]	; (8000754 <HAL_IncTick+0x20>)
 8000746:	6013      	str	r3, [r2, #0]
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	20000008 	.word	0x20000008
 8000754:	20000378 	.word	0x20000378

08000758 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  return uwTick;
 800075c:	4b02      	ldr	r3, [pc, #8]	; (8000768 <HAL_GetTick+0x10>)
 800075e:	681b      	ldr	r3, [r3, #0]
}
 8000760:	4618      	mov	r0, r3
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr
 8000768:	20000378 	.word	0x20000378

0800076c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000774:	f7ff fff0 	bl	8000758 <HAL_GetTick>
 8000778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000784:	d005      	beq.n	8000792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <HAL_Delay+0x44>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	461a      	mov	r2, r3
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	4413      	add	r3, r2
 8000790:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000792:	bf00      	nop
 8000794:	f7ff ffe0 	bl	8000758 <HAL_GetTick>
 8000798:	4602      	mov	r2, r0
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	68fa      	ldr	r2, [r7, #12]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d8f7      	bhi.n	8000794 <HAL_Delay+0x28>
  {
  }
}
 80007a4:	bf00      	nop
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000008 	.word	0x20000008

080007b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b8:	4b04      	ldr	r3, [pc, #16]	; (80007cc <__NVIC_GetPriorityGrouping+0x18>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	0a1b      	lsrs	r3, r3, #8
 80007be:	f003 0307 	and.w	r3, r3, #7
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	db0b      	blt.n	80007fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	f003 021f 	and.w	r2, r3, #31
 80007e8:	4906      	ldr	r1, [pc, #24]	; (8000804 <__NVIC_EnableIRQ+0x34>)
 80007ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ee:	095b      	lsrs	r3, r3, #5
 80007f0:	2001      	movs	r0, #1
 80007f2:	fa00 f202 	lsl.w	r2, r0, r2
 80007f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	e000e100 	.word	0xe000e100

08000808 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000816:	2b00      	cmp	r3, #0
 8000818:	db12      	blt.n	8000840 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	f003 021f 	and.w	r2, r3, #31
 8000820:	490a      	ldr	r1, [pc, #40]	; (800084c <__NVIC_DisableIRQ+0x44>)
 8000822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000826:	095b      	lsrs	r3, r3, #5
 8000828:	2001      	movs	r0, #1
 800082a:	fa00 f202 	lsl.w	r2, r0, r2
 800082e:	3320      	adds	r3, #32
 8000830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000834:	f3bf 8f4f 	dsb	sy
}
 8000838:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800083a:	f3bf 8f6f 	isb	sy
}
 800083e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000e100 	.word	0xe000e100

08000850 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800085a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085e:	2b00      	cmp	r3, #0
 8000860:	db0c      	blt.n	800087c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	f003 021f 	and.w	r2, r3, #31
 8000868:	4907      	ldr	r1, [pc, #28]	; (8000888 <__NVIC_ClearPendingIRQ+0x38>)
 800086a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086e:	095b      	lsrs	r3, r3, #5
 8000870:	2001      	movs	r0, #1
 8000872:	fa00 f202 	lsl.w	r2, r0, r2
 8000876:	3360      	adds	r3, #96	; 0x60
 8000878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000e100 	.word	0xe000e100

0800088c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	6039      	str	r1, [r7, #0]
 8000896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089c:	2b00      	cmp	r3, #0
 800089e:	db0a      	blt.n	80008b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	490c      	ldr	r1, [pc, #48]	; (80008d8 <__NVIC_SetPriority+0x4c>)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	0112      	lsls	r2, r2, #4
 80008ac:	b2d2      	uxtb	r2, r2
 80008ae:	440b      	add	r3, r1
 80008b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008b4:	e00a      	b.n	80008cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4908      	ldr	r1, [pc, #32]	; (80008dc <__NVIC_SetPriority+0x50>)
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	f003 030f 	and.w	r3, r3, #15
 80008c2:	3b04      	subs	r3, #4
 80008c4:	0112      	lsls	r2, r2, #4
 80008c6:	b2d2      	uxtb	r2, r2
 80008c8:	440b      	add	r3, r1
 80008ca:	761a      	strb	r2, [r3, #24]
}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000e100 	.word	0xe000e100
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b089      	sub	sp, #36	; 0x24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	f1c3 0307 	rsb	r3, r3, #7
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	bf28      	it	cs
 80008fe:	2304      	movcs	r3, #4
 8000900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	3304      	adds	r3, #4
 8000906:	2b06      	cmp	r3, #6
 8000908:	d902      	bls.n	8000910 <NVIC_EncodePriority+0x30>
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	3b03      	subs	r3, #3
 800090e:	e000      	b.n	8000912 <NVIC_EncodePriority+0x32>
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000914:	f04f 32ff 	mov.w	r2, #4294967295
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	43da      	mvns	r2, r3
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	401a      	ands	r2, r3
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000928:	f04f 31ff 	mov.w	r1, #4294967295
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	fa01 f303 	lsl.w	r3, r1, r3
 8000932:	43d9      	mvns	r1, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000938:	4313      	orrs	r3, r2
         );
}
 800093a:	4618      	mov	r0, r3
 800093c:	3724      	adds	r7, #36	; 0x24
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3b01      	subs	r3, #1
 8000950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000954:	d301      	bcc.n	800095a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000956:	2301      	movs	r3, #1
 8000958:	e00f      	b.n	800097a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800095a:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <SysTick_Config+0x40>)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3b01      	subs	r3, #1
 8000960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000962:	210f      	movs	r1, #15
 8000964:	f04f 30ff 	mov.w	r0, #4294967295
 8000968:	f7ff ff90 	bl	800088c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <SysTick_Config+0x40>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000972:	4b04      	ldr	r3, [pc, #16]	; (8000984 <SysTick_Config+0x40>)
 8000974:	2207      	movs	r2, #7
 8000976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	e000e010 	.word	0xe000e010

08000988 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
 8000994:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800099a:	f7ff ff0b 	bl	80007b4 <__NVIC_GetPriorityGrouping>
 800099e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	68b9      	ldr	r1, [r7, #8]
 80009a4:	6978      	ldr	r0, [r7, #20]
 80009a6:	f7ff ff9b 	bl	80008e0 <NVIC_EncodePriority>
 80009aa:	4602      	mov	r2, r0
 80009ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009b0:	4611      	mov	r1, r2
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff ff6a 	bl	800088c <__NVIC_SetPriority>
}
 80009b8:	bf00      	nop
 80009ba:	3718      	adds	r7, #24
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fefe 	bl	80007d0 <__NVIC_EnableIRQ>
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff ff0c 	bl	8000808 <__NVIC_DisableIRQ>
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f7ff ff9f 	bl	8000944 <SysTick_Config>
 8000a06:	4603      	mov	r3, r0
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff ff16 	bl	8000850 <__NVIC_ClearPendingIRQ>
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a34:	2300      	movs	r3, #0
 8000a36:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a3e:	2b02      	cmp	r3, #2
 8000a40:	d008      	beq.n	8000a54 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2204      	movs	r2, #4
 8000a46:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a50:	2301      	movs	r3, #1
 8000a52:	e020      	b.n	8000a96 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f022 020e 	bic.w	r2, r2, #14
 8000a62:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f022 0201 	bic.w	r2, r2, #1
 8000a72:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a82:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2201      	movs	r2, #1
 8000a88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d005      	beq.n	8000ac2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2204      	movs	r2, #4
 8000aba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000abc:	2301      	movs	r3, #1
 8000abe:	73fb      	strb	r3, [r7, #15]
 8000ac0:	e051      	b.n	8000b66 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f022 020e 	bic.w	r2, r2, #14
 8000ad0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f022 0201 	bic.w	r2, r2, #1
 8000ae0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a22      	ldr	r2, [pc, #136]	; (8000b70 <HAL_DMA_Abort_IT+0xd0>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d029      	beq.n	8000b40 <HAL_DMA_Abort_IT+0xa0>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a20      	ldr	r2, [pc, #128]	; (8000b74 <HAL_DMA_Abort_IT+0xd4>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d022      	beq.n	8000b3c <HAL_DMA_Abort_IT+0x9c>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a1f      	ldr	r2, [pc, #124]	; (8000b78 <HAL_DMA_Abort_IT+0xd8>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d01a      	beq.n	8000b36 <HAL_DMA_Abort_IT+0x96>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a1d      	ldr	r2, [pc, #116]	; (8000b7c <HAL_DMA_Abort_IT+0xdc>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d012      	beq.n	8000b30 <HAL_DMA_Abort_IT+0x90>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a1c      	ldr	r2, [pc, #112]	; (8000b80 <HAL_DMA_Abort_IT+0xe0>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d00a      	beq.n	8000b2a <HAL_DMA_Abort_IT+0x8a>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a1a      	ldr	r2, [pc, #104]	; (8000b84 <HAL_DMA_Abort_IT+0xe4>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d102      	bne.n	8000b24 <HAL_DMA_Abort_IT+0x84>
 8000b1e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b22:	e00e      	b.n	8000b42 <HAL_DMA_Abort_IT+0xa2>
 8000b24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b28:	e00b      	b.n	8000b42 <HAL_DMA_Abort_IT+0xa2>
 8000b2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b2e:	e008      	b.n	8000b42 <HAL_DMA_Abort_IT+0xa2>
 8000b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b34:	e005      	b.n	8000b42 <HAL_DMA_Abort_IT+0xa2>
 8000b36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b3a:	e002      	b.n	8000b42 <HAL_DMA_Abort_IT+0xa2>
 8000b3c:	2310      	movs	r3, #16
 8000b3e:	e000      	b.n	8000b42 <HAL_DMA_Abort_IT+0xa2>
 8000b40:	2301      	movs	r3, #1
 8000b42:	4a11      	ldr	r2, [pc, #68]	; (8000b88 <HAL_DMA_Abort_IT+0xe8>)
 8000b44:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2200      	movs	r2, #0
 8000b52:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d003      	beq.n	8000b66 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	4798      	blx	r3
    } 
  }
  return status;
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40020008 	.word	0x40020008
 8000b74:	4002001c 	.word	0x4002001c
 8000b78:	40020030 	.word	0x40020030
 8000b7c:	40020044 	.word	0x40020044
 8000b80:	40020058 	.word	0x40020058
 8000b84:	4002006c 	.word	0x4002006c
 8000b88:	40020000 	.word	0x40020000

08000b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b08b      	sub	sp, #44	; 0x2c
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b96:	2300      	movs	r3, #0
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b9e:	e169      	b.n	8000e74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	69fa      	ldr	r2, [r7, #28]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bb4:	69ba      	ldr	r2, [r7, #24]
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	f040 8158 	bne.w	8000e6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	4a9a      	ldr	r2, [pc, #616]	; (8000e2c <HAL_GPIO_Init+0x2a0>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d05e      	beq.n	8000c86 <HAL_GPIO_Init+0xfa>
 8000bc8:	4a98      	ldr	r2, [pc, #608]	; (8000e2c <HAL_GPIO_Init+0x2a0>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d875      	bhi.n	8000cba <HAL_GPIO_Init+0x12e>
 8000bce:	4a98      	ldr	r2, [pc, #608]	; (8000e30 <HAL_GPIO_Init+0x2a4>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d058      	beq.n	8000c86 <HAL_GPIO_Init+0xfa>
 8000bd4:	4a96      	ldr	r2, [pc, #600]	; (8000e30 <HAL_GPIO_Init+0x2a4>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d86f      	bhi.n	8000cba <HAL_GPIO_Init+0x12e>
 8000bda:	4a96      	ldr	r2, [pc, #600]	; (8000e34 <HAL_GPIO_Init+0x2a8>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d052      	beq.n	8000c86 <HAL_GPIO_Init+0xfa>
 8000be0:	4a94      	ldr	r2, [pc, #592]	; (8000e34 <HAL_GPIO_Init+0x2a8>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d869      	bhi.n	8000cba <HAL_GPIO_Init+0x12e>
 8000be6:	4a94      	ldr	r2, [pc, #592]	; (8000e38 <HAL_GPIO_Init+0x2ac>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d04c      	beq.n	8000c86 <HAL_GPIO_Init+0xfa>
 8000bec:	4a92      	ldr	r2, [pc, #584]	; (8000e38 <HAL_GPIO_Init+0x2ac>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d863      	bhi.n	8000cba <HAL_GPIO_Init+0x12e>
 8000bf2:	4a92      	ldr	r2, [pc, #584]	; (8000e3c <HAL_GPIO_Init+0x2b0>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d046      	beq.n	8000c86 <HAL_GPIO_Init+0xfa>
 8000bf8:	4a90      	ldr	r2, [pc, #576]	; (8000e3c <HAL_GPIO_Init+0x2b0>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d85d      	bhi.n	8000cba <HAL_GPIO_Init+0x12e>
 8000bfe:	2b12      	cmp	r3, #18
 8000c00:	d82a      	bhi.n	8000c58 <HAL_GPIO_Init+0xcc>
 8000c02:	2b12      	cmp	r3, #18
 8000c04:	d859      	bhi.n	8000cba <HAL_GPIO_Init+0x12e>
 8000c06:	a201      	add	r2, pc, #4	; (adr r2, 8000c0c <HAL_GPIO_Init+0x80>)
 8000c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c0c:	08000c87 	.word	0x08000c87
 8000c10:	08000c61 	.word	0x08000c61
 8000c14:	08000c73 	.word	0x08000c73
 8000c18:	08000cb5 	.word	0x08000cb5
 8000c1c:	08000cbb 	.word	0x08000cbb
 8000c20:	08000cbb 	.word	0x08000cbb
 8000c24:	08000cbb 	.word	0x08000cbb
 8000c28:	08000cbb 	.word	0x08000cbb
 8000c2c:	08000cbb 	.word	0x08000cbb
 8000c30:	08000cbb 	.word	0x08000cbb
 8000c34:	08000cbb 	.word	0x08000cbb
 8000c38:	08000cbb 	.word	0x08000cbb
 8000c3c:	08000cbb 	.word	0x08000cbb
 8000c40:	08000cbb 	.word	0x08000cbb
 8000c44:	08000cbb 	.word	0x08000cbb
 8000c48:	08000cbb 	.word	0x08000cbb
 8000c4c:	08000cbb 	.word	0x08000cbb
 8000c50:	08000c69 	.word	0x08000c69
 8000c54:	08000c7d 	.word	0x08000c7d
 8000c58:	4a79      	ldr	r2, [pc, #484]	; (8000e40 <HAL_GPIO_Init+0x2b4>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d013      	beq.n	8000c86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c5e:	e02c      	b.n	8000cba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	623b      	str	r3, [r7, #32]
          break;
 8000c66:	e029      	b.n	8000cbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	623b      	str	r3, [r7, #32]
          break;
 8000c70:	e024      	b.n	8000cbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	3308      	adds	r3, #8
 8000c78:	623b      	str	r3, [r7, #32]
          break;
 8000c7a:	e01f      	b.n	8000cbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	330c      	adds	r3, #12
 8000c82:	623b      	str	r3, [r7, #32]
          break;
 8000c84:	e01a      	b.n	8000cbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d102      	bne.n	8000c94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c8e:	2304      	movs	r3, #4
 8000c90:	623b      	str	r3, [r7, #32]
          break;
 8000c92:	e013      	b.n	8000cbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d105      	bne.n	8000ca8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c9c:	2308      	movs	r3, #8
 8000c9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	69fa      	ldr	r2, [r7, #28]
 8000ca4:	611a      	str	r2, [r3, #16]
          break;
 8000ca6:	e009      	b.n	8000cbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ca8:	2308      	movs	r3, #8
 8000caa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	69fa      	ldr	r2, [r7, #28]
 8000cb0:	615a      	str	r2, [r3, #20]
          break;
 8000cb2:	e003      	b.n	8000cbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	623b      	str	r3, [r7, #32]
          break;
 8000cb8:	e000      	b.n	8000cbc <HAL_GPIO_Init+0x130>
          break;
 8000cba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	2bff      	cmp	r3, #255	; 0xff
 8000cc0:	d801      	bhi.n	8000cc6 <HAL_GPIO_Init+0x13a>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	e001      	b.n	8000cca <HAL_GPIO_Init+0x13e>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	2bff      	cmp	r3, #255	; 0xff
 8000cd0:	d802      	bhi.n	8000cd8 <HAL_GPIO_Init+0x14c>
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	e002      	b.n	8000cde <HAL_GPIO_Init+0x152>
 8000cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cda:	3b08      	subs	r3, #8
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	210f      	movs	r1, #15
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	401a      	ands	r2, r3
 8000cf0:	6a39      	ldr	r1, [r7, #32]
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f000 80b1 	beq.w	8000e6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d0c:	4b4d      	ldr	r3, [pc, #308]	; (8000e44 <HAL_GPIO_Init+0x2b8>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a4c      	ldr	r2, [pc, #304]	; (8000e44 <HAL_GPIO_Init+0x2b8>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	6193      	str	r3, [r2, #24]
 8000d18:	4b4a      	ldr	r3, [pc, #296]	; (8000e44 <HAL_GPIO_Init+0x2b8>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d24:	4a48      	ldr	r2, [pc, #288]	; (8000e48 <HAL_GPIO_Init+0x2bc>)
 8000d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d28:	089b      	lsrs	r3, r3, #2
 8000d2a:	3302      	adds	r3, #2
 8000d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d34:	f003 0303 	and.w	r3, r3, #3
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	220f      	movs	r2, #15
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	4013      	ands	r3, r2
 8000d46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a40      	ldr	r2, [pc, #256]	; (8000e4c <HAL_GPIO_Init+0x2c0>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d013      	beq.n	8000d78 <HAL_GPIO_Init+0x1ec>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a3f      	ldr	r2, [pc, #252]	; (8000e50 <HAL_GPIO_Init+0x2c4>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d00d      	beq.n	8000d74 <HAL_GPIO_Init+0x1e8>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a3e      	ldr	r2, [pc, #248]	; (8000e54 <HAL_GPIO_Init+0x2c8>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d007      	beq.n	8000d70 <HAL_GPIO_Init+0x1e4>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a3d      	ldr	r2, [pc, #244]	; (8000e58 <HAL_GPIO_Init+0x2cc>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d101      	bne.n	8000d6c <HAL_GPIO_Init+0x1e0>
 8000d68:	2303      	movs	r3, #3
 8000d6a:	e006      	b.n	8000d7a <HAL_GPIO_Init+0x1ee>
 8000d6c:	2304      	movs	r3, #4
 8000d6e:	e004      	b.n	8000d7a <HAL_GPIO_Init+0x1ee>
 8000d70:	2302      	movs	r3, #2
 8000d72:	e002      	b.n	8000d7a <HAL_GPIO_Init+0x1ee>
 8000d74:	2301      	movs	r3, #1
 8000d76:	e000      	b.n	8000d7a <HAL_GPIO_Init+0x1ee>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d7c:	f002 0203 	and.w	r2, r2, #3
 8000d80:	0092      	lsls	r2, r2, #2
 8000d82:	4093      	lsls	r3, r2
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d8a:	492f      	ldr	r1, [pc, #188]	; (8000e48 <HAL_GPIO_Init+0x2bc>)
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8e:	089b      	lsrs	r3, r3, #2
 8000d90:	3302      	adds	r3, #2
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d006      	beq.n	8000db2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000da4:	4b2d      	ldr	r3, [pc, #180]	; (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	492c      	ldr	r1, [pc, #176]	; (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	600b      	str	r3, [r1, #0]
 8000db0:	e006      	b.n	8000dc0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000db2:	4b2a      	ldr	r3, [pc, #168]	; (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	43db      	mvns	r3, r3
 8000dba:	4928      	ldr	r1, [pc, #160]	; (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d006      	beq.n	8000dda <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dcc:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000dce:	685a      	ldr	r2, [r3, #4]
 8000dd0:	4922      	ldr	r1, [pc, #136]	; (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	604b      	str	r3, [r1, #4]
 8000dd8:	e006      	b.n	8000de8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dda:	4b20      	ldr	r3, [pc, #128]	; (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000ddc:	685a      	ldr	r2, [r3, #4]
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	43db      	mvns	r3, r3
 8000de2:	491e      	ldr	r1, [pc, #120]	; (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000de4:	4013      	ands	r3, r2
 8000de6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d006      	beq.n	8000e02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000df4:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	4918      	ldr	r1, [pc, #96]	; (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	608b      	str	r3, [r1, #8]
 8000e00:	e006      	b.n	8000e10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e02:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000e04:	689a      	ldr	r2, [r3, #8]
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	4914      	ldr	r1, [pc, #80]	; (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d021      	beq.n	8000e60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000e1e:	68da      	ldr	r2, [r3, #12]
 8000e20:	490e      	ldr	r1, [pc, #56]	; (8000e5c <HAL_GPIO_Init+0x2d0>)
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	60cb      	str	r3, [r1, #12]
 8000e28:	e021      	b.n	8000e6e <HAL_GPIO_Init+0x2e2>
 8000e2a:	bf00      	nop
 8000e2c:	10320000 	.word	0x10320000
 8000e30:	10310000 	.word	0x10310000
 8000e34:	10220000 	.word	0x10220000
 8000e38:	10210000 	.word	0x10210000
 8000e3c:	10120000 	.word	0x10120000
 8000e40:	10110000 	.word	0x10110000
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40010000 	.word	0x40010000
 8000e4c:	40010800 	.word	0x40010800
 8000e50:	40010c00 	.word	0x40010c00
 8000e54:	40011000 	.word	0x40011000
 8000e58:	40011400 	.word	0x40011400
 8000e5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <HAL_GPIO_Init+0x304>)
 8000e62:	68da      	ldr	r2, [r3, #12]
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	43db      	mvns	r3, r3
 8000e68:	4909      	ldr	r1, [pc, #36]	; (8000e90 <HAL_GPIO_Init+0x304>)
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e70:	3301      	adds	r3, #1
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f47f ae8e 	bne.w	8000ba0 <HAL_GPIO_Init+0x14>
  }
}
 8000e84:	bf00      	nop
 8000e86:	bf00      	nop
 8000e88:	372c      	adds	r7, #44	; 0x2c
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	40010400 	.word	0x40010400

08000e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	807b      	strh	r3, [r7, #2]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ea4:	787b      	ldrb	r3, [r7, #1]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eaa:	887a      	ldrh	r2, [r7, #2]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000eb0:	e003      	b.n	8000eba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eb2:	887b      	ldrh	r3, [r7, #2]
 8000eb4:	041a      	lsls	r2, r3, #16
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	611a      	str	r2, [r3, #16]
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000ece:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ed0:	695a      	ldr	r2, [r3, #20]
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d006      	beq.n	8000ee8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000edc:	88fb      	ldrh	r3, [r7, #6]
 8000ede:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ee0:	88fb      	ldrh	r3, [r7, #6]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f001 fe5e 	bl	8002ba4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40010400 	.word	0x40010400

08000ef4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e26c      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f000 8087 	beq.w	8001022 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f14:	4b92      	ldr	r3, [pc, #584]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 030c 	and.w	r3, r3, #12
 8000f1c:	2b04      	cmp	r3, #4
 8000f1e:	d00c      	beq.n	8000f3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f20:	4b8f      	ldr	r3, [pc, #572]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 030c 	and.w	r3, r3, #12
 8000f28:	2b08      	cmp	r3, #8
 8000f2a:	d112      	bne.n	8000f52 <HAL_RCC_OscConfig+0x5e>
 8000f2c:	4b8c      	ldr	r3, [pc, #560]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f38:	d10b      	bne.n	8000f52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3a:	4b89      	ldr	r3, [pc, #548]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d06c      	beq.n	8001020 <HAL_RCC_OscConfig+0x12c>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d168      	bne.n	8001020 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e246      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f5a:	d106      	bne.n	8000f6a <HAL_RCC_OscConfig+0x76>
 8000f5c:	4b80      	ldr	r3, [pc, #512]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a7f      	ldr	r2, [pc, #508]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	e02e      	b.n	8000fc8 <HAL_RCC_OscConfig+0xd4>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d10c      	bne.n	8000f8c <HAL_RCC_OscConfig+0x98>
 8000f72:	4b7b      	ldr	r3, [pc, #492]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a7a      	ldr	r2, [pc, #488]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	4b78      	ldr	r3, [pc, #480]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a77      	ldr	r2, [pc, #476]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	e01d      	b.n	8000fc8 <HAL_RCC_OscConfig+0xd4>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f94:	d10c      	bne.n	8000fb0 <HAL_RCC_OscConfig+0xbc>
 8000f96:	4b72      	ldr	r3, [pc, #456]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a71      	ldr	r2, [pc, #452]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	4b6f      	ldr	r3, [pc, #444]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a6e      	ldr	r2, [pc, #440]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	e00b      	b.n	8000fc8 <HAL_RCC_OscConfig+0xd4>
 8000fb0:	4b6b      	ldr	r3, [pc, #428]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a6a      	ldr	r2, [pc, #424]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	4b68      	ldr	r3, [pc, #416]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a67      	ldr	r2, [pc, #412]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d013      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd0:	f7ff fbc2 	bl	8000758 <HAL_GetTick>
 8000fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd6:	e008      	b.n	8000fea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fd8:	f7ff fbbe 	bl	8000758 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b64      	cmp	r3, #100	; 0x64
 8000fe4:	d901      	bls.n	8000fea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e1fa      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fea:	4b5d      	ldr	r3, [pc, #372]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d0f0      	beq.n	8000fd8 <HAL_RCC_OscConfig+0xe4>
 8000ff6:	e014      	b.n	8001022 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff8:	f7ff fbae 	bl	8000758 <HAL_GetTick>
 8000ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001000:	f7ff fbaa 	bl	8000758 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b64      	cmp	r3, #100	; 0x64
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e1e6      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001012:	4b53      	ldr	r3, [pc, #332]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1f0      	bne.n	8001000 <HAL_RCC_OscConfig+0x10c>
 800101e:	e000      	b.n	8001022 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d063      	beq.n	80010f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800102e:	4b4c      	ldr	r3, [pc, #304]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 030c 	and.w	r3, r3, #12
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00b      	beq.n	8001052 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800103a:	4b49      	ldr	r3, [pc, #292]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f003 030c 	and.w	r3, r3, #12
 8001042:	2b08      	cmp	r3, #8
 8001044:	d11c      	bne.n	8001080 <HAL_RCC_OscConfig+0x18c>
 8001046:	4b46      	ldr	r3, [pc, #280]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d116      	bne.n	8001080 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001052:	4b43      	ldr	r3, [pc, #268]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d005      	beq.n	800106a <HAL_RCC_OscConfig+0x176>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	691b      	ldr	r3, [r3, #16]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d001      	beq.n	800106a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e1ba      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106a:	4b3d      	ldr	r3, [pc, #244]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	4939      	ldr	r1, [pc, #228]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 800107a:	4313      	orrs	r3, r2
 800107c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800107e:	e03a      	b.n	80010f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	691b      	ldr	r3, [r3, #16]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d020      	beq.n	80010ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001088:	4b36      	ldr	r3, [pc, #216]	; (8001164 <HAL_RCC_OscConfig+0x270>)
 800108a:	2201      	movs	r2, #1
 800108c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108e:	f7ff fb63 	bl	8000758 <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001094:	e008      	b.n	80010a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001096:	f7ff fb5f 	bl	8000758 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e19b      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a8:	4b2d      	ldr	r3, [pc, #180]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0f0      	beq.n	8001096 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b4:	4b2a      	ldr	r3, [pc, #168]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	4927      	ldr	r1, [pc, #156]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	4313      	orrs	r3, r2
 80010c6:	600b      	str	r3, [r1, #0]
 80010c8:	e015      	b.n	80010f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ca:	4b26      	ldr	r3, [pc, #152]	; (8001164 <HAL_RCC_OscConfig+0x270>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fb42 	bl	8000758 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010d8:	f7ff fb3e 	bl	8000758 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e17a      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ea:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f0      	bne.n	80010d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0308 	and.w	r3, r3, #8
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d03a      	beq.n	8001178 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d019      	beq.n	800113e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <HAL_RCC_OscConfig+0x274>)
 800110c:	2201      	movs	r2, #1
 800110e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001110:	f7ff fb22 	bl	8000758 <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001118:	f7ff fb1e 	bl	8000758 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e15a      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800112a:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <HAL_RCC_OscConfig+0x26c>)
 800112c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d0f0      	beq.n	8001118 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001136:	2001      	movs	r0, #1
 8001138:	f000 faf8 	bl	800172c <RCC_Delay>
 800113c:	e01c      	b.n	8001178 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_RCC_OscConfig+0x274>)
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001144:	f7ff fb08 	bl	8000758 <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800114a:	e00f      	b.n	800116c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800114c:	f7ff fb04 	bl	8000758 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d908      	bls.n	800116c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e140      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
 800115e:	bf00      	nop
 8001160:	40021000 	.word	0x40021000
 8001164:	42420000 	.word	0x42420000
 8001168:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800116c:	4b9e      	ldr	r3, [pc, #632]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 800116e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1e9      	bne.n	800114c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	2b00      	cmp	r3, #0
 8001182:	f000 80a6 	beq.w	80012d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800118a:	4b97      	ldr	r3, [pc, #604]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d10d      	bne.n	80011b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001196:	4b94      	ldr	r3, [pc, #592]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	4a93      	ldr	r2, [pc, #588]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 800119c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a0:	61d3      	str	r3, [r2, #28]
 80011a2:	4b91      	ldr	r3, [pc, #580]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011ae:	2301      	movs	r3, #1
 80011b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b2:	4b8e      	ldr	r3, [pc, #568]	; (80013ec <HAL_RCC_OscConfig+0x4f8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d118      	bne.n	80011f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011be:	4b8b      	ldr	r3, [pc, #556]	; (80013ec <HAL_RCC_OscConfig+0x4f8>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a8a      	ldr	r2, [pc, #552]	; (80013ec <HAL_RCC_OscConfig+0x4f8>)
 80011c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ca:	f7ff fac5 	bl	8000758 <HAL_GetTick>
 80011ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011d2:	f7ff fac1 	bl	8000758 <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b64      	cmp	r3, #100	; 0x64
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e0fd      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e4:	4b81      	ldr	r3, [pc, #516]	; (80013ec <HAL_RCC_OscConfig+0x4f8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f0      	beq.n	80011d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d106      	bne.n	8001206 <HAL_RCC_OscConfig+0x312>
 80011f8:	4b7b      	ldr	r3, [pc, #492]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	4a7a      	ldr	r2, [pc, #488]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6213      	str	r3, [r2, #32]
 8001204:	e02d      	b.n	8001262 <HAL_RCC_OscConfig+0x36e>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10c      	bne.n	8001228 <HAL_RCC_OscConfig+0x334>
 800120e:	4b76      	ldr	r3, [pc, #472]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 8001210:	6a1b      	ldr	r3, [r3, #32]
 8001212:	4a75      	ldr	r2, [pc, #468]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 8001214:	f023 0301 	bic.w	r3, r3, #1
 8001218:	6213      	str	r3, [r2, #32]
 800121a:	4b73      	ldr	r3, [pc, #460]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 800121c:	6a1b      	ldr	r3, [r3, #32]
 800121e:	4a72      	ldr	r2, [pc, #456]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 8001220:	f023 0304 	bic.w	r3, r3, #4
 8001224:	6213      	str	r3, [r2, #32]
 8001226:	e01c      	b.n	8001262 <HAL_RCC_OscConfig+0x36e>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	2b05      	cmp	r3, #5
 800122e:	d10c      	bne.n	800124a <HAL_RCC_OscConfig+0x356>
 8001230:	4b6d      	ldr	r3, [pc, #436]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	4a6c      	ldr	r2, [pc, #432]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 8001236:	f043 0304 	orr.w	r3, r3, #4
 800123a:	6213      	str	r3, [r2, #32]
 800123c:	4b6a      	ldr	r3, [pc, #424]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	4a69      	ldr	r2, [pc, #420]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	6213      	str	r3, [r2, #32]
 8001248:	e00b      	b.n	8001262 <HAL_RCC_OscConfig+0x36e>
 800124a:	4b67      	ldr	r3, [pc, #412]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 800124c:	6a1b      	ldr	r3, [r3, #32]
 800124e:	4a66      	ldr	r2, [pc, #408]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 8001250:	f023 0301 	bic.w	r3, r3, #1
 8001254:	6213      	str	r3, [r2, #32]
 8001256:	4b64      	ldr	r3, [pc, #400]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 8001258:	6a1b      	ldr	r3, [r3, #32]
 800125a:	4a63      	ldr	r2, [pc, #396]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 800125c:	f023 0304 	bic.w	r3, r3, #4
 8001260:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d015      	beq.n	8001296 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126a:	f7ff fa75 	bl	8000758 <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001270:	e00a      	b.n	8001288 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001272:	f7ff fa71 	bl	8000758 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001280:	4293      	cmp	r3, r2
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e0ab      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001288:	4b57      	ldr	r3, [pc, #348]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0ee      	beq.n	8001272 <HAL_RCC_OscConfig+0x37e>
 8001294:	e014      	b.n	80012c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001296:	f7ff fa5f 	bl	8000758 <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800129c:	e00a      	b.n	80012b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800129e:	f7ff fa5b 	bl	8000758 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e095      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b4:	4b4c      	ldr	r3, [pc, #304]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1ee      	bne.n	800129e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012c0:	7dfb      	ldrb	r3, [r7, #23]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d105      	bne.n	80012d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012c6:	4b48      	ldr	r3, [pc, #288]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	4a47      	ldr	r2, [pc, #284]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 80012cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 8081 	beq.w	80013de <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012dc:	4b42      	ldr	r3, [pc, #264]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 030c 	and.w	r3, r3, #12
 80012e4:	2b08      	cmp	r3, #8
 80012e6:	d061      	beq.n	80013ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69db      	ldr	r3, [r3, #28]
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d146      	bne.n	800137e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f0:	4b3f      	ldr	r3, [pc, #252]	; (80013f0 <HAL_RCC_OscConfig+0x4fc>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f6:	f7ff fa2f 	bl	8000758 <HAL_GetTick>
 80012fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012fe:	f7ff fa2b 	bl	8000758 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e067      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001310:	4b35      	ldr	r3, [pc, #212]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1f0      	bne.n	80012fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001324:	d108      	bne.n	8001338 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001326:	4b30      	ldr	r3, [pc, #192]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	492d      	ldr	r1, [pc, #180]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001338:	4b2b      	ldr	r3, [pc, #172]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a19      	ldr	r1, [r3, #32]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001348:	430b      	orrs	r3, r1
 800134a:	4927      	ldr	r1, [pc, #156]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 800134c:	4313      	orrs	r3, r2
 800134e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001350:	4b27      	ldr	r3, [pc, #156]	; (80013f0 <HAL_RCC_OscConfig+0x4fc>)
 8001352:	2201      	movs	r2, #1
 8001354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001356:	f7ff f9ff 	bl	8000758 <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800135e:	f7ff f9fb 	bl	8000758 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e037      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001370:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0f0      	beq.n	800135e <HAL_RCC_OscConfig+0x46a>
 800137c:	e02f      	b.n	80013de <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <HAL_RCC_OscConfig+0x4fc>)
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff f9e8 	bl	8000758 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800138c:	f7ff f9e4 	bl	8000758 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e020      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800139e:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0x498>
 80013aa:	e018      	b.n	80013de <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69db      	ldr	r3, [r3, #28]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d101      	bne.n	80013b8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e013      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <HAL_RCC_OscConfig+0x4f4>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d106      	bne.n	80013da <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d001      	beq.n	80013de <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e000      	b.n	80013e0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40007000 	.word	0x40007000
 80013f0:	42420060 	.word	0x42420060

080013f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e0d0      	b.n	80015aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001408:	4b6a      	ldr	r3, [pc, #424]	; (80015b4 <HAL_RCC_ClockConfig+0x1c0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0307 	and.w	r3, r3, #7
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	429a      	cmp	r2, r3
 8001414:	d910      	bls.n	8001438 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001416:	4b67      	ldr	r3, [pc, #412]	; (80015b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f023 0207 	bic.w	r2, r3, #7
 800141e:	4965      	ldr	r1, [pc, #404]	; (80015b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	4313      	orrs	r3, r2
 8001424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001426:	4b63      	ldr	r3, [pc, #396]	; (80015b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	429a      	cmp	r2, r3
 8001432:	d001      	beq.n	8001438 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e0b8      	b.n	80015aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d020      	beq.n	8001486 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001450:	4b59      	ldr	r3, [pc, #356]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	4a58      	ldr	r2, [pc, #352]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001456:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800145a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001468:	4b53      	ldr	r3, [pc, #332]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	4a52      	ldr	r2, [pc, #328]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 800146e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001472:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001474:	4b50      	ldr	r3, [pc, #320]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	494d      	ldr	r1, [pc, #308]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001482:	4313      	orrs	r3, r2
 8001484:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b00      	cmp	r3, #0
 8001490:	d040      	beq.n	8001514 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d107      	bne.n	80014aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149a:	4b47      	ldr	r3, [pc, #284]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d115      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e07f      	b.n	80015aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d107      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b2:	4b41      	ldr	r3, [pc, #260]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d109      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e073      	b.n	80015aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c2:	4b3d      	ldr	r3, [pc, #244]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e06b      	b.n	80015aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014d2:	4b39      	ldr	r3, [pc, #228]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f023 0203 	bic.w	r2, r3, #3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	4936      	ldr	r1, [pc, #216]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014e4:	f7ff f938 	bl	8000758 <HAL_GetTick>
 80014e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ea:	e00a      	b.n	8001502 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ec:	f7ff f934 	bl	8000758 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e053      	b.n	80015aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001502:	4b2d      	ldr	r3, [pc, #180]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 020c 	and.w	r2, r3, #12
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	429a      	cmp	r2, r3
 8001512:	d1eb      	bne.n	80014ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001514:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0307 	and.w	r3, r3, #7
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	429a      	cmp	r2, r3
 8001520:	d210      	bcs.n	8001544 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001522:	4b24      	ldr	r3, [pc, #144]	; (80015b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f023 0207 	bic.w	r2, r3, #7
 800152a:	4922      	ldr	r1, [pc, #136]	; (80015b4 <HAL_RCC_ClockConfig+0x1c0>)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	4313      	orrs	r3, r2
 8001530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001532:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	429a      	cmp	r2, r3
 800153e:	d001      	beq.n	8001544 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e032      	b.n	80015aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b00      	cmp	r3, #0
 800154e:	d008      	beq.n	8001562 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	4916      	ldr	r1, [pc, #88]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 800155e:	4313      	orrs	r3, r2
 8001560:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	2b00      	cmp	r3, #0
 800156c:	d009      	beq.n	8001582 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	490e      	ldr	r1, [pc, #56]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 800157e:	4313      	orrs	r3, r2
 8001580:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001582:	f000 f82d 	bl	80015e0 <HAL_RCC_GetSysClockFreq>
 8001586:	4602      	mov	r2, r0
 8001588:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <HAL_RCC_ClockConfig+0x1c4>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	091b      	lsrs	r3, r3, #4
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	490a      	ldr	r1, [pc, #40]	; (80015bc <HAL_RCC_ClockConfig+0x1c8>)
 8001594:	5ccb      	ldrb	r3, [r1, r3]
 8001596:	fa22 f303 	lsr.w	r3, r2, r3
 800159a:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <HAL_RCC_ClockConfig+0x1cc>)
 800159c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_RCC_ClockConfig+0x1d0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff f896 	bl	80006d4 <HAL_InitTick>

  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40022000 	.word	0x40022000
 80015b8:	40021000 	.word	0x40021000
 80015bc:	08004240 	.word	0x08004240
 80015c0:	20000000 	.word	0x20000000
 80015c4:	20000004 	.word	0x20000004

080015c8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <HAL_RCC_EnableCSS+0x14>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	601a      	str	r2, [r3, #0]
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	4242004c 	.word	0x4242004c

080015e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015e0:	b490      	push	{r4, r7}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015e6:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015e8:	1d3c      	adds	r4, r7, #4
 80015ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015f0:	f240 2301 	movw	r3, #513	; 0x201
 80015f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
 80015fa:	2300      	movs	r3, #0
 80015fc:	61bb      	str	r3, [r7, #24]
 80015fe:	2300      	movs	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800160a:	4b22      	ldr	r3, [pc, #136]	; (8001694 <HAL_RCC_GetSysClockFreq+0xb4>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	2b04      	cmp	r3, #4
 8001618:	d002      	beq.n	8001620 <HAL_RCC_GetSysClockFreq+0x40>
 800161a:	2b08      	cmp	r3, #8
 800161c:	d003      	beq.n	8001626 <HAL_RCC_GetSysClockFreq+0x46>
 800161e:	e02d      	b.n	800167c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001620:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001622:	623b      	str	r3, [r7, #32]
      break;
 8001624:	e02d      	b.n	8001682 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	0c9b      	lsrs	r3, r3, #18
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001632:	4413      	add	r3, r2
 8001634:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001638:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d013      	beq.n	800166c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001644:	4b13      	ldr	r3, [pc, #76]	; (8001694 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	0c5b      	lsrs	r3, r3, #17
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001652:	4413      	add	r3, r2
 8001654:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001658:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <HAL_RCC_GetSysClockFreq+0xb8>)
 800165e:	fb02 f203 	mul.w	r2, r2, r3
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	fbb2 f3f3 	udiv	r3, r2, r3
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
 800166a:	e004      	b.n	8001676 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	4a0b      	ldr	r2, [pc, #44]	; (800169c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001670:	fb02 f303 	mul.w	r3, r2, r3
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	623b      	str	r3, [r7, #32]
      break;
 800167a:	e002      	b.n	8001682 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_RCC_GetSysClockFreq+0xb8>)
 800167e:	623b      	str	r3, [r7, #32]
      break;
 8001680:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001682:	6a3b      	ldr	r3, [r7, #32]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3728      	adds	r7, #40	; 0x28
 8001688:	46bd      	mov	sp, r7
 800168a:	bc90      	pop	{r4, r7}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	080040b0 	.word	0x080040b0
 8001694:	40021000 	.word	0x40021000
 8001698:	007a1200 	.word	0x007a1200
 800169c:	003d0900 	.word	0x003d0900

080016a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016a4:	4b02      	ldr	r3, [pc, #8]	; (80016b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80016a6:	681b      	ldr	r3, [r3, #0]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	20000000 	.word	0x20000000

080016b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016b8:	f7ff fff2 	bl	80016a0 <HAL_RCC_GetHCLKFreq>
 80016bc:	4602      	mov	r2, r0
 80016be:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	0a1b      	lsrs	r3, r3, #8
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	4903      	ldr	r1, [pc, #12]	; (80016d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016ca:	5ccb      	ldrb	r3, [r1, r3]
 80016cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40021000 	.word	0x40021000
 80016d8:	08004250 	.word	0x08004250

080016dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016e0:	f7ff ffde 	bl	80016a0 <HAL_RCC_GetHCLKFreq>
 80016e4:	4602      	mov	r2, r0
 80016e6:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	0adb      	lsrs	r3, r3, #11
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	4903      	ldr	r1, [pc, #12]	; (8001700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016f2:	5ccb      	ldrb	r3, [r1, r3]
 80016f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40021000 	.word	0x40021000
 8001700:	08004250 	.word	0x08004250

08001704 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_RCC_NMI_IRQHandler+0x20>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001710:	2b80      	cmp	r3, #128	; 0x80
 8001712:	d104      	bne.n	800171e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8001714:	f000 f828 	bl	8001768 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001718:	4b03      	ldr	r3, [pc, #12]	; (8001728 <HAL_RCC_NMI_IRQHandler+0x24>)
 800171a:	2280      	movs	r2, #128	; 0x80
 800171c:	701a      	strb	r2, [r3, #0]
  }
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40021000 	.word	0x40021000
 8001728:	4002100a 	.word	0x4002100a

0800172c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <RCC_Delay+0x34>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <RCC_Delay+0x38>)
 800173a:	fba2 2303 	umull	r2, r3, r2, r3
 800173e:	0a5b      	lsrs	r3, r3, #9
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	fb02 f303 	mul.w	r3, r2, r3
 8001746:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001748:	bf00      	nop
  }
  while (Delay --);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	1e5a      	subs	r2, r3, #1
 800174e:	60fa      	str	r2, [r7, #12]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1f9      	bne.n	8001748 <RCC_Delay+0x1c>
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr
 8001760:	20000000 	.word	0x20000000
 8001764:	10624dd3 	.word	0x10624dd3

08001768 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e03f      	b.n	8001806 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d106      	bne.n	80017a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7fe fea0 	bl	80004e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2224      	movs	r2, #36	; 0x24
 80017a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68da      	ldr	r2, [r3, #12]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 fcb3 	bl	8002124 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	691a      	ldr	r2, [r3, #16]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80017cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	695a      	ldr	r2, [r3, #20]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80017dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68da      	ldr	r2, [r3, #12]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2220      	movs	r2, #32
 80017f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2220      	movs	r2, #32
 8001800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e047      	b.n	80018b0 <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d106      	bne.n	800183a <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7fe fe53 	bl	80004e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2224      	movs	r2, #36	; 0x24
 800183e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001850:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 fc66 	bl	8002124 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	691a      	ldr	r2, [r3, #16]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001866:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	695a      	ldr	r2, [r3, #20]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8001876:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	695a      	ldr	r2, [r3, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f042 0208 	orr.w	r2, r2, #8
 8001886:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001896:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2220      	movs	r2, #32
 80018a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2220      	movs	r2, #32
 80018aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	4613      	mov	r3, r2
 80018c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b20      	cmp	r3, #32
 80018d0:	d130      	bne.n	8001934 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d002      	beq.n	80018de <HAL_UART_Transmit_IT+0x26>
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e029      	b.n	8001936 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d101      	bne.n	80018f0 <HAL_UART_Transmit_IT+0x38>
 80018ec:	2302      	movs	r3, #2
 80018ee:	e022      	b.n	8001936 <HAL_UART_Transmit_IT+0x7e>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	88fa      	ldrh	r2, [r7, #6]
 8001902:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	88fa      	ldrh	r2, [r7, #6]
 8001908:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2200      	movs	r2, #0
 800190e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2221      	movs	r2, #33	; 0x21
 8001914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68da      	ldr	r2, [r3, #12]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800192e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001930:	2300      	movs	r3, #0
 8001932:	e000      	b.n	8001936 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001934:	2302      	movs	r3, #2
  }
}
 8001936:	4618      	mov	r0, r3
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr

08001940 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	4613      	mov	r3, r2
 800194c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b20      	cmp	r3, #32
 8001958:	d11d      	bne.n	8001996 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d002      	beq.n	8001966 <HAL_UART_Receive_IT+0x26>
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e016      	b.n	8001998 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001970:	2b01      	cmp	r3, #1
 8001972:	d101      	bne.n	8001978 <HAL_UART_Receive_IT+0x38>
 8001974:	2302      	movs	r3, #2
 8001976:	e00f      	b.n	8001998 <HAL_UART_Receive_IT+0x58>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2200      	movs	r2, #0
 8001984:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	461a      	mov	r2, r3
 800198a:	68b9      	ldr	r1, [r7, #8]
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f000 fa3f 	bl	8001e10 <UART_Start_Receive_IT>
 8001992:	4603      	mov	r3, r0
 8001994:	e000      	b.n	8001998 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001996:	2302      	movs	r3, #2
  }
}
 8001998:	4618      	mov	r0, r3
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	; 0x28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10d      	bne.n	80019f2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	f003 0320 	and.w	r3, r3, #32
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d008      	beq.n	80019f2 <HAL_UART_IRQHandler+0x52>
 80019e0:	6a3b      	ldr	r3, [r7, #32]
 80019e2:	f003 0320 	and.w	r3, r3, #32
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 faf0 	bl	8001fd0 <UART_Receive_IT>
      return;
 80019f0:	e17b      	b.n	8001cea <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80b1 	beq.w	8001b5c <HAL_UART_IRQHandler+0x1bc>
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d105      	bne.n	8001a10 <HAL_UART_IRQHandler+0x70>
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 80a6 	beq.w	8001b5c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00a      	beq.n	8001a30 <HAL_UART_IRQHandler+0x90>
 8001a1a:	6a3b      	ldr	r3, [r7, #32]
 8001a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	f043 0201 	orr.w	r2, r3, #1
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00a      	beq.n	8001a50 <HAL_UART_IRQHandler+0xb0>
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	f043 0202 	orr.w	r2, r3, #2
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00a      	beq.n	8001a70 <HAL_UART_IRQHandler+0xd0>
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	f043 0204 	orr.w	r2, r3, #4
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00f      	beq.n	8001a9a <HAL_UART_IRQHandler+0xfa>
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	f003 0320 	and.w	r3, r3, #32
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d104      	bne.n	8001a8e <HAL_UART_IRQHandler+0xee>
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d005      	beq.n	8001a9a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f043 0208 	orr.w	r2, r3, #8
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 811e 	beq.w	8001ce0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	f003 0320 	and.w	r3, r3, #32
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d007      	beq.n	8001abe <HAL_UART_IRQHandler+0x11e>
 8001aae:	6a3b      	ldr	r3, [r7, #32]
 8001ab0:	f003 0320 	and.w	r3, r3, #32
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d002      	beq.n	8001abe <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 fa89 	bl	8001fd0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	bf14      	ite	ne
 8001acc:	2301      	movne	r3, #1
 8001ace:	2300      	moveq	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <HAL_UART_IRQHandler+0x146>
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d031      	beq.n	8001b4a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f9cb 	bl	8001e82 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d023      	beq.n	8001b42 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	695a      	ldr	r2, [r3, #20]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b08:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d013      	beq.n	8001b3a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b16:	4a76      	ldr	r2, [pc, #472]	; (8001cf0 <HAL_UART_IRQHandler+0x350>)
 8001b18:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe ffbe 	bl	8000aa0 <HAL_DMA_Abort_IT>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d016      	beq.n	8001b58 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b34:	4610      	mov	r0, r2
 8001b36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b38:	e00e      	b.n	8001b58 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f002 f96c 	bl	8003e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b40:	e00a      	b.n	8001b58 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f002 f968 	bl	8003e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b48:	e006      	b.n	8001b58 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f002 f964 	bl	8003e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001b56:	e0c3      	b.n	8001ce0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b58:	bf00      	nop
    return;
 8001b5a:	e0c1      	b.n	8001ce0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	f040 80a1 	bne.w	8001ca8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	f003 0310 	and.w	r3, r3, #16
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 809b 	beq.w	8001ca8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001b72:	6a3b      	ldr	r3, [r7, #32]
 8001b74:	f003 0310 	and.w	r3, r3, #16
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 8095 	beq.w	8001ca8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d04e      	beq.n	8001c40 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001bac:	8a3b      	ldrh	r3, [r7, #16]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 8098 	beq.w	8001ce4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001bb8:	8a3a      	ldrh	r2, [r7, #16]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	f080 8092 	bcs.w	8001ce4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	8a3a      	ldrh	r2, [r7, #16]
 8001bc4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	2b20      	cmp	r3, #32
 8001bce:	d02b      	beq.n	8001c28 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bde:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	695a      	ldr	r2, [r3, #20]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 0201 	bic.w	r2, r2, #1
 8001bee:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	695a      	ldr	r2, [r3, #20]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bfe:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2220      	movs	r2, #32
 8001c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 0210 	bic.w	r2, r2, #16
 8001c1c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe ff02 	bl	8000a2c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	4619      	mov	r1, r3
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f85b 	bl	8001cf4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001c3e:	e051      	b.n	8001ce4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d047      	beq.n	8001ce8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8001c58:	8a7b      	ldrh	r3, [r7, #18]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d044      	beq.n	8001ce8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001c6c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	695a      	ldr	r2, [r3, #20]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 0201 	bic.w	r2, r2, #1
 8001c7c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2220      	movs	r2, #32
 8001c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 0210 	bic.w	r2, r2, #16
 8001c9a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001c9c:	8a7b      	ldrh	r3, [r7, #18]
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f827 	bl	8001cf4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001ca6:	e01f      	b.n	8001ce8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d008      	beq.n	8001cc4 <HAL_UART_IRQHandler+0x324>
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f920 	bl	8001f02 <UART_Transmit_IT>
    return;
 8001cc2:	e012      	b.n	8001cea <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00d      	beq.n	8001cea <HAL_UART_IRQHandler+0x34a>
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d008      	beq.n	8001cea <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f961 	bl	8001fa0 <UART_EndTransmit_IT>
    return;
 8001cde:	e004      	b.n	8001cea <HAL_UART_IRQHandler+0x34a>
    return;
 8001ce0:	bf00      	nop
 8001ce2:	e002      	b.n	8001cea <HAL_UART_IRQHandler+0x34a>
      return;
 8001ce4:	bf00      	nop
 8001ce6:	e000      	b.n	8001cea <HAL_UART_IRQHandler+0x34a>
      return;
 8001ce8:	bf00      	nop
  }
}
 8001cea:	3728      	adds	r7, #40	; 0x28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	08001edb 	.word	0x08001edb

08001cf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr

08001d0a <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b085      	sub	sp, #20
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e020      	b.n	8001d66 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2224      	movs	r2, #36	; 0x24
 8001d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f023 030c 	bic.w	r3, r3, #12
 8001d42:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f043 0308 	orr.w	r3, r3, #8
 8001d4a:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2220      	movs	r2, #32
 8001d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d101      	bne.n	8001d8a <HAL_HalfDuplex_EnableReceiver+0x1a>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e020      	b.n	8001dcc <HAL_HalfDuplex_EnableReceiver+0x5c>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2224      	movs	r2, #36	; 0x24
 8001d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f023 030c 	bic.w	r3, r3, #12
 8001da8:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f043 0304 	orr.w	r3, r3, #4
 8001db0:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b085      	sub	sp, #20
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	2300      	movs	r3, #0
 8001de4:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	4313      	orrs	r3, r2
 8001e04:	b2db      	uxtb	r3, r3
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr

08001e10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	88fa      	ldrh	r2, [r7, #6]
 8001e28:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	88fa      	ldrh	r2, [r7, #6]
 8001e2e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2222      	movs	r2, #34	; 0x22
 8001e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e54:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	695a      	ldr	r2, [r3, #20]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f042 0201 	orr.w	r2, r2, #1
 8001e64:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f042 0220 	orr.w	r2, r2, #32
 8001e74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr

08001e82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001e98:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	695a      	ldr	r2, [r3, #20]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0201 	bic.w	r2, r2, #1
 8001ea8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d107      	bne.n	8001ec2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0210 	bic.w	r2, r2, #16
 8001ec0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2220      	movs	r2, #32
 8001ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr

08001eda <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b084      	sub	sp, #16
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f001 ff8f 	bl	8003e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b085      	sub	sp, #20
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b21      	cmp	r3, #33	; 0x21
 8001f14:	d13e      	bne.n	8001f94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f1e:	d114      	bne.n	8001f4a <UART_Transmit_IT+0x48>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d110      	bne.n	8001f4a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	461a      	mov	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	1c9a      	adds	r2, r3, #2
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	621a      	str	r2, [r3, #32]
 8001f48:	e008      	b.n	8001f5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	1c59      	adds	r1, r3, #1
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6211      	str	r1, [r2, #32]
 8001f54:	781a      	ldrb	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	3b01      	subs	r3, #1
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10f      	bne.n	8001f90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001f90:	2300      	movs	r3, #0
 8001f92:	e000      	b.n	8001f96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001f94:	2302      	movs	r3, #2
  }
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fb6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f001 ff16 	bl	8003df2 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b22      	cmp	r3, #34	; 0x22
 8001fe2:	f040 8099 	bne.w	8002118 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fee:	d117      	bne.n	8002020 <UART_Receive_IT+0x50>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d113      	bne.n	8002020 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002000:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	b29b      	uxth	r3, r3
 800200a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800200e:	b29a      	uxth	r2, r3
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002018:	1c9a      	adds	r2, r3, #2
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	629a      	str	r2, [r3, #40]	; 0x28
 800201e:	e026      	b.n	800206e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002024:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002032:	d007      	beq.n	8002044 <UART_Receive_IT+0x74>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10a      	bne.n	8002052 <UART_Receive_IT+0x82>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d106      	bne.n	8002052 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	b2da      	uxtb	r2, r3
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	701a      	strb	r2, [r3, #0]
 8002050:	e008      	b.n	8002064 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	b2db      	uxtb	r3, r3
 800205a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800205e:	b2da      	uxtb	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002068:	1c5a      	adds	r2, r3, #1
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002072:	b29b      	uxth	r3, r3
 8002074:	3b01      	subs	r3, #1
 8002076:	b29b      	uxth	r3, r3
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	4619      	mov	r1, r3
 800207c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800207e:	2b00      	cmp	r3, #0
 8002080:	d148      	bne.n	8002114 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0220 	bic.w	r2, r2, #32
 8002090:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0201 	bic.w	r2, r2, #1
 80020b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2220      	movs	r2, #32
 80020b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d123      	bne.n	800210a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0210 	bic.w	r2, r2, #16
 80020d6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0310 	and.w	r3, r3, #16
 80020e2:	2b10      	cmp	r3, #16
 80020e4:	d10a      	bne.n	80020fc <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002100:	4619      	mov	r1, r3
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff fdf6 	bl	8001cf4 <HAL_UARTEx_RxEventCallback>
 8002108:	e002      	b.n	8002110 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f001 fe5e 	bl	8003dcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	e002      	b.n	800211a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	e000      	b.n	800211a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002118:	2302      	movs	r3, #2
  }
}
 800211a:	4618      	mov	r0, r3
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	430a      	orrs	r2, r1
 8002140:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	4313      	orrs	r3, r2
 8002152:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800215e:	f023 030c 	bic.w	r3, r3, #12
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6812      	ldr	r2, [r2, #0]
 8002166:	68b9      	ldr	r1, [r7, #8]
 8002168:	430b      	orrs	r3, r1
 800216a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699a      	ldr	r2, [r3, #24]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a2c      	ldr	r2, [pc, #176]	; (8002238 <UART_SetConfig+0x114>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d103      	bne.n	8002194 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800218c:	f7ff faa6 	bl	80016dc <HAL_RCC_GetPCLK2Freq>
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	e002      	b.n	800219a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002194:	f7ff fa8e 	bl	80016b4 <HAL_RCC_GetPCLK1Freq>
 8002198:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	009a      	lsls	r2, r3, #2
 80021a4:	441a      	add	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b0:	4a22      	ldr	r2, [pc, #136]	; (800223c <UART_SetConfig+0x118>)
 80021b2:	fba2 2303 	umull	r2, r3, r2, r3
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	0119      	lsls	r1, r3, #4
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	009a      	lsls	r2, r3, #2
 80021c4:	441a      	add	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80021d0:	4b1a      	ldr	r3, [pc, #104]	; (800223c <UART_SetConfig+0x118>)
 80021d2:	fba3 0302 	umull	r0, r3, r3, r2
 80021d6:	095b      	lsrs	r3, r3, #5
 80021d8:	2064      	movs	r0, #100	; 0x64
 80021da:	fb00 f303 	mul.w	r3, r0, r3
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	3332      	adds	r3, #50	; 0x32
 80021e4:	4a15      	ldr	r2, [pc, #84]	; (800223c <UART_SetConfig+0x118>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021f0:	4419      	add	r1, r3
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	009a      	lsls	r2, r3, #2
 80021fc:	441a      	add	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	fbb2 f2f3 	udiv	r2, r2, r3
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <UART_SetConfig+0x118>)
 800220a:	fba3 0302 	umull	r0, r3, r3, r2
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	2064      	movs	r0, #100	; 0x64
 8002212:	fb00 f303 	mul.w	r3, r0, r3
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	3332      	adds	r3, #50	; 0x32
 800221c:	4a07      	ldr	r2, [pc, #28]	; (800223c <UART_SetConfig+0x118>)
 800221e:	fba2 2303 	umull	r2, r3, r2, r3
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	f003 020f 	and.w	r2, r3, #15
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	440a      	add	r2, r1
 800222e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002230:	bf00      	nop
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40013800 	.word	0x40013800
 800223c:	51eb851f 	.word	0x51eb851f

08002240 <_ZN5PrintC1Ev>:
    void setWriteError(int err = 1)
    {
      write_error = err;
    }
  public:
    Print() : write_error(0) {}
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	4a05      	ldr	r2, [pc, #20]	; (8002260 <_ZN5PrintC1Ev+0x20>)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	605a      	str	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr
 8002260:	0800428c 	.word	0x0800428c

08002264 <_ZN6StreamC1Ev>:
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream()
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
    {
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff ffe6 	bl	8002240 <_ZN5PrintC1Ev>
 8002274:	4a05      	ldr	r2, [pc, #20]	; (800228c <_ZN6StreamC1Ev+0x28>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	601a      	str	r2, [r3, #0]
      _timeout = 1000;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002280:	609a      	str	r2, [r3, #8]
    }
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4618      	mov	r0, r3
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	080042a4 	.word	0x080042a4

08002290 <_ZN14HardwareSerialC1E7PinNameS0_>:
HardwareSerial::HardwareSerial(uint32_t _rx, uint32_t _tx)
{
  init(digitalPinToPinName(_rx), digitalPinToPinName(_tx));
}

HardwareSerial::HardwareSerial(PinName _rx, PinName _tx)
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff ffe0 	bl	8002264 <_ZN6StreamC1Ev>
 80022a4:	4a06      	ldr	r2, [pc, #24]	; (80022c0 <_ZN14HardwareSerialC1E7PinNameS0_+0x30>)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	601a      	str	r2, [r3, #0]
{
  init(_rx, _tx);
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	68b9      	ldr	r1, [r7, #8]
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 f808 	bl	80022c4 <_ZN14HardwareSerial4initE7PinNameS0_>
}
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	08004260 	.word	0x08004260

080022c4 <_ZN14HardwareSerial4initE7PinNameS0_>:
{
  init(NC, _rxtx);
}

void HardwareSerial::init(PinName _rx, PinName _tx)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
  if (_rx == _tx) {
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d105      	bne.n	80022e4 <_ZN14HardwareSerial4initE7PinNameS0_+0x20>
    _serial.pin_rx = NC;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f04f 32ff 	mov.w	r2, #4294967295
 80022de:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80022e2:	e003      	b.n	80022ec <_ZN14HardwareSerial4initE7PinNameS0_+0x28>
  } else {
    _serial.pin_rx = _rx;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  }
  _serial.pin_tx = _tx;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  _serial.rx_buff = _rx_buffer;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f103 0211 	add.w	r2, r3, #17
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  _serial.rx_head = 0;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
  _serial.rx_tail = 0;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
  _serial.tx_buff = _tx_buffer;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f103 0251 	add.w	r2, r3, #81	; 0x51
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  _serial.tx_head = 0;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
  _serial.tx_tail = 0;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
}
 800232c:	bf00      	nop
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr

08002336 <_ZN14HardwareSerial16_rx_complete_irqEP8serial_s>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(serial_t *obj)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b084      	sub	sp, #16
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  // No Parity error, read byte and store it in the buffer if there is room
  unsigned char c;

  if (uart_getc(obj, &c) == 0) {
 800233e:	f107 030e 	add.w	r3, r7, #14
 8002342:	4619      	mov	r1, r3
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f001 fc75 	bl	8003c34 <uart_getc>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	bf0c      	ite	eq
 8002350:	2301      	moveq	r3, #1
 8002352:	2300      	movne	r3, #0
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d01d      	beq.n	8002396 <_ZN14HardwareSerial16_rx_complete_irqEP8serial_s+0x60>

    rx_buffer_index_t i = (unsigned int)(obj->rx_head + 1) % SERIAL_RX_BUFFER_SIZE;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8002360:	b29b      	uxth	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	3301      	adds	r3, #1
 8002366:	b2db      	uxtb	r3, r3
 8002368:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800236c:	73fb      	strb	r3, [r7, #15]

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != obj->rx_tail) {
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8002376:	4293      	cmp	r3, r2
 8002378:	d00d      	beq.n	8002396 <_ZN14HardwareSerial16_rx_complete_irqEP8serial_s+0x60>
      obj->rx_buff[obj->rx_head] = c;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8002384:	b292      	uxth	r2, r2
 8002386:	4413      	add	r3, r2
 8002388:	7bba      	ldrb	r2, [r7, #14]
 800238a:	701a      	strb	r2, [r3, #0]
      obj->rx_head = i;
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	b29a      	uxth	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    }
  }
}
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <_ZN14HardwareSerial16_tx_complete_irqEP8serial_s>:

// Actual interrupt handlers //////////////////////////////////////////////////

int HardwareSerial::_tx_complete_irq(serial_t *obj)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  size_t remaining_data;
  // previous HAL transfer is finished, move tail pointer accordingly
  obj->tx_tail = (obj->tx_tail + obj->tx_size) % SERIAL_TX_BUFFER_SIZE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	4413      	add	r3, r2
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023be:	b29a      	uxth	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  // If buffer is not empty (head != tail), send remaining data
  if (obj->tx_head != obj->tx_tail) {
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	429a      	cmp	r2, r3
 80023d6:	bf14      	ite	ne
 80023d8:	2301      	movne	r3, #1
 80023da:	2300      	moveq	r3, #0
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d02d      	beq.n	800243e <_ZN14HardwareSerial16_tx_complete_irqEP8serial_s+0x9e>
    remaining_data = (SERIAL_TX_BUFFER_SIZE + obj->tx_head - obj->tx_tail)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80023e8:	3340      	adds	r3, #64	; 0x40
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
 80023f0:	b292      	uxth	r2, r2
 80023f2:	1a9b      	subs	r3, r3, r2
                     % SERIAL_TX_BUFFER_SIZE;
 80023f4:	425a      	negs	r2, r3
 80023f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023fa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80023fe:	bf58      	it	pl
 8002400:	4253      	negpl	r3, r2
    remaining_data = (SERIAL_TX_BUFFER_SIZE + obj->tx_head - obj->tx_tail)
 8002402:	60bb      	str	r3, [r7, #8]
    // Limit the next transmission to the buffer end
    // because HAL is not able to manage rollover
    obj->tx_size = min(remaining_data,
                       (size_t)(SERIAL_TX_BUFFER_SIZE - obj->tx_tail));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800240a:	b29b      	uxth	r3, r3
 800240c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	f107 020c 	add.w	r2, r7, #12
 8002416:	f107 0308 	add.w	r3, r7, #8
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f000 fa5c 	bl	80028da <_ZSt3minIjERKT_S2_S2_>
 8002422:	4603      	mov	r3, r0
    obj->tx_size = min(remaining_data,
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	66da      	str	r2, [r3, #108]	; 0x6c
    uart_attach_tx_callback(obj, _tx_complete_irq, obj->tx_size);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800242e:	461a      	mov	r2, r3
 8002430:	4905      	ldr	r1, [pc, #20]	; (8002448 <_ZN14HardwareSerial16_tx_complete_irqEP8serial_s+0xa8>)
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f001 fc60 	bl	8003cf8 <uart_attach_tx_callback>
    return -1;
 8002438:	f04f 33ff 	mov.w	r3, #4294967295
 800243c:	e000      	b.n	8002440 <_ZN14HardwareSerial16_tx_complete_irqEP8serial_s+0xa0>
  }

  return 0;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	080023a1 	.word	0x080023a1

0800244c <_ZN14HardwareSerial5beginEmh>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08a      	sub	sp, #40	; 0x28
 8002450:	af02      	add	r7, sp, #8
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	4613      	mov	r3, r2
 8002458:	71fb      	strb	r3, [r7, #7]
  uint32_t databits = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
  uint32_t stopbits = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	61bb      	str	r3, [r7, #24]
  uint32_t parity = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]

  _baud = baud;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  _config = config;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	79fa      	ldrb	r2, [r7, #7]
 8002472:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

  // Manage databits
  switch (config & 0x07) {
 8002476:	79fb      	ldrb	r3, [r7, #7]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	2b06      	cmp	r3, #6
 800247e:	d00c      	beq.n	800249a <_ZN14HardwareSerial5beginEmh+0x4e>
 8002480:	2b06      	cmp	r3, #6
 8002482:	dc0d      	bgt.n	80024a0 <_ZN14HardwareSerial5beginEmh+0x54>
 8002484:	2b02      	cmp	r3, #2
 8002486:	d002      	beq.n	800248e <_ZN14HardwareSerial5beginEmh+0x42>
 8002488:	2b04      	cmp	r3, #4
 800248a:	d003      	beq.n	8002494 <_ZN14HardwareSerial5beginEmh+0x48>
 800248c:	e008      	b.n	80024a0 <_ZN14HardwareSerial5beginEmh+0x54>
    case 0x02:
      databits = 6;
 800248e:	2306      	movs	r3, #6
 8002490:	61fb      	str	r3, [r7, #28]
      break;
 8002492:	e008      	b.n	80024a6 <_ZN14HardwareSerial5beginEmh+0x5a>
    case 0x04:
      databits = 7;
 8002494:	2307      	movs	r3, #7
 8002496:	61fb      	str	r3, [r7, #28]
      break;
 8002498:	e005      	b.n	80024a6 <_ZN14HardwareSerial5beginEmh+0x5a>
    case 0x06:
      databits = 8;
 800249a:	2308      	movs	r3, #8
 800249c:	61fb      	str	r3, [r7, #28]
      break;
 800249e:	e002      	b.n	80024a6 <_ZN14HardwareSerial5beginEmh+0x5a>
    default:
      databits = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	61fb      	str	r3, [r7, #28]
      break;
 80024a4:	bf00      	nop
  }

  if ((config & 0x30) == 0x30) {
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80024ac:	2b30      	cmp	r3, #48	; 0x30
 80024ae:	d106      	bne.n	80024be <_ZN14HardwareSerial5beginEmh+0x72>
    parity = UART_PARITY_ODD;
 80024b0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024b4:	617b      	str	r3, [r7, #20]
    databits++;
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	3301      	adds	r3, #1
 80024ba:	61fb      	str	r3, [r7, #28]
 80024bc:	e00d      	b.n	80024da <_ZN14HardwareSerial5beginEmh+0x8e>
  } else if ((config & 0x20) == 0x20) {
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	f003 0320 	and.w	r3, r3, #32
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d006      	beq.n	80024d6 <_ZN14HardwareSerial5beginEmh+0x8a>
    parity = UART_PARITY_EVEN;
 80024c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024cc:	617b      	str	r3, [r7, #20]
    databits++;
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3301      	adds	r3, #1
 80024d2:	61fb      	str	r3, [r7, #28]
 80024d4:	e001      	b.n	80024da <_ZN14HardwareSerial5beginEmh+0x8e>
  } else {
    parity = UART_PARITY_NONE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
  }

  if ((config & 0x08) == 0x08) {
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <_ZN14HardwareSerial5beginEmh+0xa0>
    stopbits = UART_STOPBITS_2;
 80024e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024e8:	61bb      	str	r3, [r7, #24]
 80024ea:	e001      	b.n	80024f0 <_ZN14HardwareSerial5beginEmh+0xa4>
  } else {
    stopbits = UART_STOPBITS_1;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61bb      	str	r3, [r7, #24]
  }

  switch (databits) {
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d003      	beq.n	80024fe <_ZN14HardwareSerial5beginEmh+0xb2>
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	2b09      	cmp	r3, #9
 80024fa:	d003      	beq.n	8002504 <_ZN14HardwareSerial5beginEmh+0xb8>
 80024fc:	e006      	b.n	800250c <_ZN14HardwareSerial5beginEmh+0xc0>
    case 7:
      databits = UART_WORDLENGTH_7B;
      break;
#endif
    case 8:
      databits = UART_WORDLENGTH_8B;
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
      break;
 8002502:	e009      	b.n	8002518 <_ZN14HardwareSerial5beginEmh+0xcc>
    case 9:
      databits = UART_WORDLENGTH_9B;
 8002504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002508:	61fb      	str	r3, [r7, #28]
      break;
 800250a:	e005      	b.n	8002518 <_ZN14HardwareSerial5beginEmh+0xcc>
    default:
    case 0:
      Error_Handler();
 800250c:	f240 11a1 	movw	r1, #417	; 0x1a1
 8002510:	480d      	ldr	r0, [pc, #52]	; (8002548 <_ZN14HardwareSerial5beginEmh+0xfc>)
 8002512:	f001 fa23 	bl	800395c <_Error_Handler>
      break;
 8002516:	bf00      	nop
  }

  uart_init(&_serial, (uint32_t)baud, databits, parity, stopbits);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f103 0094 	add.w	r0, r3, #148	; 0x94
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	69fa      	ldr	r2, [r7, #28]
 8002526:	68b9      	ldr	r1, [r7, #8]
 8002528:	f001 fa3e 	bl	80039a8 <uart_init>
  enableHalfDuplexRx();
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 f9af 	bl	8002890 <_ZN14HardwareSerial18enableHalfDuplexRxEv>
  uart_attach_rx_callback(&_serial, _rx_complete_irq);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	3394      	adds	r3, #148	; 0x94
 8002536:	4905      	ldr	r1, [pc, #20]	; (800254c <_ZN14HardwareSerial5beginEmh+0x100>)
 8002538:	4618      	mov	r0, r3
 800253a:	f001 fba9 	bl	8003c90 <uart_attach_rx_callback>
}
 800253e:	bf00      	nop
 8002540:	3720      	adds	r7, #32
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	080040c0 	.word	0x080040c0
 800254c:	08002337 	.word	0x08002337

08002550 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _serial.rx_head = _serial.rx_tail;
}

int HardwareSerial::available(void)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _serial.rx_head - _serial.rx_tail)) % SERIAL_RX_BUFFER_SIZE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 800255e:	b29b      	uxth	r3, r3
 8002560:	3340      	adds	r3, #64	; 0x40
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 8002568:	1a9b      	subs	r3, r3, r2
 800256a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  if (_serial.rx_head == _serial.rx_tail) {
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 8002586:	b29a      	uxth	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800258e:	429a      	cmp	r2, r3
 8002590:	bf0c      	ite	eq
 8002592:	2301      	moveq	r3, #1
 8002594:	2300      	movne	r3, #0
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <_ZN14HardwareSerial4peekEv+0x2a>
    return -1;
 800259c:	f04f 33ff 	mov.w	r3, #4294967295
 80025a0:	e007      	b.n	80025b2 <_ZN14HardwareSerial4peekEv+0x3a>
  } else {
    return _serial.rx_buff[_serial.rx_tail];
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 80025ae:	4413      	add	r3, r2
 80025b0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  enableHalfDuplexRx();
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f963 	bl	8002890 <_ZN14HardwareSerial18enableHalfDuplexRxEv>
  // if the head isn't ahead of the tail, we don't have any characters
  if (_serial.rx_head == _serial.rx_tail) {
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80025d8:	429a      	cmp	r2, r3
 80025da:	bf0c      	ite	eq
 80025dc:	2301      	moveq	r3, #1
 80025de:	2300      	movne	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d002      	beq.n	80025ec <_ZN14HardwareSerial4readEv+0x30>
    return -1;
 80025e6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ea:	e016      	b.n	800261a <_ZN14HardwareSerial4readEv+0x5e>
  } else {
    unsigned char c = _serial.rx_buff[_serial.rx_tail];
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 80025f8:	4413      	add	r3, r2
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	73fb      	strb	r3, [r7, #15]
    _serial.rx_tail = (rx_buffer_index_t)(_serial.rx_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8002604:	b2db      	uxtb	r3, r3
 8002606:	3301      	adds	r3, #1
 8002608:	b2db      	uxtb	r3, r3
 800260a:	b29b      	uxth	r3, r3
 800260c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002610:	b29a      	uxth	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
    return c;
 8002618:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <_ZN14HardwareSerial17availableForWriteEv>:

int HardwareSerial::availableForWrite(void)
{
 8002622:	b480      	push	{r7}
 8002624:	b085      	sub	sp, #20
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  tx_buffer_index_t head = _serial.tx_head;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 8002630:	73fb      	strb	r3, [r7, #15]
  tx_buffer_index_t tail = _serial.tx_tail;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f8b3 30fe 	ldrh.w	r3, [r3, #254]	; 0xfe
 8002638:	b29b      	uxth	r3, r3
 800263a:	73bb      	strb	r3, [r7, #14]

  if (head >= tail) {
 800263c:	7bfa      	ldrb	r2, [r7, #15]
 800263e:	7bbb      	ldrb	r3, [r7, #14]
 8002640:	429a      	cmp	r2, r3
 8002642:	d305      	bcc.n	8002650 <_ZN14HardwareSerial17availableForWriteEv+0x2e>
    return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 8002644:	7bfb      	ldrb	r3, [r7, #15]
 8002646:	f1c3 023f 	rsb	r2, r3, #63	; 0x3f
 800264a:	7bbb      	ldrb	r3, [r7, #14]
 800264c:	4413      	add	r3, r2
 800264e:	e003      	b.n	8002658 <_ZN14HardwareSerial17availableForWriteEv+0x36>
  }
  return tail - head - 1;
 8002650:	7bba      	ldrb	r2, [r7, #14]
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	3b01      	subs	r3, #1
}
 8002658:	4618      	mov	r0, r3
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr

08002662 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written) {
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	7c1b      	ldrb	r3, [r3, #16]
 800266e:	f083 0301 	eor.w	r3, r3, #1
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10e      	bne.n	8002696 <_ZN14HardwareSerial5flushEv+0x34>
    return;
  }

  while ((_serial.tx_head != _serial.tx_tail)) {
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	; 0xfa
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f8b3 30fe 	ldrh.w	r3, [r3, #254]	; 0xfe
 8002684:	b29b      	uxth	r3, r3
 8002686:	429a      	cmp	r2, r3
 8002688:	bf14      	ite	ne
 800268a:	2301      	movne	r3, #1
 800268c:	2300      	moveq	r3, #0
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <_ZN14HardwareSerial5flushEv+0x36>
 8002694:	e7f0      	b.n	8002678 <_ZN14HardwareSerial5flushEv+0x16>
    return;
 8002696:	bf00      	nop
    // nop, the interrupt handler will free up space for us
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished transmission (TXC is set).
}
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <_ZN14HardwareSerial5writeEPKhj>:

size_t HardwareSerial::write(const uint8_t *buffer, size_t size)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b088      	sub	sp, #32
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  size_t size_intermediate;
  size_t ret = size;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	61bb      	str	r3, [r7, #24]
  size_t available = availableForWrite();
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	3308      	adds	r3, #8
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	4798      	blx	r3
 80026bc:	4603      	mov	r3, r0
 80026be:	617b      	str	r3, [r7, #20]
  size_t available_till_buffer_end = SERIAL_TX_BUFFER_SIZE - _serial.tx_head;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 80026c6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80026ca:	613b      	str	r3, [r7, #16]

  _written = true;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2201      	movs	r2, #1
 80026d0:	741a      	strb	r2, [r3, #16]
  if (isHalfDuplex()) {
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f000 f8ca 	bl	800286c <_ZNK14HardwareSerial12isHalfDuplexEv>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00d      	beq.n	80026fa <_ZN14HardwareSerial5writeEPKhj+0x5a>
    if (_rx_enabled) {
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d008      	beq.n	80026fa <_ZN14HardwareSerial5writeEPKhj+0x5a>
      _rx_enabled = false;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
      uart_enable_tx(&_serial);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	3394      	adds	r3, #148	; 0x94
 80026f4:	4618      	mov	r0, r3
 80026f6:	f001 fb31 	bl	8003d5c <uart_enable_tx>
    }
  }

  // If the output buffer is full, there's nothing for it other than to
  // wait for the interrupt handler to free space
  while (!availableForWrite()) {
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	3308      	adds	r3, #8
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	4798      	blx	r3
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	bf0c      	ite	eq
 800270c:	2301      	moveq	r3, #1
 800270e:	2300      	movne	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d000      	beq.n	8002718 <_ZN14HardwareSerial5writeEPKhj+0x78>
 8002716:	e7f0      	b.n	80026fa <_ZN14HardwareSerial5writeEPKhj+0x5a>
    // nop, the interrupt handler will free up space for us
  }

  // HAL doesn't manage rollover, so split transfer till end of TX buffer
  // Also, split transfer according to available space in buffer
  while ((size > available_till_buffer_end) || (size > available)) {
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	429a      	cmp	r2, r3
 800271e:	d803      	bhi.n	8002728 <_ZN14HardwareSerial5writeEPKhj+0x88>
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	429a      	cmp	r2, r3
 8002726:	d929      	bls.n	800277c <_ZN14HardwareSerial5writeEPKhj+0xdc>
    size_intermediate = min(available, available_till_buffer_end);
 8002728:	f107 0210 	add.w	r2, r7, #16
 800272c:	f107 0314 	add.w	r3, r7, #20
 8002730:	4611      	mov	r1, r2
 8002732:	4618      	mov	r0, r3
 8002734:	f000 f8d1 	bl	80028da <_ZSt3minIjERKT_S2_S2_>
 8002738:	4603      	mov	r3, r0
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	61fb      	str	r3, [r7, #28]
    write(buffer, size_intermediate);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	3304      	adds	r3, #4
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	69fa      	ldr	r2, [r7, #28]
 8002748:	68b9      	ldr	r1, [r7, #8]
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	4798      	blx	r3
    size -= size_intermediate;
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	607b      	str	r3, [r7, #4]
    buffer += size_intermediate;
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	4413      	add	r3, r2
 800275c:	60bb      	str	r3, [r7, #8]
    available = availableForWrite();
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	3308      	adds	r3, #8
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	4798      	blx	r3
 800276a:	4603      	mov	r3, r0
 800276c:	617b      	str	r3, [r7, #20]
    available_till_buffer_end = SERIAL_TX_BUFFER_SIZE - _serial.tx_head;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 8002774:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002778:	613b      	str	r3, [r7, #16]
  while ((size > available_till_buffer_end) || (size > available)) {
 800277a:	e7cd      	b.n	8002718 <_ZN14HardwareSerial5writeEPKhj+0x78>
  }

  // Copy data to buffer. Take into account rollover if necessary.
  if (_serial.tx_head + size <= SERIAL_TX_BUFFER_SIZE) {
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 8002782:	461a      	mov	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4413      	add	r3, r2
 8002788:	2b40      	cmp	r3, #64	; 0x40
 800278a:	d80e      	bhi.n	80027aa <_ZN14HardwareSerial5writeEPKhj+0x10a>
    memcpy(&_serial.tx_buff[_serial.tx_head], buffer, size);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	f8b2 20fa 	ldrh.w	r2, [r2, #250]	; 0xfa
 8002798:	4413      	add	r3, r2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	4618      	mov	r0, r3
 80027a0:	f001 fc1c 	bl	8003fdc <memcpy>
    size_intermediate = size;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	61fb      	str	r3, [r7, #28]
 80027a8:	e01d      	b.n	80027e6 <_ZN14HardwareSerial5writeEPKhj+0x146>
  } else {
    // memcpy till end of buffer then continue memcpy from beginning of buffer
    size_intermediate = SERIAL_TX_BUFFER_SIZE - _serial.tx_head;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 80027b0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80027b4:	61fb      	str	r3, [r7, #28]
    memcpy(&_serial.tx_buff[_serial.tx_head], buffer, size_intermediate);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	f8b2 20fa 	ldrh.w	r2, [r2, #250]	; 0xfa
 80027c2:	4413      	add	r3, r2
 80027c4:	69fa      	ldr	r2, [r7, #28]
 80027c6:	68b9      	ldr	r1, [r7, #8]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f001 fc07 	bl	8003fdc <memcpy>
    memcpy(&_serial.tx_buff[0], buffer + size_intermediate,
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	18d1      	adds	r1, r2, r3
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	461a      	mov	r2, r3
 80027e2:	f001 fbfb 	bl	8003fdc <memcpy>
           size - size_intermediate);
  }

  // Data are copied to buffer, move head pointer accordingly
  _serial.tx_head = (_serial.tx_head + size) % SERIAL_TX_BUFFER_SIZE;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	; 0xfa
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  // Transfer data with HAL only is there is no TX data transfer ongoing
  // otherwise, data transfer will be done asynchronously from callback
  if (!serial_tx_active(&_serial)) {
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	3394      	adds	r3, #148	; 0x94
 8002804:	4618      	mov	r0, r3
 8002806:	f001 f9f9 	bl	8003bfc <serial_tx_active>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	bf0c      	ite	eq
 8002810:	2301      	moveq	r3, #1
 8002812:	2300      	movne	r3, #0
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00a      	beq.n	8002830 <_ZN14HardwareSerial5writeEPKhj+0x190>
    // note: tx_size correspond to size of HAL data transfer,
    // not the total amount of data in the buffer.
    // To compute size of data in buffer compare head and tail
    _serial.tx_size = size_intermediate;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	69fa      	ldr	r2, [r7, #28]
 800281e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    uart_attach_tx_callback(&_serial, _tx_complete_irq, size_intermediate);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	3394      	adds	r3, #148	; 0x94
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	4904      	ldr	r1, [pc, #16]	; (800283c <_ZN14HardwareSerial5writeEPKhj+0x19c>)
 800282a:	4618      	mov	r0, r3
 800282c:	f001 fa64 	bl	8003cf8 <uart_attach_tx_callback>
  }

  /* There is no real error management so just return transfer size requested*/
  return ret;
 8002830:	69bb      	ldr	r3, [r7, #24]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3720      	adds	r7, #32
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	080023a1 	.word	0x080023a1

08002840 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	70fb      	strb	r3, [r7, #3]
  uint8_t buff = c;
 800284c:	78fb      	ldrb	r3, [r7, #3]
 800284e:	73fb      	strb	r3, [r7, #15]
  return write(&buff, 1);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3304      	adds	r3, #4
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f107 010f 	add.w	r1, r7, #15
 800285c:	2201      	movs	r2, #1
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	4798      	blx	r3
 8002862:	4603      	mov	r3, r0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <_ZNK14HardwareSerial12isHalfDuplexEv>:
{
  _serial.pin_rx = NC;
}

bool HardwareSerial::isHalfDuplex(void) const
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  return _serial.pin_rx == NC;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800287a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287e:	bf0c      	ite	eq
 8002880:	2301      	moveq	r3, #1
 8002882:	2300      	movne	r3, #0
 8002884:	b2db      	uxtb	r3, r3
}
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <_ZN14HardwareSerial18enableHalfDuplexRxEv>:

void HardwareSerial::enableHalfDuplexRx(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  if (isHalfDuplex()) {
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff ffe7 	bl	800286c <_ZNK14HardwareSerial12isHalfDuplexEv>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d016      	beq.n	80028d2 <_ZN14HardwareSerial18enableHalfDuplexRxEv+0x42>
    // In half-duplex mode we have to wait for all TX characters to
    // be transmitted before we can receive data.
    flush();
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	330c      	adds	r3, #12
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	4798      	blx	r3
    if (!_rx_enabled) {
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80028b6:	f083 0301 	eor.w	r3, r3, #1
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <_ZN14HardwareSerial18enableHalfDuplexRxEv+0x42>
      _rx_enabled = true;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
      uart_enable_rx(&_serial);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3394      	adds	r3, #148	; 0x94
 80028cc:	4618      	mov	r0, r3
 80028ce:	f001 fa61 	bl	8003d94 <uart_enable_rx>
    }
  }
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d201      	bcs.n	80028f4 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	e000      	b.n	80028f6 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80028f4:	687b      	ldr	r3, [r7, #4]
    }
 80028f6:	4618      	mov	r0, r3
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <_ZN5Print5writeEPKc>:
    {
      setWriteError(0);
    }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str)
 8002900:	b590      	push	{r4, r7, lr}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
    {
      if (str == NULL) {
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <_ZN5Print5writeEPKc+0x14>
        return 0;
 8002910:	2300      	movs	r3, #0
 8002912:	e00d      	b.n	8002930 <_ZN5Print5writeEPKc+0x30>
      }
      return write((const uint8_t *)str, strlen(str));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	3304      	adds	r3, #4
 800291a:	681c      	ldr	r4, [r3, #0]
 800291c:	6838      	ldr	r0, [r7, #0]
 800291e:	f7fd fc15 	bl	800014c <strlen>
 8002922:	4603      	mov	r3, r0
 8002924:	461a      	mov	r2, r3
 8002926:	6839      	ldr	r1, [r7, #0]
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	47a0      	blx	r4
 800292c:	4603      	mov	r3, r0
 800292e:	bf00      	nop
    }
 8002930:	4618      	mov	r0, r3
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	bd90      	pop	{r4, r7, pc}

08002938 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overridden by subclasses with buffering
    virtual int availableForWrite()
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
    {
      return 0;
 8002940:	2300      	movs	r3, #0
    }
 8002942:	4618      	mov	r0, r3
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr

0800294c <_ZN5Print5flushEv>:
    size_t println(void);

    int printf(const char *format, ...);
    int printf(const __FlashStringHelper *format, ...);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr

0800295e <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b086      	sub	sp, #24
 8002962:	af00      	add	r7, sp, #0
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]
  while (size--) {
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	1e5a      	subs	r2, r3, #1
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	bf14      	ite	ne
 8002978:	2301      	movne	r3, #1
 800297a:	2300      	moveq	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d016      	beq.n	80029b0 <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) {
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	1c59      	adds	r1, r3, #1
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	4619      	mov	r1, r3
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	4790      	blx	r2
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	bf14      	ite	ne
 800299c:	2301      	movne	r3, #1
 800299e:	2300      	moveq	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <_ZN5Print5writeEPKhj+0x50>
      n++;
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	3301      	adds	r3, #1
 80029aa:	617b      	str	r3, [r7, #20]
  while (size--) {
 80029ac:	e7df      	b.n	800296e <_ZN5Print5writeEPKhj+0x10>
    } else {
      break;
 80029ae:	bf00      	nop
    }
  }
  return n;
 80029b0:	697b      	ldr	r3, [r7, #20]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	6039      	str	r1, [r7, #0]
  return write(str);
 80029c4:	6839      	ldr	r1, [r7, #0]
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff ff9a 	bl	8002900 <_ZN5Print5writeEPKc>
 80029cc:	4603      	mov	r3, r0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <_ZN6Stream9timedReadEv>:

#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait

// private method to read stream with timeout
int Stream::timedRead()
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b084      	sub	sp, #16
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  int c;
  _startMillis = millis();
 80029de:	f000 f8c2 	bl	8002b66 <millis>
 80029e2:	4602      	mov	r2, r0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	60da      	str	r2, [r3, #12]
  do {
    c = read();
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	3314      	adds	r3, #20
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	4798      	blx	r3
 80029f4:	60f8      	str	r0, [r7, #12]
    if (c >= 0) {
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	db01      	blt.n	8002a00 <_ZN6Stream9timedReadEv+0x2a>
      return c;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	e011      	b.n	8002a24 <_ZN6Stream9timedReadEv+0x4e>
    }
  } while (millis() - _startMillis < _timeout);
 8002a00:	f000 f8b1 	bl	8002b66 <millis>
 8002a04:	4602      	mov	r2, r0
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	1ad2      	subs	r2, r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	bf34      	ite	cc
 8002a14:	2301      	movcc	r3, #1
 8002a16:	2300      	movcs	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d000      	beq.n	8002a20 <_ZN6Stream9timedReadEv+0x4a>
  do {
 8002a1e:	e7e3      	b.n	80029e8 <_ZN6Stream9timedReadEv+0x12>
  return -1;     // -1 indicates timeout
 8002a20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  size_t count = 0;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]
  while (count < length) {
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d211      	bcs.n	8002a68 <_ZN6Stream9readBytesEPcj+0x3c>
    int c = timedRead();
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f7ff ffc6 	bl	80029d6 <_ZN6Stream9timedReadEv>
 8002a4a:	6138      	str	r0, [r7, #16]
    if (c < 0) {
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	db09      	blt.n	8002a66 <_ZN6Stream9readBytesEPcj+0x3a>
      break;
    }
    *buffer++ = (char)c;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	60ba      	str	r2, [r7, #8]
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	701a      	strb	r2, [r3, #0]
    count++;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	3301      	adds	r3, #1
 8002a62:	617b      	str	r3, [r7, #20]
  while (count < length) {
 8002a64:	e7ea      	b.n	8002a3c <_ZN6Stream9readBytesEPcj+0x10>
      break;
 8002a66:	bf00      	nop
  }
  return count;
 8002a68:	697b      	ldr	r3, [r7, #20]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b086      	sub	sp, #24
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	607a      	str	r2, [r7, #4]
 8002a7c:	603b      	str	r3, [r7, #0]
 8002a7e:	460b      	mov	r3, r1
 8002a80:	72fb      	strb	r3, [r7, #11]
  if (length < 1) {
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <_ZN6Stream14readBytesUntilEcPcj+0x1a>
    return 0;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	e01b      	b.n	8002ac4 <_ZN6Stream14readBytesUntilEcPcj+0x52>
  }
  size_t index = 0;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]
  while (index < length) {
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d214      	bcs.n	8002ac2 <_ZN6Stream14readBytesUntilEcPcj+0x50>
    int c = timedRead();
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f7ff ff9c 	bl	80029d6 <_ZN6Stream9timedReadEv>
 8002a9e:	6138      	str	r0, [r7, #16]
    if (c < 0 || c == terminator) {
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	db0d      	blt.n	8002ac2 <_ZN6Stream14readBytesUntilEcPcj+0x50>
 8002aa6:	7afb      	ldrb	r3, [r7, #11]
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d009      	beq.n	8002ac2 <_ZN6Stream14readBytesUntilEcPcj+0x50>
      break;
    }
    *buffer++ = (char)c;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	701a      	strb	r2, [r3, #0]
    index++;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	3301      	adds	r3, #1
 8002abe:	617b      	str	r3, [r7, #20]
  while (index < length) {
 8002ac0:	e7e6      	b.n	8002a90 <_ZN6Stream14readBytesUntilEcPcj+0x1e>
  }
  return index; // return number of characters, not including null terminator
 8002ac2:	697b      	ldr	r3, [r7, #20]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	609a      	str	r2, [r3, #8]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4618      	mov	r0, r3
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr

08002ae6 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b082      	sub	sp, #8
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	2203      	movs	r2, #3
 8002b00:	4798      	blx	r3
    }
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4618      	mov	r0, r3
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	bf0c      	ite	eq
 8002b1c:	2301      	moveq	r3, #1
 8002b1e:	2300      	movne	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	4618      	mov	r0, r3
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr

08002b2c <_ZNSt8functionIFvvEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff ffd5 	bl	8002ae6 <_ZNSt14_Function_baseD1Ev>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <_ZNKSt8functionIFvvEEcvbEv>:
       *  @return @c true when this %function object contains a target,
       *  or @c false when it is empty.
       *
       *  This function will not throw an %exception.
       */
      explicit operator bool() const noexcept
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff ffdb 	bl	8002b0c <_ZNKSt14_Function_base8_M_emptyEv>
 8002b56:	4603      	mov	r3, r0
 8002b58:	f083 0301 	eor.w	r3, r3, #1
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <millis>:
#ifdef __cplusplus
extern "C" {
#endif

uint32_t millis(void)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	af00      	add	r7, sp, #0
  // ToDo: ensure no interrupts
  return getCurrentMillis();
 8002b6a:	f000 fa07 	bl	8002f7c <getCurrentMillis>
 8002b6e:	4603      	mov	r3, r0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <_ZL10get_pin_idt>:
  * @brief  This function returns the pin ID function of the HAL PIN definition
  * @param  pin : one of the gpio pin
  * @retval None
  */
static uint8_t get_pin_id(uint16_t pin)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	80fb      	strh	r3, [r7, #6]
  uint8_t id = 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	73fb      	strb	r3, [r7, #15]

  while (pin != 0x0001) {
 8002b82:	88fb      	ldrh	r3, [r7, #6]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d006      	beq.n	8002b96 <_ZL10get_pin_idt+0x22>
    pin = pin >> 1;
 8002b88:	88fb      	ldrh	r3, [r7, #6]
 8002b8a:	105b      	asrs	r3, r3, #1
 8002b8c:	80fb      	strh	r3, [r7, #6]
    id++;
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
 8002b90:	3301      	adds	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
  while (pin != 0x0001) {
 8002b94:	e7f5      	b.n	8002b82 <_ZL10get_pin_idt+0xe>
  }

  return id;
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr
	...

08002ba4 <HAL_GPIO_EXTI_Callback>:
  * @brief This function his called by the HAL if the IRQ is valid
  * @param  GPIO_Pin : one of the gpio pin
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	80fb      	strh	r3, [r7, #6]
  uint8_t irq_id = get_pin_id(GPIO_Pin);
 8002bae:	88fb      	ldrh	r3, [r7, #6]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff ffdf 	bl	8002b74 <_ZL10get_pin_idt>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	73fb      	strb	r3, [r7, #15]

  if (gpio_irq_conf[irq_id].callback != NULL) {
 8002bba:	7bfa      	ldrb	r2, [r7, #15]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4a0c      	ldr	r2, [pc, #48]	; (8002bf8 <HAL_GPIO_EXTI_Callback+0x54>)
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3304      	adds	r3, #4
 8002bca:	2100      	movs	r1, #0
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 f873 	bl	8002cb8 <_ZStneIvJEEbRKSt8functionIFT_DpT0_EEDn>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00a      	beq.n	8002bee <HAL_GPIO_EXTI_Callback+0x4a>
    gpio_irq_conf[irq_id].callback();
 8002bd8:	7bfa      	ldrb	r2, [r7, #15]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4a05      	ldr	r2, [pc, #20]	; (8002bf8 <HAL_GPIO_EXTI_Callback+0x54>)
 8002be4:	4413      	add	r3, r2
 8002be6:	3304      	adds	r3, #4
 8002be8:	4618      	mov	r0, r3
 8002bea:	f000 f872 	bl	8002cd2 <_ZNKSt8functionIFvvEEclEv>
  }
}
 8002bee:	bf00      	nop
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	200001a4 	.word	0x200001a4

08002bfc <EXTI0_IRQHandler>:
  * @brief This function handles external line 0 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002c00:	2001      	movs	r0, #1
 8002c02:	f7fe f95f 	bl	8000ec4 <HAL_GPIO_EXTI_IRQHandler>
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <EXTI1_IRQHandler>:
  * @brief This function handles external line 1 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002c0e:	2002      	movs	r0, #2
 8002c10:	f7fe f958 	bl	8000ec4 <HAL_GPIO_EXTI_IRQHandler>
}
 8002c14:	bf00      	nop
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <EXTI2_IRQHandler>:
  * @brief This function handles external line 2 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI2_IRQHandler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002c1c:	2004      	movs	r0, #4
 8002c1e:	f7fe f951 	bl	8000ec4 <HAL_GPIO_EXTI_IRQHandler>
}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <EXTI3_IRQHandler>:
  * @brief This function handles external line 3 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI3_IRQHandler(void)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002c2a:	2008      	movs	r0, #8
 8002c2c:	f7fe f94a 	bl	8000ec4 <HAL_GPIO_EXTI_IRQHandler>
}
 8002c30:	bf00      	nop
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <EXTI4_IRQHandler>:
  * @brief This function handles external line 4 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI4_IRQHandler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002c38:	2010      	movs	r0, #16
 8002c3a:	f7fe f943 	bl	8000ec4 <HAL_GPIO_EXTI_IRQHandler>
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <EXTI9_5_IRQHandler>:
  * @brief This function handles external line 5 to 9 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI9_5_IRQHandler(void)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b082      	sub	sp, #8
 8002c46:	af00      	add	r7, sp, #0
  uint32_t pin;
  for (pin = GPIO_PIN_5; pin <= GPIO_PIN_9; pin = pin << 1) {
 8002c48:	2320      	movs	r3, #32
 8002c4a:	607b      	str	r3, [r7, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c52:	d808      	bhi.n	8002c66 <EXTI9_5_IRQHandler+0x24>
    HAL_GPIO_EXTI_IRQHandler(pin);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fe f933 	bl	8000ec4 <HAL_GPIO_EXTI_IRQHandler>
  for (pin = GPIO_PIN_5; pin <= GPIO_PIN_9; pin = pin << 1) {
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	607b      	str	r3, [r7, #4]
 8002c64:	e7f2      	b.n	8002c4c <EXTI9_5_IRQHandler+0xa>
  }
}
 8002c66:	bf00      	nop
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <EXTI15_10_IRQHandler>:
  * @brief This function handles external line 10 to 15 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b082      	sub	sp, #8
 8002c72:	af00      	add	r7, sp, #0
  uint32_t pin;
  for (pin = GPIO_PIN_10; pin <= GPIO_PIN_15; pin = pin << 1) {
 8002c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c78:	607b      	str	r3, [r7, #4]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c80:	d808      	bhi.n	8002c94 <EXTI15_10_IRQHandler+0x26>
    HAL_GPIO_EXTI_IRQHandler(pin);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fe f91c 	bl	8000ec4 <HAL_GPIO_EXTI_IRQHandler>
  for (pin = GPIO_PIN_10; pin <= GPIO_PIN_15; pin = pin << 1) {
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	607b      	str	r3, [r7, #4]
 8002c92:	e7f2      	b.n	8002c7a <EXTI15_10_IRQHandler+0xc>
  }
}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <_ZNSt8functionIFvvEEC1EDn>:
      function(nullptr_t) noexcept
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
      : _Function_base() { }
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff ff0f 	bl	8002acc <_ZNSt14_Function_baseC1Ev>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <_ZStneIvJEEbRKSt8functionIFT_DpT0_EEDn>:
   *
   *  This function will not throw an %exception.
   */
  template<typename _Res, typename... _Args>
    inline bool
    operator!=(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
    { return static_cast<bool>(__f); }
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7ff ff3f 	bl	8002b46 <_ZNKSt8functionIFvvEEcvbEv>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <_ZNKSt8functionIFvvEEclEv>:
    function<_Res(_ArgTypes...)>::
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
      if (_M_empty())
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff ff15 	bl	8002b0c <_ZNKSt14_Function_base8_M_emptyEv>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <_ZNKSt8functionIFvvEEclEv+0x1a>
	__throw_bad_function_call();
 8002ce8:	f001 f933 	bl	8003f52 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	4798      	blx	r3
 8002cf6:	bf00      	nop
    }
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <_ZN17gpio_irq_conf_strD1Ev>:
} gpio_irq_conf_str;
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff ff0e 	bl	8002b2c <_ZNSt8functionIFvvEED1Ev>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
	...

08002d1c <_Z41__static_initialization_and_destruction_0ii>:
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
}

#endif /* !STM32MP1xx && !STM32L5xx */
#ifdef __cplusplus
}
 8002d1c:	b590      	push	{r4, r7, lr}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	f040 8087 	bne.w	8002e3c <_Z41__static_initialization_and_destruction_0ii+0x120>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d34:	4293      	cmp	r3, r2
 8002d36:	f040 8081 	bne.w	8002e3c <_Z41__static_initialization_and_destruction_0ii+0x120>
};
 8002d3a:	4c4b      	ldr	r4, [pc, #300]	; (8002e68 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8002d3c:	2306      	movs	r3, #6
 8002d3e:	7023      	strb	r3, [r4, #0]
 8002d40:	1d23      	adds	r3, r4, #4
 8002d42:	2100      	movs	r1, #0
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff ffa9 	bl	8002c9c <_ZNSt8functionIFvvEEC1EDn>
 8002d4a:	3414      	adds	r4, #20
 8002d4c:	2307      	movs	r3, #7
 8002d4e:	7023      	strb	r3, [r4, #0]
 8002d50:	1d23      	adds	r3, r4, #4
 8002d52:	2100      	movs	r1, #0
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff ffa1 	bl	8002c9c <_ZNSt8functionIFvvEEC1EDn>
 8002d5a:	3414      	adds	r4, #20
 8002d5c:	2308      	movs	r3, #8
 8002d5e:	7023      	strb	r3, [r4, #0]
 8002d60:	1d23      	adds	r3, r4, #4
 8002d62:	2100      	movs	r1, #0
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff ff99 	bl	8002c9c <_ZNSt8functionIFvvEEC1EDn>
 8002d6a:	3414      	adds	r4, #20
 8002d6c:	2309      	movs	r3, #9
 8002d6e:	7023      	strb	r3, [r4, #0]
 8002d70:	1d23      	adds	r3, r4, #4
 8002d72:	2100      	movs	r1, #0
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff ff91 	bl	8002c9c <_ZNSt8functionIFvvEEC1EDn>
 8002d7a:	3414      	adds	r4, #20
 8002d7c:	230a      	movs	r3, #10
 8002d7e:	7023      	strb	r3, [r4, #0]
 8002d80:	1d23      	adds	r3, r4, #4
 8002d82:	2100      	movs	r1, #0
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff ff89 	bl	8002c9c <_ZNSt8functionIFvvEEC1EDn>
 8002d8a:	3414      	adds	r4, #20
 8002d8c:	2317      	movs	r3, #23
 8002d8e:	7023      	strb	r3, [r4, #0]
 8002d90:	1d23      	adds	r3, r4, #4
 8002d92:	2100      	movs	r1, #0
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff ff81 	bl	8002c9c <_ZNSt8functionIFvvEEC1EDn>
 8002d9a:	3414      	adds	r4, #20
 8002d9c:	2317      	movs	r3, #23
 8002d9e:	7023      	strb	r3, [r4, #0]
 8002da0:	1d23      	adds	r3, r4, #4
 8002da2:	2100      	movs	r1, #0
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff ff79 	bl	8002c9c <_ZNSt8functionIFvvEEC1EDn>
 8002daa:	3414      	adds	r4, #20
 8002dac:	2317      	movs	r3, #23
 8002dae:	7023      	strb	r3, [r4, #0]
 8002db0:	1d23      	adds	r3, r4, #4
 8002db2:	2100      	movs	r1, #0
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff ff71 	bl	8002c9c <_ZNSt8functionIFvvEEC1EDn>
 8002dba:	3414      	adds	r4, #20
 8002dbc:	2317      	movs	r3, #23
 8002dbe:	7023      	strb	r3, [r4, #0]
 8002dc0:	1d23      	adds	r3, r4, #4
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff ff69 	bl	8002c9c <_ZNSt8functionIFvvEEC1EDn>
 8002dca:	3414      	adds	r4, #20
 8002dcc:	2317      	movs	r3, #23
 8002dce:	7023      	strb	r3, [r4, #0]
 8002dd0:	1d23      	adds	r3, r4, #4
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff ff61 	bl	8002c9c <_ZNSt8functionIFvvEEC1EDn>
 8002dda:	3414      	adds	r4, #20
 8002ddc:	2328      	movs	r3, #40	; 0x28
 8002dde:	7023      	strb	r3, [r4, #0]
 8002de0:	1d23      	adds	r3, r4, #4
 8002de2:	2100      	movs	r1, #0
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff ff59 	bl	8002c9c <_ZNSt8functionIFvvEEC1EDn>
 8002dea:	3414      	adds	r4, #20
 8002dec:	2328      	movs	r3, #40	; 0x28
 8002dee:	7023      	strb	r3, [r4, #0]
 8002df0:	1d23      	adds	r3, r4, #4
 8002df2:	2100      	movs	r1, #0
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff ff51 	bl	8002c9c <_ZNSt8functionIFvvEEC1EDn>
 8002dfa:	3414      	adds	r4, #20
 8002dfc:	2328      	movs	r3, #40	; 0x28
 8002dfe:	7023      	strb	r3, [r4, #0]
 8002e00:	1d23      	adds	r3, r4, #4
 8002e02:	2100      	movs	r1, #0
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff ff49 	bl	8002c9c <_ZNSt8functionIFvvEEC1EDn>
 8002e0a:	3414      	adds	r4, #20
 8002e0c:	2328      	movs	r3, #40	; 0x28
 8002e0e:	7023      	strb	r3, [r4, #0]
 8002e10:	1d23      	adds	r3, r4, #4
 8002e12:	2100      	movs	r1, #0
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff ff41 	bl	8002c9c <_ZNSt8functionIFvvEEC1EDn>
 8002e1a:	3414      	adds	r4, #20
 8002e1c:	2328      	movs	r3, #40	; 0x28
 8002e1e:	7023      	strb	r3, [r4, #0]
 8002e20:	1d23      	adds	r3, r4, #4
 8002e22:	2100      	movs	r1, #0
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff ff39 	bl	8002c9c <_ZNSt8functionIFvvEEC1EDn>
 8002e2a:	f104 0314 	add.w	r3, r4, #20
 8002e2e:	2228      	movs	r2, #40	; 0x28
 8002e30:	701a      	strb	r2, [r3, #0]
 8002e32:	3304      	adds	r3, #4
 8002e34:	2100      	movs	r1, #0
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff ff30 	bl	8002c9c <_ZNSt8functionIFvvEEC1EDn>
static gpio_irq_conf_str gpio_irq_conf[NB_EXTI] = {
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10d      	bne.n	8002e5e <_Z41__static_initialization_and_destruction_0ii+0x142>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d108      	bne.n	8002e5e <_Z41__static_initialization_and_destruction_0ii+0x142>
 8002e4c:	4c07      	ldr	r4, [pc, #28]	; (8002e6c <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8002e4e:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8002e50:	429c      	cmp	r4, r3
 8002e52:	d004      	beq.n	8002e5e <_Z41__static_initialization_and_destruction_0ii+0x142>
 8002e54:	3c14      	subs	r4, #20
 8002e56:	4620      	mov	r0, r4
 8002e58:	f7ff ff51 	bl	8002cfe <_ZN17gpio_irq_conf_strD1Ev>
 8002e5c:	e7f7      	b.n	8002e4e <_Z41__static_initialization_and_destruction_0ii+0x132>
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd90      	pop	{r4, r7, pc}
 8002e66:	bf00      	nop
 8002e68:	200001a4 	.word	0x200001a4
 8002e6c:	200002e4 	.word	0x200002e4

08002e70 <_GLOBAL__sub_I__Z22stm32_interrupt_enableP12GPIO_TypeDeftSt8functionIFvvEEm>:
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002e78:	2001      	movs	r0, #1
 8002e7a:	f7ff ff4f 	bl	8002d1c <_Z41__static_initialization_and_destruction_0ii>
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <_GLOBAL__sub_D__Z22stm32_interrupt_enableP12GPIO_TypeDeftSt8functionIFvvEEm>:
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002e88:	2000      	movs	r0, #0
 8002e8a:	f7ff ff47 	bl	8002d1c <_Z41__static_initialization_and_destruction_0ii>
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <set_GPIO_Port_Clock>:
#endif
};

/* Enable GPIO clock and return GPIO base address */
GPIO_TypeDef *set_GPIO_Port_Clock(uint32_t port_idx)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b089      	sub	sp, #36	; 0x24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  GPIO_TypeDef *gpioPort = 0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61fb      	str	r3, [r7, #28]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d857      	bhi.n	8002f52 <set_GPIO_Port_Clock+0xc2>
 8002ea2:	a201      	add	r2, pc, #4	; (adr r2, 8002ea8 <set_GPIO_Port_Clock+0x18>)
 8002ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea8:	08002ebd 	.word	0x08002ebd
 8002eac:	08002edb 	.word	0x08002edb
 8002eb0:	08002ef9 	.word	0x08002ef9
 8002eb4:	08002f17 	.word	0x08002f17
 8002eb8:	08002f35 	.word	0x08002f35
  switch (port_idx) {
    case PortA:
      gpioPort = (GPIO_TypeDef *)GPIOA_BASE;
 8002ebc:	4b29      	ldr	r3, [pc, #164]	; (8002f64 <set_GPIO_Port_Clock+0xd4>)
 8002ebe:	61fb      	str	r3, [r7, #28]
      __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec0:	4b29      	ldr	r3, [pc, #164]	; (8002f68 <set_GPIO_Port_Clock+0xd8>)
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	4a28      	ldr	r2, [pc, #160]	; (8002f68 <set_GPIO_Port_Clock+0xd8>)
 8002ec6:	f043 0304 	orr.w	r3, r3, #4
 8002eca:	6193      	str	r3, [r2, #24]
 8002ecc:	4b26      	ldr	r3, [pc, #152]	; (8002f68 <set_GPIO_Port_Clock+0xd8>)
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	61bb      	str	r3, [r7, #24]
 8002ed6:	69bb      	ldr	r3, [r7, #24]
      break;
 8002ed8:	e03e      	b.n	8002f58 <set_GPIO_Port_Clock+0xc8>
    case PortB:
      gpioPort = (GPIO_TypeDef *)GPIOB_BASE;
 8002eda:	4b24      	ldr	r3, [pc, #144]	; (8002f6c <set_GPIO_Port_Clock+0xdc>)
 8002edc:	61fb      	str	r3, [r7, #28]
      __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ede:	4b22      	ldr	r3, [pc, #136]	; (8002f68 <set_GPIO_Port_Clock+0xd8>)
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	4a21      	ldr	r2, [pc, #132]	; (8002f68 <set_GPIO_Port_Clock+0xd8>)
 8002ee4:	f043 0308 	orr.w	r3, r3, #8
 8002ee8:	6193      	str	r3, [r2, #24]
 8002eea:	4b1f      	ldr	r3, [pc, #124]	; (8002f68 <set_GPIO_Port_Clock+0xd8>)
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	697b      	ldr	r3, [r7, #20]
      break;
 8002ef6:	e02f      	b.n	8002f58 <set_GPIO_Port_Clock+0xc8>
#if defined GPIOC_BASE
    case PortC:
      gpioPort = (GPIO_TypeDef *)GPIOC_BASE;
 8002ef8:	4b1d      	ldr	r3, [pc, #116]	; (8002f70 <set_GPIO_Port_Clock+0xe0>)
 8002efa:	61fb      	str	r3, [r7, #28]
      __HAL_RCC_GPIOC_CLK_ENABLE();
 8002efc:	4b1a      	ldr	r3, [pc, #104]	; (8002f68 <set_GPIO_Port_Clock+0xd8>)
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	4a19      	ldr	r2, [pc, #100]	; (8002f68 <set_GPIO_Port_Clock+0xd8>)
 8002f02:	f043 0310 	orr.w	r3, r3, #16
 8002f06:	6193      	str	r3, [r2, #24]
 8002f08:	4b17      	ldr	r3, [pc, #92]	; (8002f68 <set_GPIO_Port_Clock+0xd8>)
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	f003 0310 	and.w	r3, r3, #16
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	693b      	ldr	r3, [r7, #16]
      break;
 8002f14:	e020      	b.n	8002f58 <set_GPIO_Port_Clock+0xc8>
#endif
#if defined GPIOD_BASE
    case PortD:
      gpioPort = (GPIO_TypeDef *)GPIOD_BASE;
 8002f16:	4b17      	ldr	r3, [pc, #92]	; (8002f74 <set_GPIO_Port_Clock+0xe4>)
 8002f18:	61fb      	str	r3, [r7, #28]
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f1a:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <set_GPIO_Port_Clock+0xd8>)
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	4a12      	ldr	r2, [pc, #72]	; (8002f68 <set_GPIO_Port_Clock+0xd8>)
 8002f20:	f043 0320 	orr.w	r3, r3, #32
 8002f24:	6193      	str	r3, [r2, #24]
 8002f26:	4b10      	ldr	r3, [pc, #64]	; (8002f68 <set_GPIO_Port_Clock+0xd8>)
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	f003 0320 	and.w	r3, r3, #32
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]
      break;
 8002f32:	e011      	b.n	8002f58 <set_GPIO_Port_Clock+0xc8>
#endif
#if defined GPIOE_BASE
    case PortE:
      gpioPort = (GPIO_TypeDef *)GPIOE_BASE;
 8002f34:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <set_GPIO_Port_Clock+0xe8>)
 8002f36:	61fb      	str	r3, [r7, #28]
      __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f38:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <set_GPIO_Port_Clock+0xd8>)
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	4a0a      	ldr	r2, [pc, #40]	; (8002f68 <set_GPIO_Port_Clock+0xd8>)
 8002f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f42:	6193      	str	r3, [r2, #24]
 8002f44:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <set_GPIO_Port_Clock+0xd8>)
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
      break;
 8002f50:	e002      	b.n	8002f58 <set_GPIO_Port_Clock+0xc8>
      break;
#endif
    default:
      // wrong port number
      //TBD: error management
      gpioPort = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	61fb      	str	r3, [r7, #28]
      break;
 8002f56:	bf00      	nop
  }
  return gpioPort;
 8002f58:	69fb      	ldr	r3, [r7, #28]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3724      	adds	r7, #36	; 0x24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr
 8002f64:	40010800 	.word	0x40010800
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	40010c00 	.word	0x40010c00
 8002f70:	40011000 	.word	0x40011000
 8002f74:	40011400 	.word	0x40011400
 8002f78:	40011800 	.word	0x40011800

08002f7c <getCurrentMillis>:
  * @brief  Function called wto read the current millisecond
  * @param  None
  * @retval None
  */
uint32_t getCurrentMillis(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002f80:	f7fd fbea 	bl	8000758 <HAL_GetTick>
 8002f84:	4603      	mov	r3, r0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <pinF1_DisconnectDebug>:
  AFIO_MISC_DISABLE,
#endif
};

static inline void pinF1_DisconnectDebug(PinName pin)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /** Enable this flag gives the possibility to use debug pins without any risk
    * to lose traces
    */
#ifndef STM32F1_LOCK_DEBUG
  // Enable AFIO clock
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f94:	4b1d      	ldr	r3, [pc, #116]	; (800300c <pinF1_DisconnectDebug+0x80>)
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	4a1c      	ldr	r2, [pc, #112]	; (800300c <pinF1_DisconnectDebug+0x80>)
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	6193      	str	r3, [r2, #24]
 8002fa0:	4b1a      	ldr	r3, [pc, #104]	; (800300c <pinF1_DisconnectDebug+0x80>)
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	68fb      	ldr	r3, [r7, #12]

  // Disconnect JTAG-DP + SW-DP signals.
  // Warning: Need to reconnect under reset
  if ((pin == PA_13) || (pin == PA_14)) {
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b0d      	cmp	r3, #13
 8002fb0:	d002      	beq.n	8002fb8 <pinF1_DisconnectDebug+0x2c>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b0e      	cmp	r3, #14
 8002fb6:	d10d      	bne.n	8002fd4 <pinF1_DisconnectDebug+0x48>
    __HAL_AFIO_REMAP_SWJ_DISABLE(); // JTAG-DP Disabled and SW-DP Disabled
 8002fb8:	4b15      	ldr	r3, [pc, #84]	; (8003010 <pinF1_DisconnectDebug+0x84>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	617b      	str	r3, [r7, #20]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	4a10      	ldr	r2, [pc, #64]	; (8003010 <pinF1_DisconnectDebug+0x84>)
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	6053      	str	r3, [r2, #4]
  }
  if ((pin == PA_15) || (pin == PB_3) || (pin == PB_4)) {
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b0f      	cmp	r3, #15
 8002fd8:	d005      	beq.n	8002fe6 <pinF1_DisconnectDebug+0x5a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b13      	cmp	r3, #19
 8002fde:	d002      	beq.n	8002fe6 <pinF1_DisconnectDebug+0x5a>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b14      	cmp	r3, #20
 8002fe4:	d10d      	bne.n	8003002 <pinF1_DisconnectDebug+0x76>
    __HAL_AFIO_REMAP_SWJ_NOJTAG(); // JTAG-DP Disabled and SW-DP enabled
 8002fe6:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <pinF1_DisconnectDebug+0x84>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ffa:	613b      	str	r3, [r7, #16]
 8002ffc:	4a04      	ldr	r2, [pc, #16]	; (8003010 <pinF1_DisconnectDebug+0x84>)
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	6053      	str	r3, [r2, #4]
  }
#else
  UNUSED(pin);
#endif /* STM32F1_FORCE_DEBUG */
}
 8003002:	bf00      	nop
 8003004:	371c      	adds	r7, #28
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr
 800300c:	40021000 	.word	0x40021000
 8003010:	40010000 	.word	0x40010000

08003014 <pin_SetF1AFPin>:

static inline void pin_SetF1AFPin(uint32_t afnum)
{
 8003014:	b480      	push	{r7}
 8003016:	b0a1      	sub	sp, #132	; 0x84
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  // Enable AFIO clock
  __HAL_RCC_AFIO_CLK_ENABLE();
 800301c:	4b9e      	ldr	r3, [pc, #632]	; (8003298 <pin_SetF1AFPin+0x284>)
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	4a9d      	ldr	r2, [pc, #628]	; (8003298 <pin_SetF1AFPin+0x284>)
 8003022:	f043 0301 	orr.w	r3, r3, #1
 8003026:	6193      	str	r3, [r2, #24]
 8003028:	4b9b      	ldr	r3, [pc, #620]	; (8003298 <pin_SetF1AFPin+0x284>)
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3b01      	subs	r3, #1
 8003038:	2b23      	cmp	r3, #35	; 0x23
 800303a:	f200 8222 	bhi.w	8003482 <pin_SetF1AFPin+0x46e>
 800303e:	a201      	add	r2, pc, #4	; (adr r2, 8003044 <pin_SetF1AFPin+0x30>)
 8003040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003044:	080030d5 	.word	0x080030d5
 8003048:	080030f3 	.word	0x080030f3
 800304c:	08003111 	.word	0x08003111
 8003050:	0800312f 	.word	0x0800312f
 8003054:	0800314d 	.word	0x0800314d
 8003058:	0800316b 	.word	0x0800316b
 800305c:	08003189 	.word	0x08003189
 8003060:	080031a7 	.word	0x080031a7
 8003064:	080031c5 	.word	0x080031c5
 8003068:	080031eb 	.word	0x080031eb
 800306c:	08003211 	.word	0x08003211
 8003070:	0800322f 	.word	0x0800322f
 8003074:	08003255 	.word	0x08003255
 8003078:	0800327b 	.word	0x0800327b
 800307c:	080032a1 	.word	0x080032a1
 8003080:	080032c7 	.word	0x080032c7
 8003084:	080032ed 	.word	0x080032ed
 8003088:	08003313 	.word	0x08003313
 800308c:	08003331 	.word	0x08003331
 8003090:	08003357 	.word	0x08003357
 8003094:	0800337d 	.word	0x0800337d
 8003098:	0800339b 	.word	0x0800339b
 800309c:	080033b9 	.word	0x080033b9
 80030a0:	08003483 	.word	0x08003483
 80030a4:	08003483 	.word	0x08003483
 80030a8:	08003483 	.word	0x08003483
 80030ac:	080033d7 	.word	0x080033d7
 80030b0:	080033f5 	.word	0x080033f5
 80030b4:	08003483 	.word	0x08003483
 80030b8:	08003483 	.word	0x08003483
 80030bc:	08003483 	.word	0x08003483
 80030c0:	08003483 	.word	0x08003483
 80030c4:	08003413 	.word	0x08003413
 80030c8:	08003429 	.word	0x08003429
 80030cc:	08003447 	.word	0x08003447
 80030d0:	08003465 	.word	0x08003465

  switch (afnum) {
    case AFIO_SPI1_ENABLE:
      __HAL_AFIO_REMAP_SPI1_ENABLE();
 80030d4:	4b71      	ldr	r3, [pc, #452]	; (800329c <pin_SetF1AFPin+0x288>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	4a6c      	ldr	r2, [pc, #432]	; (800329c <pin_SetF1AFPin+0x288>)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6053      	str	r3, [r2, #4]
      break;
 80030f0:	e1c8      	b.n	8003484 <pin_SetF1AFPin+0x470>
    case AFIO_SPI1_DISABLE:
      __HAL_AFIO_REMAP_SPI1_DISABLE();
 80030f2:	4b6a      	ldr	r3, [pc, #424]	; (800329c <pin_SetF1AFPin+0x288>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	613b      	str	r3, [r7, #16]
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80030fe:	613b      	str	r3, [r7, #16]
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	f023 0301 	bic.w	r3, r3, #1
 8003106:	613b      	str	r3, [r7, #16]
 8003108:	4a64      	ldr	r2, [pc, #400]	; (800329c <pin_SetF1AFPin+0x288>)
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	6053      	str	r3, [r2, #4]
      break;
 800310e:	e1b9      	b.n	8003484 <pin_SetF1AFPin+0x470>
    case AFIO_I2C1_ENABLE:
      __HAL_AFIO_REMAP_I2C1_ENABLE();
 8003110:	4b62      	ldr	r3, [pc, #392]	; (800329c <pin_SetF1AFPin+0x288>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f043 0302 	orr.w	r3, r3, #2
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	4a5d      	ldr	r2, [pc, #372]	; (800329c <pin_SetF1AFPin+0x288>)
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	6053      	str	r3, [r2, #4]
      break;
 800312c:	e1aa      	b.n	8003484 <pin_SetF1AFPin+0x470>
    case AFIO_I2C1_DISABLE:
      __HAL_AFIO_REMAP_I2C1_DISABLE();
 800312e:	4b5b      	ldr	r3, [pc, #364]	; (800329c <pin_SetF1AFPin+0x288>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	61bb      	str	r3, [r7, #24]
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800313a:	61bb      	str	r3, [r7, #24]
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	f023 0302 	bic.w	r3, r3, #2
 8003142:	61bb      	str	r3, [r7, #24]
 8003144:	4a55      	ldr	r2, [pc, #340]	; (800329c <pin_SetF1AFPin+0x288>)
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	6053      	str	r3, [r2, #4]
      break;
 800314a:	e19b      	b.n	8003484 <pin_SetF1AFPin+0x470>
    case AFIO_USART1_ENABLE:
      __HAL_AFIO_REMAP_USART1_ENABLE();
 800314c:	4b53      	ldr	r3, [pc, #332]	; (800329c <pin_SetF1AFPin+0x288>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	61fb      	str	r3, [r7, #28]
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003158:	61fb      	str	r3, [r7, #28]
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	f043 0304 	orr.w	r3, r3, #4
 8003160:	61fb      	str	r3, [r7, #28]
 8003162:	4a4e      	ldr	r2, [pc, #312]	; (800329c <pin_SetF1AFPin+0x288>)
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	6053      	str	r3, [r2, #4]
      break;
 8003168:	e18c      	b.n	8003484 <pin_SetF1AFPin+0x470>
    case AFIO_USART1_DISABLE:
      __HAL_AFIO_REMAP_USART1_DISABLE();
 800316a:	4b4c      	ldr	r3, [pc, #304]	; (800329c <pin_SetF1AFPin+0x288>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	623b      	str	r3, [r7, #32]
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003176:	623b      	str	r3, [r7, #32]
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	f023 0304 	bic.w	r3, r3, #4
 800317e:	623b      	str	r3, [r7, #32]
 8003180:	4a46      	ldr	r2, [pc, #280]	; (800329c <pin_SetF1AFPin+0x288>)
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	6053      	str	r3, [r2, #4]
      break;
 8003186:	e17d      	b.n	8003484 <pin_SetF1AFPin+0x470>
    case AFIO_USART2_ENABLE:
      __HAL_AFIO_REMAP_USART2_ENABLE();
 8003188:	4b44      	ldr	r3, [pc, #272]	; (800329c <pin_SetF1AFPin+0x288>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	f043 0308 	orr.w	r3, r3, #8
 800319c:	627b      	str	r3, [r7, #36]	; 0x24
 800319e:	4a3f      	ldr	r2, [pc, #252]	; (800329c <pin_SetF1AFPin+0x288>)
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	6053      	str	r3, [r2, #4]
      break;
 80031a4:	e16e      	b.n	8003484 <pin_SetF1AFPin+0x470>
    case AFIO_USART2_DISABLE:
      __HAL_AFIO_REMAP_USART2_DISABLE();
 80031a6:	4b3d      	ldr	r3, [pc, #244]	; (800329c <pin_SetF1AFPin+0x288>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ae:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80031b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80031b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b6:	f023 0308 	bic.w	r3, r3, #8
 80031ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80031bc:	4a37      	ldr	r2, [pc, #220]	; (800329c <pin_SetF1AFPin+0x288>)
 80031be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c0:	6053      	str	r3, [r2, #4]
      break;
 80031c2:	e15f      	b.n	8003484 <pin_SetF1AFPin+0x470>
#if defined(AFIO_MAPR_USART3_REMAP)
    case AFIO_USART3_ENABLE:
      __HAL_AFIO_REMAP_USART3_ENABLE();
 80031c4:	4b35      	ldr	r3, [pc, #212]	; (800329c <pin_SetF1AFPin+0x288>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031cc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80031d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80031d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031dc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80031e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031e2:	4a2e      	ldr	r2, [pc, #184]	; (800329c <pin_SetF1AFPin+0x288>)
 80031e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e6:	6053      	str	r3, [r2, #4]
      break;
 80031e8:	e14c      	b.n	8003484 <pin_SetF1AFPin+0x470>
    case AFIO_USART3_PARTIAL:
      __HAL_AFIO_REMAP_USART3_PARTIAL();
 80031ea:	4b2c      	ldr	r3, [pc, #176]	; (800329c <pin_SetF1AFPin+0x288>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	633b      	str	r3, [r7, #48]	; 0x30
 80031f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80031f6:	633b      	str	r3, [r7, #48]	; 0x30
 80031f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80031fe:	633b      	str	r3, [r7, #48]	; 0x30
 8003200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003202:	f043 0310 	orr.w	r3, r3, #16
 8003206:	633b      	str	r3, [r7, #48]	; 0x30
 8003208:	4a24      	ldr	r2, [pc, #144]	; (800329c <pin_SetF1AFPin+0x288>)
 800320a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320c:	6053      	str	r3, [r2, #4]
      break;
 800320e:	e139      	b.n	8003484 <pin_SetF1AFPin+0x470>
    case AFIO_USART3_DISABLE:
      __HAL_AFIO_REMAP_USART3_DISABLE();
 8003210:	4b22      	ldr	r3, [pc, #136]	; (800329c <pin_SetF1AFPin+0x288>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	637b      	str	r3, [r7, #52]	; 0x34
 8003216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003218:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800321c:	637b      	str	r3, [r7, #52]	; 0x34
 800321e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003220:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003224:	637b      	str	r3, [r7, #52]	; 0x34
 8003226:	4a1d      	ldr	r2, [pc, #116]	; (800329c <pin_SetF1AFPin+0x288>)
 8003228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800322a:	6053      	str	r3, [r2, #4]
      break;
 800322c:	e12a      	b.n	8003484 <pin_SetF1AFPin+0x470>
#endif
    case AFIO_TIM1_ENABLE:
      __HAL_AFIO_REMAP_TIM1_ENABLE();
 800322e:	4b1b      	ldr	r3, [pc, #108]	; (800329c <pin_SetF1AFPin+0x288>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	63bb      	str	r3, [r7, #56]	; 0x38
 8003234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003236:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800323a:	63bb      	str	r3, [r7, #56]	; 0x38
 800323c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003242:	63bb      	str	r3, [r7, #56]	; 0x38
 8003244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003246:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800324a:	63bb      	str	r3, [r7, #56]	; 0x38
 800324c:	4a13      	ldr	r2, [pc, #76]	; (800329c <pin_SetF1AFPin+0x288>)
 800324e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003250:	6053      	str	r3, [r2, #4]
      break;
 8003252:	e117      	b.n	8003484 <pin_SetF1AFPin+0x470>
    case AFIO_TIM1_PARTIAL:
      __HAL_AFIO_REMAP_TIM1_PARTIAL();
 8003254:	4b11      	ldr	r3, [pc, #68]	; (800329c <pin_SetF1AFPin+0x288>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	63fb      	str	r3, [r7, #60]	; 0x3c
 800325a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800325c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003260:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003264:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003268:	63fb      	str	r3, [r7, #60]	; 0x3c
 800326a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800326c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003270:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003272:	4a0a      	ldr	r2, [pc, #40]	; (800329c <pin_SetF1AFPin+0x288>)
 8003274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003276:	6053      	str	r3, [r2, #4]
      break;
 8003278:	e104      	b.n	8003484 <pin_SetF1AFPin+0x470>
    case AFIO_TIM1_DISABLE:
      __HAL_AFIO_REMAP_TIM1_DISABLE();
 800327a:	4b08      	ldr	r3, [pc, #32]	; (800329c <pin_SetF1AFPin+0x288>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	643b      	str	r3, [r7, #64]	; 0x40
 8003280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003282:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003286:	643b      	str	r3, [r7, #64]	; 0x40
 8003288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800328a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800328e:	643b      	str	r3, [r7, #64]	; 0x40
 8003290:	4a02      	ldr	r2, [pc, #8]	; (800329c <pin_SetF1AFPin+0x288>)
 8003292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003294:	6053      	str	r3, [r2, #4]
      break;
 8003296:	e0f5      	b.n	8003484 <pin_SetF1AFPin+0x470>
 8003298:	40021000 	.word	0x40021000
 800329c:	40010000 	.word	0x40010000
    case AFIO_TIM2_ENABLE:
      __HAL_AFIO_REMAP_TIM2_ENABLE();
 80032a0:	4b7b      	ldr	r3, [pc, #492]	; (8003490 <pin_SetF1AFPin+0x47c>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	647b      	str	r3, [r7, #68]	; 0x44
 80032a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ac:	647b      	str	r3, [r7, #68]	; 0x44
 80032ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032b0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80032b4:	647b      	str	r3, [r7, #68]	; 0x44
 80032b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032b8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80032bc:	647b      	str	r3, [r7, #68]	; 0x44
 80032be:	4a74      	ldr	r2, [pc, #464]	; (8003490 <pin_SetF1AFPin+0x47c>)
 80032c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032c2:	6053      	str	r3, [r2, #4]
      break;
 80032c4:	e0de      	b.n	8003484 <pin_SetF1AFPin+0x470>
    case AFIO_TIM2_PARTIAL_2:
      __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80032c6:	4b72      	ldr	r3, [pc, #456]	; (8003490 <pin_SetF1AFPin+0x47c>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80032cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80032d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032d6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80032da:	64bb      	str	r3, [r7, #72]	; 0x48
 80032dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80032e4:	4a6a      	ldr	r2, [pc, #424]	; (8003490 <pin_SetF1AFPin+0x47c>)
 80032e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032e8:	6053      	str	r3, [r2, #4]
      break;
 80032ea:	e0cb      	b.n	8003484 <pin_SetF1AFPin+0x470>
    case AFIO_TIM2_PARTIAL_1:
      __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80032ec:	4b68      	ldr	r3, [pc, #416]	; (8003490 <pin_SetF1AFPin+0x47c>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032fc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003300:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003308:	64fb      	str	r3, [r7, #76]	; 0x4c
 800330a:	4a61      	ldr	r2, [pc, #388]	; (8003490 <pin_SetF1AFPin+0x47c>)
 800330c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800330e:	6053      	str	r3, [r2, #4]
      break;
 8003310:	e0b8      	b.n	8003484 <pin_SetF1AFPin+0x470>
    case AFIO_TIM2_DISABLE:
      __HAL_AFIO_REMAP_TIM2_DISABLE();
 8003312:	4b5f      	ldr	r3, [pc, #380]	; (8003490 <pin_SetF1AFPin+0x47c>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	653b      	str	r3, [r7, #80]	; 0x50
 8003318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800331a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800331e:	653b      	str	r3, [r7, #80]	; 0x50
 8003320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003322:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003326:	653b      	str	r3, [r7, #80]	; 0x50
 8003328:	4a59      	ldr	r2, [pc, #356]	; (8003490 <pin_SetF1AFPin+0x47c>)
 800332a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800332c:	6053      	str	r3, [r2, #4]
      break;
 800332e:	e0a9      	b.n	8003484 <pin_SetF1AFPin+0x470>
    case AFIO_TIM3_ENABLE:
      __HAL_AFIO_REMAP_TIM3_ENABLE();
 8003330:	4b57      	ldr	r3, [pc, #348]	; (8003490 <pin_SetF1AFPin+0x47c>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	657b      	str	r3, [r7, #84]	; 0x54
 8003336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003338:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800333c:	657b      	str	r3, [r7, #84]	; 0x54
 800333e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003340:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003344:	657b      	str	r3, [r7, #84]	; 0x54
 8003346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003348:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800334c:	657b      	str	r3, [r7, #84]	; 0x54
 800334e:	4a50      	ldr	r2, [pc, #320]	; (8003490 <pin_SetF1AFPin+0x47c>)
 8003350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003352:	6053      	str	r3, [r2, #4]
      break;
 8003354:	e096      	b.n	8003484 <pin_SetF1AFPin+0x470>
    case AFIO_TIM3_PARTIAL:
      __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8003356:	4b4e      	ldr	r3, [pc, #312]	; (8003490 <pin_SetF1AFPin+0x47c>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	65bb      	str	r3, [r7, #88]	; 0x58
 800335c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800335e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003362:	65bb      	str	r3, [r7, #88]	; 0x58
 8003364:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003366:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800336a:	65bb      	str	r3, [r7, #88]	; 0x58
 800336c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800336e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003372:	65bb      	str	r3, [r7, #88]	; 0x58
 8003374:	4a46      	ldr	r2, [pc, #280]	; (8003490 <pin_SetF1AFPin+0x47c>)
 8003376:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003378:	6053      	str	r3, [r2, #4]
      break;
 800337a:	e083      	b.n	8003484 <pin_SetF1AFPin+0x470>
    case AFIO_TIM3_DISABLE:
      __HAL_AFIO_REMAP_TIM3_DISABLE();
 800337c:	4b44      	ldr	r3, [pc, #272]	; (8003490 <pin_SetF1AFPin+0x47c>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003384:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003388:	65fb      	str	r3, [r7, #92]	; 0x5c
 800338a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800338c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003390:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003392:	4a3f      	ldr	r2, [pc, #252]	; (8003490 <pin_SetF1AFPin+0x47c>)
 8003394:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003396:	6053      	str	r3, [r2, #4]
      break;
 8003398:	e074      	b.n	8003484 <pin_SetF1AFPin+0x470>
#if defined(AFIO_MAPR_TIM4_REMAP)
    case AFIO_TIM4_ENABLE:
      __HAL_AFIO_REMAP_TIM4_ENABLE();
 800339a:	4b3d      	ldr	r3, [pc, #244]	; (8003490 <pin_SetF1AFPin+0x47c>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	663b      	str	r3, [r7, #96]	; 0x60
 80033a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033a2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80033a6:	663b      	str	r3, [r7, #96]	; 0x60
 80033a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033ae:	663b      	str	r3, [r7, #96]	; 0x60
 80033b0:	4a37      	ldr	r2, [pc, #220]	; (8003490 <pin_SetF1AFPin+0x47c>)
 80033b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033b4:	6053      	str	r3, [r2, #4]
      break;
 80033b6:	e065      	b.n	8003484 <pin_SetF1AFPin+0x470>
    case AFIO_TIM4_DISABLE:
      __HAL_AFIO_REMAP_TIM4_DISABLE();
 80033b8:	4b35      	ldr	r3, [pc, #212]	; (8003490 <pin_SetF1AFPin+0x47c>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	667b      	str	r3, [r7, #100]	; 0x64
 80033be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033c0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80033c4:	667b      	str	r3, [r7, #100]	; 0x64
 80033c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033cc:	667b      	str	r3, [r7, #100]	; 0x64
 80033ce:	4a30      	ldr	r2, [pc, #192]	; (8003490 <pin_SetF1AFPin+0x47c>)
 80033d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033d2:	6053      	str	r3, [r2, #4]
      break;
 80033d4:	e056      	b.n	8003484 <pin_SetF1AFPin+0x470>
    case AFIO_CAN1_3:
      __HAL_AFIO_REMAP_CAN1_3();
      break;
#endif
    case AFIO_PD01_ENABLE:
      __HAL_AFIO_REMAP_PD01_ENABLE();
 80033d6:	4b2e      	ldr	r3, [pc, #184]	; (8003490 <pin_SetF1AFPin+0x47c>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	66bb      	str	r3, [r7, #104]	; 0x68
 80033dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033de:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80033e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80033e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80033ec:	4a28      	ldr	r2, [pc, #160]	; (8003490 <pin_SetF1AFPin+0x47c>)
 80033ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033f0:	6053      	str	r3, [r2, #4]
      break;
 80033f2:	e047      	b.n	8003484 <pin_SetF1AFPin+0x470>
    case AFIO_PD01_DISABLE:
      __HAL_AFIO_REMAP_PD01_DISABLE();
 80033f4:	4b26      	ldr	r3, [pc, #152]	; (8003490 <pin_SetF1AFPin+0x47c>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003400:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003404:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003408:	66fb      	str	r3, [r7, #108]	; 0x6c
 800340a:	4a21      	ldr	r2, [pc, #132]	; (8003490 <pin_SetF1AFPin+0x47c>)
 800340c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800340e:	6053      	str	r3, [r2, #4]
      break;
 8003410:	e038      	b.n	8003484 <pin_SetF1AFPin+0x470>
    case AFIO_ADC2_ETRGREG_DISABLE:
      __HAL_AFIO_REMAP_ADC2_ETRGREG_DISABLE();
      break;
#endif
    case AFIO_SWJ_ENABLE:
      __HAL_AFIO_REMAP_SWJ_ENABLE();
 8003412:	4b1f      	ldr	r3, [pc, #124]	; (8003490 <pin_SetF1AFPin+0x47c>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	673b      	str	r3, [r7, #112]	; 0x70
 8003418:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800341a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800341e:	673b      	str	r3, [r7, #112]	; 0x70
 8003420:	4a1b      	ldr	r2, [pc, #108]	; (8003490 <pin_SetF1AFPin+0x47c>)
 8003422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003424:	6053      	str	r3, [r2, #4]
      break;
 8003426:	e02d      	b.n	8003484 <pin_SetF1AFPin+0x470>
    case AFIO_SWJ_NONJTRST:
      __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8003428:	4b19      	ldr	r3, [pc, #100]	; (8003490 <pin_SetF1AFPin+0x47c>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	677b      	str	r3, [r7, #116]	; 0x74
 800342e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003430:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003434:	677b      	str	r3, [r7, #116]	; 0x74
 8003436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003438:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800343c:	677b      	str	r3, [r7, #116]	; 0x74
 800343e:	4a14      	ldr	r2, [pc, #80]	; (8003490 <pin_SetF1AFPin+0x47c>)
 8003440:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003442:	6053      	str	r3, [r2, #4]
      break;
 8003444:	e01e      	b.n	8003484 <pin_SetF1AFPin+0x470>
    case AFIO_SWJ_NOJTAG:
      __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003446:	4b12      	ldr	r3, [pc, #72]	; (8003490 <pin_SetF1AFPin+0x47c>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	67bb      	str	r3, [r7, #120]	; 0x78
 800344c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800344e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003452:	67bb      	str	r3, [r7, #120]	; 0x78
 8003454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003456:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800345a:	67bb      	str	r3, [r7, #120]	; 0x78
 800345c:	4a0c      	ldr	r2, [pc, #48]	; (8003490 <pin_SetF1AFPin+0x47c>)
 800345e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003460:	6053      	str	r3, [r2, #4]
      break;
 8003462:	e00f      	b.n	8003484 <pin_SetF1AFPin+0x470>
    case AFIO_SWJ_DISABLE:
      __HAL_AFIO_REMAP_SWJ_DISABLE();
 8003464:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <pin_SetF1AFPin+0x47c>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	67fb      	str	r3, [r7, #124]	; 0x7c
 800346a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800346c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003470:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003472:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003474:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003478:	67fb      	str	r3, [r7, #124]	; 0x7c
 800347a:	4a05      	ldr	r2, [pc, #20]	; (8003490 <pin_SetF1AFPin+0x47c>)
 800347c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800347e:	6053      	str	r3, [r2, #4]
      break;
 8003480:	e000      	b.n	8003484 <pin_SetF1AFPin+0x470>
      __HAL_AFIO_REMAP_MISC_DISABLE();
      break;
#endif
    default:
    case AFIO_NONE:
      break;
 8003482:	bf00      	nop
  }
}
 8003484:	bf00      	nop
 8003486:	3784      	adds	r7, #132	; 0x84
 8003488:	46bd      	mov	sp, r7
 800348a:	bc80      	pop	{r7}
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	40010000 	.word	0x40010000

08003494 <hsem_lock>:
 * @param  semID: Semaphore id used to identify which peripheral to protect
 * @param  retry: number of retry
 * @retval None
 */
static inline void hsem_lock(uint32_t semID, uint32_t retry)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  }
#else
  UNUSED(semID);
  UNUSED(retry);
#endif /* STM32MP1xx || STM32WBxx */
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr

080034a8 <hsem_unlock>:
 * @brief  hsem_unlock released a previously-acquired semaphore
 * @param  semID Semaphore id used to identify which peripheral to release
 * @retval None
 */
static inline void hsem_unlock(uint32_t semID)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
    LL_HSEM_ReleaseLock(HSEM, semID, 0);
  }
#else
  UNUSED(semID);
#endif /* STM32MP1xx || STM32WBxx */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr

080034ba <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80034ba:	b490      	push	{r4, r7}
 80034bc:	b088      	sub	sp, #32
 80034be:	af00      	add	r7, sp, #0
 80034c0:	60f8      	str	r0, [r7, #12]
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	461a      	mov	r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	0e1b      	lsrs	r3, r3, #24
 80034ce:	4413      	add	r3, r2
 80034d0:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80034d2:	6822      	ldr	r2, [r4, #0]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	fa93 f3a3 	rbit	r3, r3
 80034de:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	fab3 f383 	clz	r3, r3
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	210f      	movs	r1, #15
 80034ec:	fa01 f303 	lsl.w	r3, r1, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	401a      	ands	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	fa93 f3a3 	rbit	r3, r3
 80034fe:	61bb      	str	r3, [r7, #24]
  return result;
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	fab3 f383 	clz	r3, r3
 8003506:	b2db      	uxtb	r3, r3
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	fa01 f303 	lsl.w	r3, r1, r3
 8003510:	4313      	orrs	r3, r2
 8003512:	6023      	str	r3, [r4, #0]
}
 8003514:	bf00      	nop
 8003516:	3720      	adds	r7, #32
 8003518:	46bd      	mov	sp, r7
 800351a:	bc90      	pop	{r4, r7}
 800351c:	4770      	bx	lr

0800351e <LL_GPIO_GetPinMode>:
  *         @arg @ref LL_GPIO_MODE_INPUT
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  */
__STATIC_INLINE uint32_t LL_GPIO_GetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin)
{
 800351e:	b490      	push	{r4, r7}
 8003520:	b086      	sub	sp, #24
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
 8003526:	6039      	str	r1, [r7, #0]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	461a      	mov	r2, r3
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	0e1b      	lsrs	r3, r3, #24
 8003530:	4413      	add	r3, r2
 8003532:	461c      	mov	r4, r3
  return (READ_BIT(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U))) >> (POSITION_VAL(Pin) * 4U));
 8003534:	6822      	ldr	r2, [r4, #0]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	fa93 f3a3 	rbit	r3, r3
 8003540:	60bb      	str	r3, [r7, #8]
  return result;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	fab3 f383 	clz	r3, r3
 8003548:	b2db      	uxtb	r3, r3
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	210f      	movs	r1, #15
 800354e:	fa01 f303 	lsl.w	r3, r1, r3
 8003552:	401a      	ands	r2, r3
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	fa93 f3a3 	rbit	r3, r3
 800355e:	613b      	str	r3, [r7, #16]
  return result;
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	fab3 f383 	clz	r3, r3
 8003566:	b2db      	uxtb	r3, r3
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	fa22 f303 	lsr.w	r3, r2, r3
}
 800356e:	4618      	mov	r0, r3
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bc90      	pop	{r4, r7}
 8003576:	4770      	bx	lr

08003578 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8003578:	b490      	push	{r4, r7}
 800357a:	b088      	sub	sp, #32
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	461a      	mov	r2, r3
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	0e1b      	lsrs	r3, r3, #24
 800358c:	4413      	add	r3, r2
 800358e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8003590:	6822      	ldr	r2, [r4, #0]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	fa93 f3a3 	rbit	r3, r3
 800359c:	613b      	str	r3, [r7, #16]
  return result;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	fab3 f383 	clz	r3, r3
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	2103      	movs	r1, #3
 80035aa:	fa01 f303 	lsl.w	r3, r1, r3
 80035ae:	43db      	mvns	r3, r3
 80035b0:	401a      	ands	r2, r3
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	fa93 f3a3 	rbit	r3, r3
 80035bc:	61bb      	str	r3, [r7, #24]
  return result;
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	fab3 f383 	clz	r3, r3
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	fa01 f303 	lsl.w	r3, r1, r3
 80035ce:	4313      	orrs	r3, r2
 80035d0:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 80035d2:	bf00      	nop
 80035d4:	3720      	adds	r7, #32
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc90      	pop	{r4, r7}
 80035da:	4770      	bx	lr

080035dc <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 80035dc:	b490      	push	{r4, r7}
 80035de:	b088      	sub	sp, #32
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	461a      	mov	r2, r3
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	0e1b      	lsrs	r3, r3, #24
 80035f0:	4413      	add	r3, r2
 80035f2:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80035f4:	6822      	ldr	r2, [r4, #0]
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	fa93 f3a3 	rbit	r3, r3
 8003600:	613b      	str	r3, [r7, #16]
  return result;
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	fab3 f383 	clz	r3, r3
 8003608:	b2db      	uxtb	r3, r3
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	2104      	movs	r1, #4
 800360e:	fa01 f303 	lsl.w	r3, r1, r3
 8003612:	43db      	mvns	r3, r3
 8003614:	401a      	ands	r2, r3
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	fa93 f3a3 	rbit	r3, r3
 8003620:	61bb      	str	r3, [r7, #24]
  return result;
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	fab3 f383 	clz	r3, r3
 8003628:	b2db      	uxtb	r3, r3
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	fa01 f303 	lsl.w	r3, r1, r3
 8003632:	4313      	orrs	r3, r2
 8003634:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 8003636:	bf00      	nop
 8003638:	3720      	adds	r7, #32
 800363a:	46bd      	mov	sp, r7
 800363c:	bc90      	pop	{r4, r7}
 800363e:	4770      	bx	lr

08003640 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	0a1b      	lsrs	r3, r3, #8
 8003654:	43db      	mvns	r3, r3
 8003656:	401a      	ands	r2, r3
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	0a1b      	lsrs	r3, r3, #8
 800365c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	fa93 f3a3 	rbit	r3, r3
 8003664:	613b      	str	r3, [r7, #16]
  return result;
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	fab3 f383 	clz	r3, r3
 800366c:	b2db      	uxtb	r3, r3
 800366e:	4619      	mov	r1, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	408b      	lsls	r3, r1
 8003674:	431a      	orrs	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	60da      	str	r2, [r3, #12]
}
 800367a:	bf00      	nop
 800367c:	371c      	adds	r7, #28
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr

08003684 <pin_DisconnectDebug>:
#include "PinAF_STM32F1.h"
#include "lock_resource.h"
#include "stm32yyxx_ll_gpio.h"

static inline void pin_DisconnectDebug(PinName pin)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
#ifdef STM32F1xx
  pinF1_DisconnectDebug(pin);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7ff fc7d 	bl	8002f8c <pinF1_DisconnectDebug>
#else
  UNUSED(pin);
#endif /* STM32F1xx */
}
 8003692:	bf00      	nop
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <pin_PullConfig>:

static inline void pin_PullConfig(GPIO_TypeDef *gpio, uint32_t ll_pin, uint32_t pull_config)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b086      	sub	sp, #24
 800369e:	af00      	add	r7, sp, #0
 80036a0:	60f8      	str	r0, [r7, #12]
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	607a      	str	r2, [r7, #4]
#ifdef STM32F1xx
  uint32_t function = LL_GPIO_GetPinMode(gpio, ll_pin);
 80036a6:	68b9      	ldr	r1, [r7, #8]
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f7ff ff38 	bl	800351e <LL_GPIO_GetPinMode>
 80036ae:	6178      	str	r0, [r7, #20]
#endif
  hsem_lock(CFG_HW_GPIO_SEMID, HSEM_LOCK_DEFAULT_RETRY);
 80036b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80036b4:	2001      	movs	r0, #1
 80036b6:	f7ff feed 	bl	8003494 <hsem_lock>
  switch (pull_config) {
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d003      	beq.n	80036c8 <pin_PullConfig+0x2e>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d00e      	beq.n	80036e4 <pin_PullConfig+0x4a>
 80036c6:	e01b      	b.n	8003700 <pin_PullConfig+0x66>
    case GPIO_PULLUP:
#ifdef STM32F1xx
      if (function == LL_GPIO_MODE_FLOATING) {
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d104      	bne.n	80036d8 <pin_PullConfig+0x3e>
        LL_GPIO_SetPinMode(gpio, ll_pin, LL_GPIO_MODE_INPUT);
 80036ce:	2208      	movs	r2, #8
 80036d0:	68b9      	ldr	r1, [r7, #8]
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f7ff fef1 	bl	80034ba <LL_GPIO_SetPinMode>
      }
#endif
      LL_GPIO_SetPinPull(gpio, ll_pin, LL_GPIO_PULL_UP);
 80036d8:	2201      	movs	r2, #1
 80036da:	68b9      	ldr	r1, [r7, #8]
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f7ff ffaf 	bl	8003640 <LL_GPIO_SetPinPull>
      break;
 80036e2:	e016      	b.n	8003712 <pin_PullConfig+0x78>
    case GPIO_PULLDOWN:
#ifdef STM32F1xx
      if (function == LL_GPIO_MODE_FLOATING) {
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d104      	bne.n	80036f4 <pin_PullConfig+0x5a>
        LL_GPIO_SetPinMode(gpio, ll_pin, LL_GPIO_MODE_INPUT);
 80036ea:	2208      	movs	r2, #8
 80036ec:	68b9      	ldr	r1, [r7, #8]
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f7ff fee3 	bl	80034ba <LL_GPIO_SetPinMode>
      }
#endif
      LL_GPIO_SetPinPull(gpio, ll_pin, LL_GPIO_PULL_DOWN);
 80036f4:	2200      	movs	r2, #0
 80036f6:	68b9      	ldr	r1, [r7, #8]
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f7ff ffa1 	bl	8003640 <LL_GPIO_SetPinPull>
      break;
 80036fe:	e008      	b.n	8003712 <pin_PullConfig+0x78>
    default:
#ifdef STM32F1xx
      /*  Input+NoPull = Floating for F1 family */
      if (function == LL_GPIO_MODE_INPUT) {
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	2b08      	cmp	r3, #8
 8003704:	d104      	bne.n	8003710 <pin_PullConfig+0x76>
        LL_GPIO_SetPinMode(gpio, ll_pin, LL_GPIO_MODE_FLOATING);
 8003706:	2204      	movs	r2, #4
 8003708:	68b9      	ldr	r1, [r7, #8]
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f7ff fed5 	bl	80034ba <LL_GPIO_SetPinMode>
      }
#else
      LL_GPIO_SetPinPull(gpio, ll_pin, LL_GPIO_PULL_NO);
#endif
      break;
 8003710:	bf00      	nop
  }
  hsem_unlock(CFG_HW_GPIO_SEMID);
 8003712:	2001      	movs	r0, #1
 8003714:	f7ff fec8 	bl	80034a8 <hsem_unlock>
}
 8003718:	bf00      	nop
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <pin_SetAFPin>:

static inline void pin_SetAFPin(GPIO_TypeDef *gpio, PinName pin, uint32_t afnum)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
#ifdef STM32F1xx
  UNUSED(gpio);
  UNUSED(pin);
  pin_SetF1AFPin(afnum);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff fc71 	bl	8003014 <pin_SetF1AFPin>
  } else {
    LL_GPIO_SetAFPin_0_7(gpio, ll_pin, afnum);
  }
  hsem_unlock(CFG_HW_GPIO_SEMID);
#endif
}
 8003732:	bf00      	nop
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <pin_function>:

/**
 * Configure pin (mode, speed, output type and pull-up/pull-down)
 */
void pin_function(PinName pin, int function)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  /* Get the pin information */
  uint32_t mode  = STM_PIN_FUNCTION(function);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	61bb      	str	r3, [r7, #24]
  uint32_t afnum = STM_PIN_AFNUM(function);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	121b      	asrs	r3, r3, #8
 8003752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003756:	617b      	str	r3, [r7, #20]
  uint32_t port = STM_PORT(pin);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	091b      	lsrs	r3, r3, #4
 800375c:	f003 030f 	and.w	r3, r3, #15
 8003760:	613b      	str	r3, [r7, #16]
  uint32_t ll_pin  = STM_LL_GPIO_PIN(pin);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f003 030f 	and.w	r3, r3, #15
 8003768:	4a3b      	ldr	r2, [pc, #236]	; (8003858 <pin_function+0x11c>)
 800376a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800376e:	60fb      	str	r3, [r7, #12]
  uint32_t ll_mode = 0;
 8003770:	2300      	movs	r3, #0
 8003772:	61fb      	str	r3, [r7, #28]

  if (pin == (PinName)NC) {
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377a:	d103      	bne.n	8003784 <pin_function+0x48>
    Error_Handler();
 800377c:	219e      	movs	r1, #158	; 0x9e
 800377e:	4837      	ldr	r0, [pc, #220]	; (800385c <pin_function+0x120>)
 8003780:	f000 f8ec 	bl	800395c <_Error_Handler>
    return;
  }
#endif /* DUALPAD_ANALOG_SWITCH */

  /* Enable GPIO clock */
  GPIO_TypeDef *gpio = set_GPIO_Port_Clock(port);
 8003784:	6938      	ldr	r0, [r7, #16]
 8003786:	f7ff fb83 	bl	8002e90 <set_GPIO_Port_Clock>
 800378a:	60b8      	str	r0, [r7, #8]

  hsem_lock(CFG_HW_GPIO_SEMID, HSEM_LOCK_DEFAULT_RETRY);
 800378c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003790:	2001      	movs	r0, #1
 8003792:	f7ff fe7f 	bl	8003494 <hsem_lock>
   *  For most families there are dedicated registers so it is
   *  not so important, register can be set at any time.
   *  But for families like F1, speed only applies to output.
   */
#if defined (STM32F1xx)
  if (mode == STM_PIN_OUTPUT) {
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d104      	bne.n	80037a6 <pin_function+0x6a>
#endif
#ifdef LL_GPIO_SPEED_FREQ_VERY_HIGH
    LL_GPIO_SetPinSpeed(gpio, ll_pin, LL_GPIO_SPEED_FREQ_VERY_HIGH);
#else
    LL_GPIO_SetPinSpeed(gpio, ll_pin, LL_GPIO_SPEED_FREQ_HIGH);
 800379c:	2203      	movs	r2, #3
 800379e:	68f9      	ldr	r1, [r7, #12]
 80037a0:	68b8      	ldr	r0, [r7, #8]
 80037a2:	f7ff fee9 	bl	8003578 <LL_GPIO_SetPinSpeed>
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d821      	bhi.n	80037f0 <pin_function+0xb4>
 80037ac:	a201      	add	r2, pc, #4	; (adr r2, 80037b4 <pin_function+0x78>)
 80037ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b2:	bf00      	nop
 80037b4:	080037c5 	.word	0x080037c5
 80037b8:	080037d5 	.word	0x080037d5
 80037bc:	080037db 	.word	0x080037db
 80037c0:	080037eb 	.word	0x080037eb
  }
#endif

  switch (mode) {
    case STM_PIN_INPUT:
      ll_mode = LL_GPIO_MODE_INPUT;
 80037c4:	2308      	movs	r3, #8
 80037c6:	61fb      	str	r3, [r7, #28]
#if defined(STM32F1xx)
      // on F1 family, input mode may be associated with an alternate function
      pin_SetAFPin(gpio, pin, afnum);
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	68b8      	ldr	r0, [r7, #8]
 80037ce:	f7ff ffa7 	bl	8003720 <pin_SetAFPin>
#endif
      break;
 80037d2:	e012      	b.n	80037fa <pin_function+0xbe>
    case STM_PIN_OUTPUT:
      ll_mode = LL_GPIO_MODE_OUTPUT;
 80037d4:	2301      	movs	r3, #1
 80037d6:	61fb      	str	r3, [r7, #28]
      break;
 80037d8:	e00f      	b.n	80037fa <pin_function+0xbe>
    case STM_PIN_ALTERNATE:
      ll_mode = LL_GPIO_MODE_ALTERNATE;
 80037da:	2309      	movs	r3, #9
 80037dc:	61fb      	str	r3, [r7, #28]
      /* In case of ALT function, also set the afnum */
      pin_SetAFPin(gpio, pin, afnum);
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	68b8      	ldr	r0, [r7, #8]
 80037e4:	f7ff ff9c 	bl	8003720 <pin_SetAFPin>
      break;
 80037e8:	e007      	b.n	80037fa <pin_function+0xbe>
    case STM_PIN_ANALOG:
      ll_mode = LL_GPIO_MODE_ANALOG;
 80037ea:	2300      	movs	r3, #0
 80037ec:	61fb      	str	r3, [r7, #28]
      break;
 80037ee:	e004      	b.n	80037fa <pin_function+0xbe>
    default:
      Error_Handler();
 80037f0:	21fb      	movs	r1, #251	; 0xfb
 80037f2:	481a      	ldr	r0, [pc, #104]	; (800385c <pin_function+0x120>)
 80037f4:	f000 f8b2 	bl	800395c <_Error_Handler>
      break;
 80037f8:	bf00      	nop
  }
  LL_GPIO_SetPinMode(gpio, ll_pin, ll_mode);
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	68f9      	ldr	r1, [r7, #12]
 80037fe:	68b8      	ldr	r0, [r7, #8]
 8003800:	f7ff fe5b 	bl	80034ba <LL_GPIO_SetPinMode>
  } else {
    LL_GPIO_DisablePinAnalogControl(gpio, ll_pin);
  }
#endif

  if ((mode == STM_PIN_OUTPUT) || (mode == STM_PIN_ALTERNATE)) {
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d002      	beq.n	8003810 <pin_function+0xd4>
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	2b02      	cmp	r3, #2
 800380e:	d10f      	bne.n	8003830 <pin_function+0xf4>
    if (STM_PIN_OD(function)) {
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	f003 0308 	and.w	r3, r3, #8
 8003816:	2b00      	cmp	r3, #0
 8003818:	d005      	beq.n	8003826 <pin_function+0xea>
      LL_GPIO_SetPinOutputType(gpio, ll_pin, LL_GPIO_OUTPUT_OPENDRAIN);
 800381a:	2204      	movs	r2, #4
 800381c:	68f9      	ldr	r1, [r7, #12]
 800381e:	68b8      	ldr	r0, [r7, #8]
 8003820:	f7ff fedc 	bl	80035dc <LL_GPIO_SetPinOutputType>
 8003824:	e004      	b.n	8003830 <pin_function+0xf4>
    } else {
      LL_GPIO_SetPinOutputType(gpio, ll_pin, LL_GPIO_OUTPUT_PUSHPULL);
 8003826:	2200      	movs	r2, #0
 8003828:	68f9      	ldr	r1, [r7, #12]
 800382a:	68b8      	ldr	r0, [r7, #8]
 800382c:	f7ff fed6 	bl	80035dc <LL_GPIO_SetPinOutputType>
    }
  }

  pin_PullConfig(gpio, ll_pin, STM_PIN_PUPD(function));
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	111b      	asrs	r3, r3, #4
 8003834:	f003 0303 	and.w	r3, r3, #3
 8003838:	461a      	mov	r2, r3
 800383a:	68f9      	ldr	r1, [r7, #12]
 800383c:	68b8      	ldr	r0, [r7, #8]
 800383e:	f7ff ff2c 	bl	800369a <pin_PullConfig>

#if defined(DUALPAD_ANALOG_SWITCH)
  configure_dualpad_switch(pin, function, LL_AnalogSwitch);
#endif /* DUALPAD_ANALOG_SWITCH */

  pin_DisconnectDebug(pin);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7ff ff1e 	bl	8003684 <pin_DisconnectDebug>

  hsem_unlock(CFG_HW_GPIO_SEMID);
 8003848:	2001      	movs	r0, #1
 800384a:	f7ff fe2d 	bl	80034a8 <hsem_unlock>
}
 800384e:	bf00      	nop
 8003850:	3720      	adds	r7, #32
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	080042c8 	.word	0x080042c8
 800385c:	0800412c 	.word	0x0800412c

08003860 <pinmap_pinout>:

void pinmap_pinout(PinName pin, const PinMap *map)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  if (pin == NC) {
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003870:	d01a      	beq.n	80038a8 <pinmap_pinout+0x48>
    return;
  }

  while (map->pin != NC) {
 8003872:	e00e      	b.n	8003892 <pinmap_pinout+0x32>
    if (map->pin == pin) {
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	429a      	cmp	r2, r3
 800387c:	d106      	bne.n	800388c <pinmap_pinout+0x2c>
      pin_function(pin, map->function);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	4619      	mov	r1, r3
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f7ff ff59 	bl	800373c <pin_function>
      return;
 800388a:	e00e      	b.n	80038aa <pinmap_pinout+0x4a>
    }
    map++;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	330c      	adds	r3, #12
 8003890:	603b      	str	r3, [r7, #0]
  while (map->pin != NC) {
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389a:	d1eb      	bne.n	8003874 <pinmap_pinout+0x14>
  }
  Error_Handler();
 800389c:	f240 1129 	movw	r1, #297	; 0x129
 80038a0:	4803      	ldr	r0, [pc, #12]	; (80038b0 <pinmap_pinout+0x50>)
 80038a2:	f000 f85b 	bl	800395c <_Error_Handler>
 80038a6:	e000      	b.n	80038aa <pinmap_pinout+0x4a>
    return;
 80038a8:	bf00      	nop
}
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	0800412c 	.word	0x0800412c

080038b4 <pinmap_find_peripheral>:

void *pinmap_find_peripheral(PinName pin, const PinMap *map)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  while (map->pin != NC) {
 80038be:	e00a      	b.n	80038d6 <pinmap_find_peripheral+0x22>
    if (map->pin == pin) {
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d102      	bne.n	80038d0 <pinmap_find_peripheral+0x1c>
      return map->peripheral;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	e008      	b.n	80038e2 <pinmap_find_peripheral+0x2e>
    }
    map++;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	330c      	adds	r3, #12
 80038d4:	603b      	str	r3, [r7, #0]
  while (map->pin != NC) {
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038de:	d1ef      	bne.n	80038c0 <pinmap_find_peripheral+0xc>
  }
  return NP;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr

080038ec <pinmap_peripheral>:

void *pinmap_peripheral(PinName pin, const PinMap *map)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  void *peripheral = NP;
 80038f6:	2300      	movs	r3, #0
 80038f8:	60fb      	str	r3, [r7, #12]

  if (pin != (PinName)NC) {
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003900:	d004      	beq.n	800390c <pinmap_peripheral+0x20>
    peripheral = pinmap_find_peripheral(pin, map);
 8003902:	6839      	ldr	r1, [r7, #0]
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff ffd5 	bl	80038b4 <pinmap_find_peripheral>
 800390a:	60f8      	str	r0, [r7, #12]
  }
  return peripheral;
 800390c:	68fb      	ldr	r3, [r7, #12]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <pinmap_merge_peripheral>:
  return function;
}

// Merge peripherals
void *pinmap_merge_peripheral(void *a, void *b)
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
 800391e:	6039      	str	r1, [r7, #0]
  // both are the same (inc both NP)
  if (a == b) {
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	429a      	cmp	r2, r3
 8003926:	d101      	bne.n	800392c <pinmap_merge_peripheral+0x16>
    return a;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	e00a      	b.n	8003942 <pinmap_merge_peripheral+0x2c>
  }

  // one (or both) is not set
  if (a == NP) {
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <pinmap_merge_peripheral+0x20>
    return b;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	e005      	b.n	8003942 <pinmap_merge_peripheral+0x2c>
  }
  if (b == NP) {
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <pinmap_merge_peripheral+0x2a>
    return a;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	e000      	b.n	8003942 <pinmap_merge_peripheral+0x2c>
  }

  // mismatch error case
  return NP;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr

0800394c <core_debug>:
 * Note: By using the printf function of the library C this inflates the size of
 * the code, use a lot of stack. An alternative, will be to implement a tiny
 * and limited functionality implementation of printf.
 */
static inline void core_debug(const char *format, ...)
{
 800394c:	b40f      	push	{r0, r1, r2, r3}
 800394e:	b480      	push	{r7}
 8003950:	af00      	add	r7, sp, #0
  vfprintf(stderr, format, args);
  va_end(args);
#else
  (void)(format);
#endif /* CORE_DEBUG */
}
 8003952:	bf00      	nop
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	b004      	add	sp, #16
 800395a:	4770      	bx	lr

0800395c <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
WEAK void _Error_Handler(const char *msg, int val)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  /* User can add his own implementation to report the HAL error return state */
  core_debug("Error: %s (%i)\n", msg, val);
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	4802      	ldr	r0, [pc, #8]	; (8003974 <_Error_Handler+0x18>)
 800396c:	f7ff ffee 	bl	800394c <core_debug>
  while (1) {
 8003970:	e7fe      	b.n	8003970 <_Error_Handler+0x14>
 8003972:	bf00      	nop
 8003974:	080041a0 	.word	0x080041a0

08003978 <core_debug>:
{
 8003978:	b40f      	push	{r0, r1, r2, r3}
 800397a:	b480      	push	{r7}
 800397c:	af00      	add	r7, sp, #0
}
 800397e:	bf00      	nop
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	b004      	add	sp, #16
 8003986:	4770      	bx	lr

08003988 <get_serial_obj>:
static serial_t serial_debug = { .uart = NP, .index = UART_NUM };

/* Aim of the function is to get serial_s pointer using huart pointer */
/* Highly inspired from magical linux kernel's "container_of" */
serial_t *get_serial_obj(UART_HandleTypeDef *huart)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  struct serial_s *obj_s;
  serial_t *obj;

  obj_s = (struct serial_s *)((char *)huart - offsetof(struct serial_s, handle));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3b04      	subs	r3, #4
 8003994:	60fb      	str	r3, [r7, #12]
  obj = (serial_t *)((char *)obj_s - offsetof(serial_t, uart));
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	60bb      	str	r3, [r7, #8]

  return (obj);
 800399a:	68bb      	ldr	r3, [r7, #8]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr
	...

080039a8 <uart_init>:
  * @brief  Function called to initialize the uart interface
  * @param  obj : pointer to serial_t structure
  * @retval None
  */
void uart_init(serial_t *obj, uint32_t baudrate, uint32_t databits, uint32_t parity, uint32_t stopbits)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08a      	sub	sp, #40	; 0x28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	603b      	str	r3, [r7, #0]
  if (obj == NULL) {
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 80eb 	beq.w	8003b94 <uart_init+0x1ec>
    return;
  }

  UART_HandleTypeDef *huart = &(obj->handle);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	3304      	adds	r3, #4
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the U(S)ART peripheral to use (USART1, USART2, ...) */
  USART_TypeDef *uart_tx = pinmap_peripheral(obj->pin_tx, PinMap_UART_TX);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c8:	4974      	ldr	r1, [pc, #464]	; (8003b9c <uart_init+0x1f4>)
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff ff8e 	bl	80038ec <pinmap_peripheral>
 80039d0:	6238      	str	r0, [r7, #32]
  USART_TypeDef *uart_rx = pinmap_peripheral(obj->pin_rx, PinMap_UART_RX);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d6:	4972      	ldr	r1, [pc, #456]	; (8003ba0 <uart_init+0x1f8>)
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff ff87 	bl	80038ec <pinmap_peripheral>
 80039de:	61f8      	str	r0, [r7, #28]

  /* Pin Tx must not be NP */
  if (uart_tx == NP) {
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d103      	bne.n	80039ee <uart_init+0x46>
    core_debug("ERROR: [U(S)ART] Tx pin has no peripheral!\n");
 80039e6:	486f      	ldr	r0, [pc, #444]	; (8003ba4 <uart_init+0x1fc>)
 80039e8:	f7ff ffc6 	bl	8003978 <core_debug>
    return;
 80039ec:	e0d3      	b.n	8003b96 <uart_init+0x1ee>
  }
  /* Pin Rx must not be NP if not half-duplex */
  if ((obj->pin_rx != NC) && (uart_rx == NP)) {
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f6:	d006      	beq.n	8003a06 <uart_init+0x5e>
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d103      	bne.n	8003a06 <uart_init+0x5e>
    core_debug("ERROR: [U(S)ART] Rx pin has no peripheral!\n");
 80039fe:	486a      	ldr	r0, [pc, #424]	; (8003ba8 <uart_init+0x200>)
 8003a00:	f7ff ffba 	bl	8003978 <core_debug>
    return;
 8003a04:	e0c7      	b.n	8003b96 <uart_init+0x1ee>

  /*
   * Get the peripheral name (USART1, USART2, ...) from the pin
   * and assign it to the object
   */
  obj->uart = pinmap_merge_peripheral(uart_tx, uart_rx);
 8003a06:	69f9      	ldr	r1, [r7, #28]
 8003a08:	6a38      	ldr	r0, [r7, #32]
 8003a0a:	f7ff ff84 	bl	8003916 <pinmap_merge_peripheral>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	601a      	str	r2, [r3, #0]

  if (obj->uart == NP) {
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d103      	bne.n	8003a24 <uart_init+0x7c>
    core_debug("ERROR: [U(S)ART] Rx and Tx pins peripherals mismatch!\n");
 8003a1c:	4863      	ldr	r0, [pc, #396]	; (8003bac <uart_init+0x204>)
 8003a1e:	f7ff ffab 	bl	8003978 <core_debug>
    return;
 8003a22:	e0b8      	b.n	8003b96 <uart_init+0x1ee>
  }

  /* Enable USART clock */
#if defined(USART1_BASE)
  else if (obj->uart == USART1) {
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a61      	ldr	r2, [pc, #388]	; (8003bb0 <uart_init+0x208>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d120      	bne.n	8003a70 <uart_init+0xc8>
    __HAL_RCC_USART1_FORCE_RESET();
 8003a2e:	4b61      	ldr	r3, [pc, #388]	; (8003bb4 <uart_init+0x20c>)
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	4a60      	ldr	r2, [pc, #384]	; (8003bb4 <uart_init+0x20c>)
 8003a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a38:	60d3      	str	r3, [r2, #12]
    __HAL_RCC_USART1_RELEASE_RESET();
 8003a3a:	4b5e      	ldr	r3, [pc, #376]	; (8003bb4 <uart_init+0x20c>)
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	4a5d      	ldr	r2, [pc, #372]	; (8003bb4 <uart_init+0x20c>)
 8003a40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a44:	60d3      	str	r3, [r2, #12]
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a46:	4b5b      	ldr	r3, [pc, #364]	; (8003bb4 <uart_init+0x20c>)
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	4a5a      	ldr	r2, [pc, #360]	; (8003bb4 <uart_init+0x20c>)
 8003a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a50:	6193      	str	r3, [r2, #24]
 8003a52:	4b58      	ldr	r3, [pc, #352]	; (8003bb4 <uart_init+0x20c>)
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a5a:	61bb      	str	r3, [r7, #24]
 8003a5c:	69bb      	ldr	r3, [r7, #24]
    obj->index = UART1_INDEX;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    obj->irq = USART1_IRQn;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2225      	movs	r2, #37	; 0x25
 8003a6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003a6e:	e04a      	b.n	8003b06 <uart_init+0x15e>
  }
#endif
#if defined(USART2_BASE)
  else if (obj->uart == USART2) {
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a50      	ldr	r2, [pc, #320]	; (8003bb8 <uart_init+0x210>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d120      	bne.n	8003abc <uart_init+0x114>
    __HAL_RCC_USART2_FORCE_RESET();
 8003a7a:	4b4e      	ldr	r3, [pc, #312]	; (8003bb4 <uart_init+0x20c>)
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	4a4d      	ldr	r2, [pc, #308]	; (8003bb4 <uart_init+0x20c>)
 8003a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a84:	6113      	str	r3, [r2, #16]
    __HAL_RCC_USART2_RELEASE_RESET();
 8003a86:	4b4b      	ldr	r3, [pc, #300]	; (8003bb4 <uart_init+0x20c>)
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	4a4a      	ldr	r2, [pc, #296]	; (8003bb4 <uart_init+0x20c>)
 8003a8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003a90:	6113      	str	r3, [r2, #16]
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a92:	4b48      	ldr	r3, [pc, #288]	; (8003bb4 <uart_init+0x20c>)
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	4a47      	ldr	r2, [pc, #284]	; (8003bb4 <uart_init+0x20c>)
 8003a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a9c:	61d3      	str	r3, [r2, #28]
 8003a9e:	4b45      	ldr	r3, [pc, #276]	; (8003bb4 <uart_init+0x20c>)
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	697b      	ldr	r3, [r7, #20]
    obj->index = UART2_INDEX;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    obj->irq = USART2_IRQn;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2226      	movs	r2, #38	; 0x26
 8003ab6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003aba:	e024      	b.n	8003b06 <uart_init+0x15e>
  }
#endif
#if defined(USART3_BASE)
  else if (obj->uart == USART3) {
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a3e      	ldr	r2, [pc, #248]	; (8003bbc <uart_init+0x214>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d11f      	bne.n	8003b06 <uart_init+0x15e>
    __HAL_RCC_USART3_FORCE_RESET();
 8003ac6:	4b3b      	ldr	r3, [pc, #236]	; (8003bb4 <uart_init+0x20c>)
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	4a3a      	ldr	r2, [pc, #232]	; (8003bb4 <uart_init+0x20c>)
 8003acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ad0:	6113      	str	r3, [r2, #16]
    __HAL_RCC_USART3_RELEASE_RESET();
 8003ad2:	4b38      	ldr	r3, [pc, #224]	; (8003bb4 <uart_init+0x20c>)
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	4a37      	ldr	r2, [pc, #220]	; (8003bb4 <uart_init+0x20c>)
 8003ad8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003adc:	6113      	str	r3, [r2, #16]
    __HAL_RCC_USART3_CLK_ENABLE();
 8003ade:	4b35      	ldr	r3, [pc, #212]	; (8003bb4 <uart_init+0x20c>)
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	4a34      	ldr	r2, [pc, #208]	; (8003bb4 <uart_init+0x20c>)
 8003ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ae8:	61d3      	str	r3, [r2, #28]
 8003aea:	4b32      	ldr	r3, [pc, #200]	; (8003bb4 <uart_init+0x20c>)
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	693b      	ldr	r3, [r7, #16]
    obj->index = UART3_INDEX;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2202      	movs	r2, #2
 8003afa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    obj->irq = USART3_IRQn;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2227      	movs	r2, #39	; 0x27
 8003b02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    obj->irq = USART10_IRQn;
  }
#endif

  /* Configure UART GPIO pins */
  pinmap_pinout(obj->pin_tx, PinMap_UART_TX);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b0a:	4924      	ldr	r1, [pc, #144]	; (8003b9c <uart_init+0x1f4>)
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff fea7 	bl	8003860 <pinmap_pinout>
  if (uart_rx != NP) {
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d005      	beq.n	8003b24 <uart_init+0x17c>
    pinmap_pinout(obj->pin_rx, PinMap_UART_RX);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1c:	4920      	ldr	r1, [pc, #128]	; (8003ba0 <uart_init+0x1f8>)
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff fe9e 	bl	8003860 <pinmap_pinout>
  }

  /* Configure uart */
  uart_handlers[obj->index] = huart;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4a24      	ldr	r2, [pc, #144]	; (8003bc0 <uart_init+0x218>)
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  huart->Instance          = (USART_TypeDef *)(obj->uart);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate     = baudrate;
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength   = databits;
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits     = stopbits;
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b4c:	60da      	str	r2, [r3, #12]
  huart->Init.Parity       = parity;
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	611a      	str	r2, [r3, #16]
  huart->Init.Mode         = UART_MODE_TX_RX;
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	220c      	movs	r2, #12
 8003b58:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	2200      	movs	r2, #0
 8003b64:	61da      	str	r2, [r3, #28]
#ifdef UART_ONE_BIT_SAMPLE_DISABLE
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
#endif

  /* Set the NVIC priority for future interrupts */
  HAL_NVIC_SetPriority(obj->irq, UART_IRQ_PRIO, UART_IRQ_SUBPRIO);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f993 3058 	ldrsb.w	r3, [r3, #88]	; 0x58
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	2101      	movs	r1, #1
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7fc ff09 	bl	8000988 <HAL_NVIC_SetPriority>
    }
#endif
  }
#endif

  if (uart_rx == NP) {
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d105      	bne.n	8003b88 <uart_init+0x1e0>
    if (HAL_HalfDuplex_Init(huart) != HAL_OK) {
 8003b7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b7e:	f7fd fe46 	bl	800180e <HAL_HalfDuplex_Init>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	e006      	b.n	8003b96 <uart_init+0x1ee>
      return;
    }
  } else if (HAL_UART_Init(huart) != HAL_OK) {
 8003b88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b8a:	f7fd fdf3 	bl	8001774 <HAL_UART_Init>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	e000      	b.n	8003b96 <uart_init+0x1ee>
    return;
 8003b94:	bf00      	nop
    return;
  }
}
 8003b96:	3728      	adds	r7, #40	; 0x28
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	08004308 	.word	0x08004308
 8003ba0:	08004344 	.word	0x08004344
 8003ba4:	080041b0 	.word	0x080041b0
 8003ba8:	080041dc 	.word	0x080041dc
 8003bac:	08004208 	.word	0x08004208
 8003bb0:	40013800 	.word	0x40013800
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	40004400 	.word	0x40004400
 8003bbc:	40004800 	.word	0x40004800
 8003bc0:	200002e4 	.word	0x200002e4

08003bc4 <serial_rx_active>:
 *
 * @param obj The serial object
 * @return Non-zero if the RX transaction is ongoing, 0 otherwise
 */
uint8_t serial_rx_active(serial_t *obj)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  return ((HAL_UART_GetState(uart_handlers[obj->index]) & HAL_UART_STATE_BUSY_RX) == HAL_UART_STATE_BUSY_RX);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	4b08      	ldr	r3, [pc, #32]	; (8003bf8 <serial_rx_active+0x34>)
 8003bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fe f8fb 	bl	8001dd6 <HAL_UART_GetState>
 8003be0:	4603      	mov	r3, r0
 8003be2:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8003be6:	2b22      	cmp	r3, #34	; 0x22
 8003be8:	bf0c      	ite	eq
 8003bea:	2301      	moveq	r3, #1
 8003bec:	2300      	movne	r3, #0
 8003bee:	b2db      	uxtb	r3, r3
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	200002e4 	.word	0x200002e4

08003bfc <serial_tx_active>:
 *
 * @param obj The serial object
 * @return Non-zero if the TX transaction is ongoing, 0 otherwise
 */
uint8_t serial_tx_active(serial_t *obj)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  return ((HAL_UART_GetState(uart_handlers[obj->index]) & HAL_UART_STATE_BUSY_TX) == HAL_UART_STATE_BUSY_TX);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <serial_tx_active+0x34>)
 8003c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fe f8df 	bl	8001dd6 <HAL_UART_GetState>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003c1e:	2b21      	cmp	r3, #33	; 0x21
 8003c20:	bf0c      	ite	eq
 8003c22:	2301      	moveq	r3, #1
 8003c24:	2300      	movne	r3, #0
 8003c26:	b2db      	uxtb	r3, r3
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	200002e4 	.word	0x200002e4

08003c34 <uart_getc>:
  * @brief  Read receive byte from uart
  * @param  obj : pointer to serial_t structure
  * @retval last character received
  */
int uart_getc(serial_t *obj, unsigned char *c)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  if (obj == NULL) {
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d102      	bne.n	8003c4a <uart_getc+0x16>
    return -1;
 8003c44:	f04f 33ff 	mov.w	r3, #4294967295
 8003c48:	e01b      	b.n	8003c82 <uart_getc+0x4e>
  }

  if (serial_rx_active(obj)) {
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7ff ffba 	bl	8003bc4 <serial_rx_active>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <uart_getc+0x28>
    return -1; /* Transaction ongoing */
 8003c56:	f04f 33ff 	mov.w	r3, #4294967295
 8003c5a:	e012      	b.n	8003c82 <uart_getc+0x4e>
  }

  *c = (unsigned char)(obj->recv);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	701a      	strb	r2, [r3, #0]
  /* Restart RX irq */
  HAL_UART_Receive_IT(uart_handlers[obj->index], &(obj->recv), 1);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <uart_getc+0x58>)
 8003c70:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	335a      	adds	r3, #90	; 0x5a
 8003c78:	2201      	movs	r2, #1
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	f7fd fe60 	bl	8001940 <HAL_UART_Receive_IT>

  return 0;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	200002e4 	.word	0x200002e4

08003c90 <uart_attach_rx_callback>:
 * @param obj : pointer to serial_t structure
 * @param callback : function call at the end of reception
 * @retval none
 */
void uart_attach_rx_callback(serial_t *obj, void (*callback)(serial_t *))
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  if (obj == NULL) {
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d022      	beq.n	8003ce6 <uart_attach_rx_callback+0x56>
    return;
  }

  /* Exit if a reception is already on-going */
  if (serial_rx_active(obj)) {
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7ff ff8f 	bl	8003bc4 <serial_rx_active>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d11e      	bne.n	8003cea <uart_attach_rx_callback+0x5a>
    return;
  }
  obj->rx_callback = callback;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Must disable interrupt to prevent handle lock contention */
  HAL_NVIC_DisableIRQ(obj->irq);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f993 3058 	ldrsb.w	r3, [r3, #88]	; 0x58
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fc fe8f 	bl	80009dc <HAL_NVIC_DisableIRQ>

  HAL_UART_Receive_IT(uart_handlers[obj->index], &(obj->recv), 1);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <uart_attach_rx_callback+0x64>)
 8003cc8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	335a      	adds	r3, #90	; 0x5a
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	f7fd fe34 	bl	8001940 <HAL_UART_Receive_IT>

  /* Enable interrupt */
  HAL_NVIC_EnableIRQ(obj->irq);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f993 3058 	ldrsb.w	r3, [r3, #88]	; 0x58
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fc fe6e 	bl	80009c0 <HAL_NVIC_EnableIRQ>
 8003ce4:	e002      	b.n	8003cec <uart_attach_rx_callback+0x5c>
    return;
 8003ce6:	bf00      	nop
 8003ce8:	e000      	b.n	8003cec <uart_attach_rx_callback+0x5c>
    return;
 8003cea:	bf00      	nop
}
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	200002e4 	.word	0x200002e4

08003cf8 <uart_attach_tx_callback>:
 * @param obj : pointer to serial_t structure
 * @param callback : function call at the end of transmission
 * @retval none
 */
void uart_attach_tx_callback(serial_t *obj, int (*callback)(serial_t *), size_t size)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  if (obj == NULL) {
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d022      	beq.n	8003d50 <uart_attach_tx_callback+0x58>
    return;
  }
  obj->tx_callback = callback;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Must disable interrupt to prevent handle lock contention */
  HAL_NVIC_DisableIRQ(obj->irq);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f993 3058 	ldrsb.w	r3, [r3, #88]	; 0x58
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fc fe60 	bl	80009dc <HAL_NVIC_DisableIRQ>

  /* The following function will enable UART_IT_TXE and error interrupts */
  HAL_UART_Transmit_IT(uart_handlers[obj->index], &obj->tx_buff[obj->tx_tail], size);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003d22:	461a      	mov	r2, r3
 8003d24:	4b0c      	ldr	r3, [pc, #48]	; (8003d58 <uart_attach_tx_callback+0x60>)
 8003d26:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
 8003d34:	b292      	uxth	r2, r2
 8003d36:	4413      	add	r3, r2
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	b292      	uxth	r2, r2
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	f7fd fdbb 	bl	80018b8 <HAL_UART_Transmit_IT>

  /* Enable interrupt */
  HAL_NVIC_EnableIRQ(obj->irq);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f993 3058 	ldrsb.w	r3, [r3, #88]	; 0x58
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fc fe39 	bl	80009c0 <HAL_NVIC_EnableIRQ>
 8003d4e:	e000      	b.n	8003d52 <uart_attach_tx_callback+0x5a>
    return;
 8003d50:	bf00      	nop
}
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	200002e4 	.word	0x200002e4

08003d5c <uart_enable_tx>:
 *
 * @param obj : pointer to serial_t structure
 * @retval none
 */
void uart_enable_tx(serial_t *obj)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  if (obj != NULL && obj->pin_rx == NC) {
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00e      	beq.n	8003d88 <uart_enable_tx+0x2c>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d72:	d109      	bne.n	8003d88 <uart_enable_tx+0x2c>
    HAL_HalfDuplex_EnableTransmitter(uart_handlers[obj->index]);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	4b04      	ldr	r3, [pc, #16]	; (8003d90 <uart_enable_tx+0x34>)
 8003d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fd ffc1 	bl	8001d0a <HAL_HalfDuplex_EnableTransmitter>
  }
}
 8003d88:	bf00      	nop
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	200002e4 	.word	0x200002e4

08003d94 <uart_enable_rx>:
 *
 * @param obj : pointer to serial_t structure
 * @retval none
 */
void uart_enable_rx(serial_t *obj)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  if (obj != NULL && obj->pin_rx == NC) {
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00e      	beq.n	8003dc0 <uart_enable_rx+0x2c>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003daa:	d109      	bne.n	8003dc0 <uart_enable_rx+0x2c>
    HAL_HalfDuplex_EnableReceiver(uart_handlers[obj->index]);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003db2:	461a      	mov	r2, r3
 8003db4:	4b04      	ldr	r3, [pc, #16]	; (8003dc8 <uart_enable_rx+0x34>)
 8003db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fd ffd8 	bl	8001d70 <HAL_HalfDuplex_EnableReceiver>
  }
}
 8003dc0:	bf00      	nop
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	200002e4 	.word	0x200002e4

08003dcc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback
  * @param  UartHandle pointer on the uart reference
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  serial_t *obj = get_serial_obj(huart);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff fdd7 	bl	8003988 <get_serial_obj>
 8003dda:	60f8      	str	r0, [r7, #12]
  if (obj) {
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_UART_RxCpltCallback+0x1e>
    obj->rx_callback(obj);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	4798      	blx	r3
  }
}
 8003dea:	bf00      	nop
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  UartHandle pointer on the uart reference
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b084      	sub	sp, #16
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  serial_t *obj = get_serial_obj(huart);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff fdc4 	bl	8003988 <get_serial_obj>
 8003e00:	60f8      	str	r0, [r7, #12]
  if (obj) {
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <HAL_UART_TxCpltCallback+0x1e>
    obj->tx_callback(obj);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	4798      	blx	r3
  }
}
 8003e10:	bf00      	nop
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_UART_ErrorCallback>:
  * @brief  error callback from UART
  * @param  UartHandle pointer on the uart reference
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b088      	sub	sp, #32
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
#if defined(STM32F1xx) || defined(STM32F2xx) || defined(STM32F4xx) || defined(STM32L1xx)
  if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE) != RESET) {
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d10b      	bne.n	8003e46 <HAL_UART_ErrorCallback+0x2e>
    __HAL_UART_CLEAR_PEFLAG(huart); /* Clear PE flag */
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61bb      	str	r3, [r7, #24]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	61bb      	str	r3, [r7, #24]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	61bb      	str	r3, [r7, #24]
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	e037      	b.n	8003eb6 <HAL_UART_ErrorCallback+0x9e>
  } else if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE) != RESET) {
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d10b      	bne.n	8003e6c <HAL_UART_ErrorCallback+0x54>
    __HAL_UART_CLEAR_FEFLAG(huart); /* Clear FE flag */
 8003e54:	2300      	movs	r3, #0
 8003e56:	617b      	str	r3, [r7, #20]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	617b      	str	r3, [r7, #20]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	e024      	b.n	8003eb6 <HAL_UART_ErrorCallback+0x9e>
  } else if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE) != RESET) {
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0304 	and.w	r3, r3, #4
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d10b      	bne.n	8003e92 <HAL_UART_ErrorCallback+0x7a>
    __HAL_UART_CLEAR_NEFLAG(huart); /* Clear NE flag */
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	613b      	str	r3, [r7, #16]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	613b      	str	r3, [r7, #16]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	e011      	b.n	8003eb6 <HAL_UART_ErrorCallback+0x9e>
  } else if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) != RESET) {
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d10a      	bne.n	8003eb6 <HAL_UART_ErrorCallback+0x9e>
    __HAL_UART_CLEAR_OREFLAG(huart); /* Clear ORE flag */
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
  } else if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) != RESET) {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF); /* Clear ORE flag */
  }
#endif
  /* Restart receive interrupt after any error */
  serial_t *obj = get_serial_obj(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7ff fd66 	bl	8003988 <get_serial_obj>
 8003ebc:	61f8      	str	r0, [r7, #28]
  if (obj && !serial_rx_active(obj)) {
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00c      	beq.n	8003ede <HAL_UART_ErrorCallback+0xc6>
 8003ec4:	69f8      	ldr	r0, [r7, #28]
 8003ec6:	f7ff fe7d 	bl	8003bc4 <serial_rx_active>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d106      	bne.n	8003ede <HAL_UART_ErrorCallback+0xc6>
    HAL_UART_Receive_IT(huart, &(obj->recv), 1);
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	335a      	adds	r3, #90	; 0x5a
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f7fd fd31 	bl	8001940 <HAL_UART_Receive_IT>
  }
}
 8003ede:	bf00      	nop
 8003ee0:	3720      	adds	r7, #32
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
	...

08003ee8 <USART1_IRQHandler>:
  * @param  None
  * @retval None
  */
#if defined(USART1_BASE)
void USART1_IRQHandler(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  HAL_NVIC_ClearPendingIRQ(USART1_IRQn);
 8003eec:	2025      	movs	r0, #37	; 0x25
 8003eee:	f7fc fd8f 	bl	8000a10 <HAL_NVIC_ClearPendingIRQ>
  HAL_UART_IRQHandler(uart_handlers[UART1_INDEX]);
 8003ef2:	4b03      	ldr	r3, [pc, #12]	; (8003f00 <USART1_IRQHandler+0x18>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fd fd52 	bl	80019a0 <HAL_UART_IRQHandler>
}
 8003efc:	bf00      	nop
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	200002e4 	.word	0x200002e4

08003f04 <USART2_IRQHandler>:
  * @param  None
  * @retval None
  */
#if defined(USART2_BASE)
void USART2_IRQHandler(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  HAL_NVIC_ClearPendingIRQ(USART2_IRQn);
 8003f08:	2026      	movs	r0, #38	; 0x26
 8003f0a:	f7fc fd81 	bl	8000a10 <HAL_NVIC_ClearPendingIRQ>
  if (uart_handlers[UART2_INDEX] != NULL) {
 8003f0e:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <USART2_IRQHandler+0x20>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d004      	beq.n	8003f20 <USART2_IRQHandler+0x1c>
    HAL_UART_IRQHandler(uart_handlers[UART2_INDEX]);
 8003f16:	4b03      	ldr	r3, [pc, #12]	; (8003f24 <USART2_IRQHandler+0x20>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fd fd40 	bl	80019a0 <HAL_UART_IRQHandler>
#if defined(STM32G0xx) && defined(LPUART2_BASE)
  if (uart_handlers[LPUART2_INDEX] != NULL) {
    HAL_UART_IRQHandler(uart_handlers[LPUART2_INDEX]);
  }
#endif
}
 8003f20:	bf00      	nop
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	200002e4 	.word	0x200002e4

08003f28 <USART3_IRQHandler>:
  * @param  None
  * @retval None
  */
#if defined(USART3_BASE)
void USART3_IRQHandler(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  HAL_NVIC_ClearPendingIRQ(USART3_IRQn);
 8003f2c:	2027      	movs	r0, #39	; 0x27
 8003f2e:	f7fc fd6f 	bl	8000a10 <HAL_NVIC_ClearPendingIRQ>
  }
  if (__HAL_GET_PENDING_IT(HAL_ITLINE_USART8) != RESET) {
    HAL_UART_IRQHandler(uart_handlers[UART8_INDEX]);
  }
#else
  if (uart_handlers[UART3_INDEX] != NULL) {
 8003f32:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <USART3_IRQHandler+0x20>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d004      	beq.n	8003f44 <USART3_IRQHandler+0x1c>
    HAL_UART_IRQHandler(uart_handlers[UART3_INDEX]);
 8003f3a:	4b03      	ldr	r3, [pc, #12]	; (8003f48 <USART3_IRQHandler+0x20>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fd fd2e 	bl	80019a0 <HAL_UART_IRQHandler>
    HAL_UART_IRQHandler(uart_handlers[LPUART1_INDEX]);
  }
#endif /* STM32G0xx && LPUART1_BASE */
#endif /* STM32F0xx || STM32G0xx */
#endif /* STM32F091xC || STM32F098xx */
}
 8003f44:	bf00      	nop
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	200002e4 	.word	0x200002e4

08003f4c <__cxa_pure_virtual>:
 8003f4c:	b508      	push	{r3, lr}
 8003f4e:	f000 f80f 	bl	8003f70 <_ZSt9terminatev>

08003f52 <_ZSt25__throw_bad_function_callv>:
 8003f52:	b508      	push	{r3, lr}
 8003f54:	f000 f811 	bl	8003f7a <abort>

08003f58 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8003f58:	b508      	push	{r3, lr}
 8003f5a:	4780      	blx	r0
 8003f5c:	f000 f80d 	bl	8003f7a <abort>

08003f60 <_ZSt13get_terminatev>:
 8003f60:	4b02      	ldr	r3, [pc, #8]	; (8003f6c <_ZSt13get_terminatev+0xc>)
 8003f62:	6818      	ldr	r0, [r3, #0]
 8003f64:	f3bf 8f5b 	dmb	ish
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	2000000c 	.word	0x2000000c

08003f70 <_ZSt9terminatev>:
 8003f70:	b508      	push	{r3, lr}
 8003f72:	f7ff fff5 	bl	8003f60 <_ZSt13get_terminatev>
 8003f76:	f7ff ffef 	bl	8003f58 <_ZN10__cxxabiv111__terminateEPFvvE>

08003f7a <abort>:
 8003f7a:	2006      	movs	r0, #6
 8003f7c:	b508      	push	{r3, lr}
 8003f7e:	f000 f86b 	bl	8004058 <raise>
 8003f82:	2001      	movs	r0, #1
 8003f84:	f7fc fb70 	bl	8000668 <_exit>

08003f88 <__errno>:
 8003f88:	4b01      	ldr	r3, [pc, #4]	; (8003f90 <__errno+0x8>)
 8003f8a:	6818      	ldr	r0, [r3, #0]
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	20000010 	.word	0x20000010

08003f94 <__libc_init_array>:
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	2600      	movs	r6, #0
 8003f98:	4d0c      	ldr	r5, [pc, #48]	; (8003fcc <__libc_init_array+0x38>)
 8003f9a:	4c0d      	ldr	r4, [pc, #52]	; (8003fd0 <__libc_init_array+0x3c>)
 8003f9c:	1b64      	subs	r4, r4, r5
 8003f9e:	10a4      	asrs	r4, r4, #2
 8003fa0:	42a6      	cmp	r6, r4
 8003fa2:	d109      	bne.n	8003fb8 <__libc_init_array+0x24>
 8003fa4:	f000 f874 	bl	8004090 <_init>
 8003fa8:	2600      	movs	r6, #0
 8003faa:	4d0a      	ldr	r5, [pc, #40]	; (8003fd4 <__libc_init_array+0x40>)
 8003fac:	4c0a      	ldr	r4, [pc, #40]	; (8003fd8 <__libc_init_array+0x44>)
 8003fae:	1b64      	subs	r4, r4, r5
 8003fb0:	10a4      	asrs	r4, r4, #2
 8003fb2:	42a6      	cmp	r6, r4
 8003fb4:	d105      	bne.n	8003fc2 <__libc_init_array+0x2e>
 8003fb6:	bd70      	pop	{r4, r5, r6, pc}
 8003fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fbc:	4798      	blx	r3
 8003fbe:	3601      	adds	r6, #1
 8003fc0:	e7ee      	b.n	8003fa0 <__libc_init_array+0xc>
 8003fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc6:	4798      	blx	r3
 8003fc8:	3601      	adds	r6, #1
 8003fca:	e7f2      	b.n	8003fb2 <__libc_init_array+0x1e>
 8003fcc:	080043e0 	.word	0x080043e0
 8003fd0:	080043e0 	.word	0x080043e0
 8003fd4:	080043e0 	.word	0x080043e0
 8003fd8:	080043ec 	.word	0x080043ec

08003fdc <memcpy>:
 8003fdc:	440a      	add	r2, r1
 8003fde:	4291      	cmp	r1, r2
 8003fe0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003fe4:	d100      	bne.n	8003fe8 <memcpy+0xc>
 8003fe6:	4770      	bx	lr
 8003fe8:	b510      	push	{r4, lr}
 8003fea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fee:	4291      	cmp	r1, r2
 8003ff0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ff4:	d1f9      	bne.n	8003fea <memcpy+0xe>
 8003ff6:	bd10      	pop	{r4, pc}

08003ff8 <memset>:
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	4402      	add	r2, r0
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d100      	bne.n	8004002 <memset+0xa>
 8004000:	4770      	bx	lr
 8004002:	f803 1b01 	strb.w	r1, [r3], #1
 8004006:	e7f9      	b.n	8003ffc <memset+0x4>

08004008 <_raise_r>:
 8004008:	291f      	cmp	r1, #31
 800400a:	b538      	push	{r3, r4, r5, lr}
 800400c:	4604      	mov	r4, r0
 800400e:	460d      	mov	r5, r1
 8004010:	d904      	bls.n	800401c <_raise_r+0x14>
 8004012:	2316      	movs	r3, #22
 8004014:	6003      	str	r3, [r0, #0]
 8004016:	f04f 30ff 	mov.w	r0, #4294967295
 800401a:	bd38      	pop	{r3, r4, r5, pc}
 800401c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800401e:	b112      	cbz	r2, 8004026 <_raise_r+0x1e>
 8004020:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004024:	b94b      	cbnz	r3, 800403a <_raise_r+0x32>
 8004026:	4620      	mov	r0, r4
 8004028:	f000 f830 	bl	800408c <_getpid_r>
 800402c:	462a      	mov	r2, r5
 800402e:	4601      	mov	r1, r0
 8004030:	4620      	mov	r0, r4
 8004032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004036:	f000 b817 	b.w	8004068 <_kill_r>
 800403a:	2b01      	cmp	r3, #1
 800403c:	d00a      	beq.n	8004054 <_raise_r+0x4c>
 800403e:	1c59      	adds	r1, r3, #1
 8004040:	d103      	bne.n	800404a <_raise_r+0x42>
 8004042:	2316      	movs	r3, #22
 8004044:	6003      	str	r3, [r0, #0]
 8004046:	2001      	movs	r0, #1
 8004048:	e7e7      	b.n	800401a <_raise_r+0x12>
 800404a:	2400      	movs	r4, #0
 800404c:	4628      	mov	r0, r5
 800404e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004052:	4798      	blx	r3
 8004054:	2000      	movs	r0, #0
 8004056:	e7e0      	b.n	800401a <_raise_r+0x12>

08004058 <raise>:
 8004058:	4b02      	ldr	r3, [pc, #8]	; (8004064 <raise+0xc>)
 800405a:	4601      	mov	r1, r0
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	f7ff bfd3 	b.w	8004008 <_raise_r>
 8004062:	bf00      	nop
 8004064:	20000010 	.word	0x20000010

08004068 <_kill_r>:
 8004068:	b538      	push	{r3, r4, r5, lr}
 800406a:	2300      	movs	r3, #0
 800406c:	4d06      	ldr	r5, [pc, #24]	; (8004088 <_kill_r+0x20>)
 800406e:	4604      	mov	r4, r0
 8004070:	4608      	mov	r0, r1
 8004072:	4611      	mov	r1, r2
 8004074:	602b      	str	r3, [r5, #0]
 8004076:	f7fc fae7 	bl	8000648 <_kill>
 800407a:	1c43      	adds	r3, r0, #1
 800407c:	d102      	bne.n	8004084 <_kill_r+0x1c>
 800407e:	682b      	ldr	r3, [r5, #0]
 8004080:	b103      	cbz	r3, 8004084 <_kill_r+0x1c>
 8004082:	6023      	str	r3, [r4, #0]
 8004084:	bd38      	pop	{r3, r4, r5, pc}
 8004086:	bf00      	nop
 8004088:	2000037c 	.word	0x2000037c

0800408c <_getpid_r>:
 800408c:	f7fc bad5 	b.w	800063a <_getpid>

08004090 <_init>:
 8004090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004092:	bf00      	nop
 8004094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004096:	bc08      	pop	{r3}
 8004098:	469e      	mov	lr, r3
 800409a:	4770      	bx	lr

0800409c <_fini>:
 800409c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409e:	bf00      	nop
 80040a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040a2:	bc08      	pop	{r3}
 80040a4:	469e      	mov	lr, r3
 80040a6:	4770      	bx	lr
